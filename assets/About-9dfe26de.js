import{_ as U1,r as m2,o as Z2,a as ut,c as ht,F as H1,b as V1,w as Xn,v as qn,d as Qe,t as k1,u as $2,p as _2,e as g2,f as W1}from"./index-787a66bb.js";let J2=[.125187406297,0,.874812593703,.145052473763,0,.854947526237,.16547976012,0,.83452023988,.186094452774,0,.813905547226,.20652173913,0,.79347826087,.226574212894,0,.773425787106,.245689655172,0,.754310344828,.263868065967,0,.736131934033,.28035982009,0,.71964017991,.295352323838,0,.704647676162,.308283358321,0,.691716641679,.319152923538,0,.680847076462,.327773613193,0,.672226386807,.334145427286,0,.665854572714,.33808095952,0,.66191904048,.339580209895,0,.660419790105,.338643178411,0,.661356821589,.335457271364,0,.664542728636,.330022488756,0,.669977511244,.322713643178,0,.677286356822,.313530734633,0,.686469265367,.302848575712,0,.697151424288,.290854572714,0,.709145427286,.277923538231,0,.722076461769,.264242878561,0,.735757121439,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.122188905547,0,.877811094453,.143740629685,0,.856259370315,.16604197901,0,.83395802099,.188343328336,0,.811656671664,.210269865067,0,.789730134933,.231821589205,0,.768178410795,.252436281859,0,.747563718141,.271551724138,0,.728448275862,.289355322339,0,.710644677661,.305097451274,0,.694902548726,.318778110945,0,.681221889055,.330209895052,0,.669790104948,.339205397301,0,.660794602699,.345577211394,0,.654422788606,.349325337331,0,.650674662669,.350637181409,0,.649362818591,.349137931034,0,.650862068966,.345389805097,0,.654610194903,.339205397301,0,.660794602699,.330772113943,0,.669227886057,.320652173913,0,.679347826087,.308658170915,0,.691341829085,.295352323838,0,.704647676162,.280922038981,0,.719077961019,.265742128936,0,.734257871064,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.120314842579,0,.879685157421,.143740629685,0,.856259370315,.167541229385,0,.832458770615,.191716641679,0,.808283358321,.215329835082,0,.784670164918,.238380809595,0,.761619190405,.260307346327,0,.739692653673,.280734632684,0,.719265367316,.299475262369,0,.700524737631,.316154422789,0,.683845577211,.330584707646,0,.669415292354,.342391304348,0,.657608695652,.35176161919,0,.64823838081,.358133433283,0,.641866566717,.36188155922,0,.63811844078,.362631184408,0,.637368815592,.360757121439,0,.639242878561,.356259370315,0,.643740629685,.349137931034,0,.650862068966,.339767616192,0,.660232383808,.328148425787,0,.671851574213,.314842578711,0,.685157421289,.300037481259,0,.699962518741,.284107946027,0,.715892053973,.267428785607,0,.732571214393,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.119377811094,0,.880622188906,.144677661169,0,.855322338831,.170352323838,0,.829647676162,.196214392804,0,.803785607196,.221514242879,0,.778485757121,.246064467766,0,.753935532234,.269302848576,0,.730697151424,.29104197901,0,.70895802099,.310907046477,0,.689092953523,.328335832084,0,.671664167916,.343515742129,0,.656484257871,.355884557721,0,.644115442279,.365442278861,0,.634557721139,.37200149925,0,.62799850075,.375374812594,0,.624625187406,.375937031484,0,.624062968516,.373313343328,0,.626686656672,.36787856072,0,.63212143928,.359820089955,0,.640179910045,.349137931034,0,.650862068966,.336394302849,0,.663605697151,.321589205397,0,.678410794603,.305284857571,0,.694715142429,.287668665667,0,.712331334333,.269302848576,0,.730697151424,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.119752623688,0,.880247376312,.146926536732,0,.853073463268,.174475262369,0,.825524737631,.202023988006,0,.797976011994,.229010494753,0,.770989505247,.255059970015,0,.744940029985,.279797601199,0,.720202398801,.302661169415,0,.697338830585,.323650674663,0,.676349325337,.342016491754,0,.657983508246,.35775862069,0,.64224137931,.370502248876,0,.629497751124,.380247376312,0,.619752623688,.386806596702,0,.613193403298,.390179910045,0,.609820089955,.390179910045,0,.609820089955,.386806596702,0,.613193403298,.380622188906,0,.619377811094,.37143928036,0,.62856071964,.359445277361,0,.640554722639,.345202398801,0,.654797601199,.328898050975,0,.671101949025,.31071964018,0,.68928035982,.291416791604,0,.708583208396,.271176911544,0,.728823088456,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.121251874063,0,.878748125937,.150299850075,0,.849700149925,.179722638681,0,.820277361319,.209145427286,0,.790854572714,.237818590705,0,.762181409295,.265367316342,0,.734632683658,.291416791604,0,.708583208396,.315779610195,0,.684220389805,.33751874063,0,.66248125937,.356821589205,0,.643178410795,.373313343328,0,.626686656672,.386431784108,0,.613568215892,.396364317841,0,.603635682159,.402923538231,0,.597076461769,.405922038981,0,.594077961019,.40535982009,0,.59464017991,.401424287856,0,.598575712144,.394115442279,0,.605884557721,.383808095952,0,.616191904048,.370502248876,0,.629497751124,.354572713643,0,.645427286357,.336581709145,0,.663418290855,.316716641679,0,.683283358321,.295352323838,0,.704647676162,.273050974513,0,.726949025487,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.123875562219,0,.876124437781,.154985007496,0,.845014992504,.18628185907,0,.81371814093,.217391304348,0,.782608695652,.247751124438,0,.752248875562,.276986506747,0,.723013493253,.304535232384,0,.695464767616,.330022488756,0,.669977511244,.352886056972,0,.647113943028,.372938530735,0,.627061469265,.389992503748,0,.610007496252,.403673163418,0,.596326836582,.413793103448,0,.586206896552,.420164917541,0,.579835082459,.422788605697,0,.577211394303,.421664167916,0,.578335832084,.416979010495,0,.583020989505,.408545727136,0,.591454272864,.396926536732,0,.603073463268,.38212143928,0,.61787856072,.364692653673,0,.635307346327,.344827586207,0,.655172413793,.322901049475,0,.677098950525,.299662668666,0,.700337331334,.275299850075,0,.724700149925,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.127811094453,0,.872188905547,.160794602699,0,.839205397301,.194152923538,0,.805847076462,.226949025487,0,.773050974513,.259182908546,0,.740817091454,.289917541229,0,.710082458771,.318778110945,0,.681221889055,.345389805097,0,.654610194903,.369377811094,0,.630622188906,.390367316342,0,.609632683658,.407983508246,0,.592016491754,.42203898051,0,.57796101949,.43215892054,0,.56784107946,.438530734633,0,.561469265367,.440779610195,0,.559220389805,.439092953523,0,.560907046477,.433470764618,0,.566529235382,.423913043478,0,.576086956522,.410982008996,0,.589017991004,.394677661169,0,.605322338831,.375374812594,0,.624625187406,.353635682159,0,.646364317841,.329647676162,0,.670352323838,.30416041979,0,.69583958021,.277548725637,0,.722451274363,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.132871064468,0,.867128935532,.167916041979,0,.832083958021,.20296101949,0,.79703898051,.237818590705,0,.762181409295,.271551724138,0,.728448275862,.303973013493,0,.696026986507,.334145427286,0,.665854572714,.362068965517,0,.637931034483,.387181409295,0,.612818590705,.40892053973,0,.59107946027,.427286356822,0,.572713643178,.441529235382,0,.558470764618,.451836581709,0,.548163418291,.458020989505,0,.541979010495,.459895052474,0,.540104947526,.457458770615,0,.542541229385,.450899550225,0,.549100449775,.440217391304,0,.559782608696,.425787106447,0,.574212893553,.407796101949,0,.592203898051,.386619190405,0,.613380809595,.362818590705,0,.637181409295,.336769115442,0,.663230884558,.309032983508,0,.690967016492,.279985007496,0,.720014992504,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.139055472264,0,.860944527736,.17616191904,0,.82383808096,.21308095952,0,.78691904048,.249625187406,0,.750374812594,.285232383808,0,.714767616192,.319152923538,0,.680847076462,.350824587706,0,.649175412294,.380059970015,0,.619940029985,.406109445277,0,.593890554723,.4285982009,0,.5714017991,.447526236882,0,.552473763118,.462143928036,0,.537856071964,.47263868066,0,.52736131934,.478448275862,0,.521551724138,.479947526237,0,.520052473763,.47676161919,0,.52323838081,.469265367316,0,.530734632684,.457271364318,0,.542728635682,.441341829085,0,.558658170915,.421664167916,0,.578335832084,.398613193403,0,.601386806597,.372563718141,0,.627436281859,.344265367316,0,.655734632684,.314092953523,0,.685907046477,.282421289355,0,.717578710645,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.146364317841,0,.853635682159,.185344827586,0,.814655172414,.224325337331,0,.775674662669,.262743628186,0,.737256371814,.299850074963,0,.700149925037,.335269865067,0,.664730134933,.36844077961,0,.63155922039,.398988005997,0,.601011994003,.425974512744,0,.574025487256,.44940029985,0,.55059970015,.468890554723,0,.531109445277,.483883058471,0,.516116941529,.494377811094,0,.505622188906,.500187406297,0,.499812593703,.501124437781,0,.498875562219,.497188905547,0,.502811094453,.488568215892,0,.511431784108,.475262368816,0,.524737631184,.457833583208,0,.542166416792,.43628185907,0,.56371814093,.411169415292,0,.588830584708,.382871064468,0,.617128935532,.352136431784,0,.647863568216,.319340329835,0,.680659670165,.285232383808,0,.714767616192,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.154610194903,0,.845389805097,.195652173913,0,.804347826087,.236506746627,0,.763493253373,.276611694153,0,.723388305847,.315592203898,0,.684407796102,.352511244378,0,.647488755622,.387181409295,0,.612818590705,.418853073463,0,.581146926537,.446964017991,0,.553035982009,.471139430285,0,.528860569715,.491191904048,0,.508808095952,.50655922039,0,.49344077961,.517053973013,0,.482946026987,.522676161919,0,.477323838081,.523050974513,0,.476949025487,.518365817091,0,.481634182909,.508808095952,0,.491191904048,.494190404798,0,.505809595202,.475074962519,0,.524925037481,.451649175412,0,.548350824588,.424475262369,0,.575524737631,.393740629685,0,.606259370315,.360382308846,0,.639617691154,.324962518741,0,.675037481259,.288043478261,0,.711956521739,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.163980509745,0,.836019490255,.206896551724,0,.793103448276,.249625187406,0,.750374812594,.291604197901,0,.708395802099,.332083958021,0,.667916041979,.370689655172,0,.629310344828,.406671664168,0,.593328335832,.439467766117,0,.560532233883,.468703148426,0,.531296851574,.493815592204,0,.506184407796,.514430284858,0,.485569715142,.530172413793,0,.469827586207,.540667166417,0,.459332833583,.546101949025,0,.453898050975,.546101949025,0,.453898050975,.540667166417,0,.459332833583,.529797601199,0,.470202398801,.513868065967,0,.486131934033,.493065967016,0,.506934032984,.467766116942,0,.532233883058,.438343328336,0,.561656671664,.405172413793,0,.594827586207,.369190404798,0,.630809595202,.33095952024,0,.66904047976,.29104197901,0,.70895802099,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.174100449775,0,.825899550225,.218890554723,0,.781109445277,.263493253373,0,.736506746627,.30715892054,0,.69284107946,.349512743628,0,.650487256372,.389617691154,0,.610382308846,.426911544228,0,.573088455772,.461019490255,0,.538980509745,.491191904048,0,.508808095952,.51724137931,0,.48275862069,.538418290855,0,.461581709145,.554535232384,0,.445464767616,.565217391304,0,.434782608696,.570277361319,0,.429722638681,.569902548726,0,.430097451274,.56371814093,0,.43628185907,.551724137931,0,.448275862069,.534482758621,0,.465517241379,.511994002999,0,.488005997001,.484632683658,0,.515367316342,.452773613193,0,.547226386807,.417166416792,0,.582833583208,.378373313343,0,.621626686657,.337143928036,0,.662856071964,.294227886057,0,.705772113943,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.184782608696,0,.815217391304,.231446776612,0,.768553223388,.277923538231,0,.722076461769,.323463268366,0,.676536731634,.367316341829,0,.632683658171,.40892053973,0,.59107946027,.447713643178,0,.552286356822,.483133433283,0,.516866566717,.514430284858,0,.485569715142,.541229385307,0,.458770614693,.562968515742,0,.437031484258,.579460269865,0,.420539730135,.590329835082,0,.409670164918,.595389805097,0,.404610194903,.594452773613,0,.405547226387,.58751874063,0,.41248125937,.574587706147,0,.425412293853,.555847076462,0,.444152923538,.531671664168,0,.468328335832,.502248875562,0,.497751124438,.468140929535,0,.531859070465,.429910044978,0,.570089955022,.38811844078,0,.61188155922,.343703148426,0,.656296851574,.2976011994,0,.7023988006,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.196214392804,0,.803785607196,.244752623688,0,.755247376312,.292916041979,0,.707083958021,.340142428786,0,.659857571214,.385682158921,0,.614317841079,.428973013493,0,.571026986507,.469077961019,0,.530922038981,.505622188906,0,.494377811094,.538043478261,0,.461956521739,.565592203898,0,.434407796102,.58808095952,0,.41191904048,.605134932534,0,.394865067466,.616191904048,0,.383808095952,.621064467766,0,.378935532234,.619752623688,0,.380247376312,.612068965517,0,.387931034483,.59820089955,0,.40179910045,.578148425787,0,.421851574213,.552286356822,0,.447713643178,.520802098951,0,.479197901049,.484257871064,0,.515742128936,.443215892054,0,.556784107946,.398425787106,0,.601574212894,.350824587706,0,.649175412294,.30116191904,0,.69883808096,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.208020989505,0,.791979010495,.258245877061,0,.741754122939,.308283358321,0,.691716641679,.357196401799,0,.642803598201,.404235382309,0,.595764617691,.449025487256,0,.550974512744,.490629685157,0,.509370314843,.528485757121,0,.471514242879,.561844077961,0,.438155922039,.590517241379,0,.409482758621,.613568215892,0,.386431784108,.630997001499,0,.369002998501,.642428785607,0,.357571214393,.647301349325,0,.352698650675,.645614692654,0,.354385307346,.637368815592,0,.362631184408,.622563718141,0,.377436281859,.6011994003,0,.3988005997,.573650674663,0,.426349325337,.540104947526,0,.459895052474,.501124437781,0,.498875562219,.457271364318,0,.542728635682,.409482758621,0,.590517241379,.35832083958,0,.64167916042,.304910044978,0,.695089955022,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.220014992504,0,.779985007496,.272113943028,0,.727886056972,.32383808096,0,.67616191904,.374250374813,0,.625749625187,.422976011994,0,.577023988006,.469265367316,0,.530734632684,.512181409295,0,.487818590705,.55116191904,0,.44883808096,.585832083958,0,.414167916042,.615254872564,0,.384745127436,.639242878561,0,.360757121439,.657233883058,0,.342766116942,.668853073463,0,.331146926537,.673913043478,0,.326086956522,.67203898051,0,.32796101949,.663418290855,0,.336581709145,.647676161919,0,.352323838081,.625187406297,0,.374812593703,.595952023988,0,.404047976012,.560532233883,0,.439467766117,.519115442279,0,.480884557721,.472451274363,0,.527548725637,.421101949025,0,.578898050975,.366379310345,0,.633620689655,.309032983508,0,.690967016492,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.232196401799,0,.767803598201,.285982008996,0,.714017991004,.339205397301,0,.660794602699,.391304347826,0,.608695652174,.441716641679,0,.558283358321,.489317841079,0,.510682158921,.533545727136,0,.466454272864,.574025487256,0,.425974512744,.609632683658,0,.390367316342,.640179910045,0,.359820089955,.664917541229,0,.335082458771,.683658170915,0,.316341829085,.695652173913,0,.304347826087,.700899550225,0,.299100449775,.699025487256,0,.300974512744,.690029985007,0,.309970014993,.673538230885,0,.326461769115,.649925037481,0,.350074962519,.619377811094,0,.380622188906,.581896551724,0,.418103448276,.538230884558,0,.461769115442,.488568215892,0,.511431784108,.433845577211,0,.566154422789,.375187406297,0,.624812593703,.313530734633,0,.686469265367,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.244377811094,0,.755622188906,.299662668666,0,.700337331334,.354385307346,0,.645614692654,.408170914543,0,.591829085457,.459895052474,0,.540104947526,.508995502249,0,.491004497751,.554722638681,0,.445277361319,.596326836582,0,.403673163418,.633058470765,0,.366941529235,.664730134933,0,.335269865067,.690404797601,0,.309595202399,.709707646177,0,.290292353823,.722451274363,0,.277548725637,.727886056972,0,.272113943028,.7261994003,0,.2738005997,.717016491754,0,.282983508246,.700149925037,0,.299850074963,.675787106447,0,.324212893553,.643928035982,0,.356071964018,.60476011994,0,.39523988006,.558658170915,0,.441341829085,.506184407796,0,.493815592204,.447901049475,0,.552098950525,.384932533733,0,.615067466267,.318590704648,0,.681409295352,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.256184407796,0,.743815592204,.312968515742,0,.687031484258,.369190404798,0,.630809595202,.424475262369,0,.575524737631,.477698650675,0,.522301349325,.528110944528,0,.471889055472,.575149925037,0,.424850074963,.618065967016,0,.381934032984,.656109445277,0,.343890554723,.68871814093,0,.31128185907,.715329835082,0,.284670164918,.735569715142,0,.264430284858,.748875562219,0,.251124437781,.755059970015,0,.244940029985,.75356071964,0,.24643928036,.744377811094,0,.255622188906,.727323838081,0,.272676161919,.7023988006,0,.2976011994,.669602698651,0,.330397301349,.628935532234,0,.371064467766,.580772113943,0,.419227886057,.525487256372,0,.474512743628,.463643178411,0,.536356821589,.396176911544,0,.603823088456,.32440029985,0,.67559970015,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.267616191904,0,.732383808096,.325712143928,0,.674287856072,.383433283358,0,.616566716642,.440029985007,0,.559970014993,.494565217391,0,.505434782609,.546289355322,0,.453710644678,.59464017991,0,.40535982009,.638868065967,0,.361131934033,.678223388306,0,.321776611694,.711956521739,0,.288043478261,.739692653673,0,.260307346327,.760869565217,0,.239130434783,.775112443778,0,.224887556222,.781859070465,0,.218140929535,.780922038981,0,.219077961019,.772113943028,0,.227886056972,.755059970015,0,.244940029985,.729947526237,0,.270052473763,.696589205397,0,.303410794603,.654985007496,0,.345014992504,.605134932534,0,.394865067466,.547413793103,0,.452586206897,.481821589205,0,.518178410795,.409482758621,0,.590517241379,.33152173913,0,.66847826087,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.278298350825,0,.721701649175,.337706146927,0,.662293853073,.396739130435,0,.603260869565,.454460269865,0,.545539730135,.510494752624,0,.489505247376,.563530734633,0,.436469265367,.613193403298,0,.386806596702,.658545727136,0,.341454272864,.699025487256,0,.300974512744,.734070464768,0,.265929535232,.762931034483,0,.237068965517,.785232383808,0,.214767616192,.800412293853,0,.199587706147,.808095952024,0,.191904047976,.807908545727,0,.192091454273,.799850074963,0,.200149925037,.78335832084,0,.21664167916,.758433283358,0,.241566716642,.724887556222,0,.275112443778,.682908545727,0,.317091454273,.631934032984,0,.368065967016,.572151424288,0,.427848575712,.50356071964,0,.49643928036,.425974512744,0,.574025487256,.340704647676,0,.659295352324,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.288230884558,0,.711769115442,.348763118441,0,.651236881559,.40892053973,0,.59107946027,.467953523238,0,.532046476762,.525112443778,0,.474887556222,.579460269865,0,.420539730135,.630247376312,0,.369752623688,.676911544228,0,.323088455772,.718703148426,0,.281296851574,.754872563718,0,.245127436282,.785044977511,0,.214955022489,.808470764618,0,.191529235382,.824775112444,0,.175224887556,.833583208396,0,.166416791604,.83452023988,0,.16547976012,.8273988006,0,.1726011994,.811656671664,0,.188343328336,.78748125937,0,.21251874063,.754685157421,0,.245314842579,.712706146927,0,.287293853073,.661731634183,0,.338268365817,.6011994003,0,.3988005997,.530172413793,0,.469827586207,.448088455772,0,.551911544228,.354010494753,0,.645989505247,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.297226386807,0,.702773613193,.358695652174,0,.641304347826,.419790104948,0,.580209895052,.479947526237,0,.520052473763,.538043478261,0,.461956521739,.593703148426,0,.406296851574,.645802098951,0,.354197901049,.693590704648,0,.306409295352,.736694152924,0,.263305847076,.774175412294,0,.225824587706,.805472263868,0,.194527736132,.830209895052,0,.169790104948,.847826086957,0,.152173913043,.857946026987,0,.142053973013,.860194902549,0,.139805097451,.854385307346,0,.145614692654,.839955022489,0,.160044977511,.817091454273,0,.182908545727,.785419790105,0,.214580209895,.744752623688,0,.255247376312,.694715142429,0,.305284857571,.634745127436,0,.365254872564,.56371814093,0,.43628185907,.479385307346,0,.520614692654,.376686656672,0,.623313343328,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.304722638681,0,.695277361319,.367128935532,0,.632871064468,.42916041979,0,.57083958021,.490254872564,0,.509745127436,.549475262369,0,.450524737631,.606071964018,0,.393928035982,.659295352324,0,.340704647676,.708208395802,0,.291791604198,.752623688156,0,.247376311844,.791229385307,0,.208770614693,.824025487256,0,.175974512744,.850074962519,0,.149925037481,.869190404798,0,.130809595202,.880809595202,0,.119190404798,.884557721139,0,.115442278861,.880434782609,0,.119565217391,.867691154423,0,.132308845577,.846701649175,0,.153298350825,.816904047976,0,.183095952024,.778485757121,0,.221514242879,.730697151424,0,.269302848576,.673350824588,0,.326649175412,.605509745127,0,.394490254873,.524550224888,0,.475449775112,.424287856072,0,.575712143928,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.250374812594,0,.749625187406,.311094452774,0,.688905547226,.374062968516,0,.625937031484,.436844077961,0,.563155922039,.498688155922,0,.501311844078,.558845577211,0,.441154422789,.616379310345,0,.383620689655,.670539730135,0,.329460269865,.720764617691,0,.279235382309,.766116941529,0,.233883058471,.806221889055,0,.193778110945,.840329835082,0,.159670164918,.86787856072,0,.13212143928,.888493253373,0,.111506746627,.90179910045,0,.0982008995502,.907421289355,0,.0925787106447,.904985007496,0,.0950149925037,.894490254873,0,.105509745127,.875749625187,0,.124250374813,.848575712144,0,.151424287856,.812968515742,0,.187031484258,.768740629685,0,.231259370315,.715892053973,0,.284107946027,.654047976012,0,.345952023988,.582833583208,0,.417166416792,.502811094453,0,.497188905547,.424287856072,0,.575712143928,.376686656672,0,.623313343328,.354010494753,0,.645989505247,.340704647676,0,.659295352324,.33152173913,0,.66847826087,.32440029985,0,.67559970015,.318590704648,0,.681409295352,.313530734633,0,.686469265367,.309032983508,0,.690967016492,.304910044978,0,.695089955022,.30116191904,0,.69883808096,.2976011994,0,.7023988006,.294227886057,0,.705772113943,.29104197901,0,.70895802099,.288043478261,0,.711956521739,.285232383808,0,.714767616192,.282421289355,0,.717578710645,.279985007496,0,.720014992504,.277548725637,0,.722451274363,.275299850075,0,.724700149925,.273050974513,0,.726949025487,.271176911544,0,.728823088456,.269302848576,0,.730697151424,.267428785607,0,.732571214393,.265742128936,0,.734257871064,.264242878561,0,.735757121439,.315779610195,0,.684220389805,.379310344828,0,.620689655172,.442653673163,0,.557346326837,.505247376312,0,.494752623688,.565967016492,0,.434032983508,.624437781109,0,.375562218891,.679535232384,0,.320464767616,.730697151424,0,.269302848576,.77736131934,0,.22263868066,.818590704648,0,.181409295352,.854010494753,0,.145989505247,.883058470765,0,.116941529235,.90535982009,0,.09464017991,.920352323838,0,.0796476761619,.927848575712,0,.0721514242879,.927661169415,0,.0723388305847,.919602698651,0,.0803973013493,.903485757121,0,.0965142428786,.879497751124,0,.120502248876,.847451274363,0,.152548725637,.807533733133,0,.192466266867,.760307346327,0,.239692653673,.70595952024,0,.29404047976,.645802098951,0,.354197901049,.582833583208,0,.417166416792,.524550224888,0,.475449775112,.479385307346,0,.520614692654,.448088455772,0,.551911544228,.425974512744,0,.574025487256,.409482758621,0,.590517241379,.396176911544,0,.603823088456,.384932533733,0,.615067466267,.375187406297,0,.624812593703,.366379310345,0,.633620689655,.35832083958,0,.64167916042,.350824587706,0,.649175412294,.343703148426,0,.656296851574,.337143928036,0,.662856071964,.33095952024,0,.66904047976,.324962518741,0,.675037481259,.319340329835,0,.680659670165,.314092953523,0,.685907046477,.309032983508,0,.690967016492,.30416041979,0,.69583958021,.299662668666,0,.700337331334,.295352323838,0,.704647676162,.291416791604,0,.708583208396,.287668665667,0,.712331334333,.284107946027,0,.715892053973,.280922038981,0,.719077961019,.277923538231,0,.722076461769,.318778110945,0,.681221889055,.382683658171,0,.617316341829,.4464017991,0,.5535982009,.509370314843,0,.490629685157,.57083958021,0,.42916041979,.629872563718,0,.370127436282,.68571964018,0,.31428035982,.737818590705,0,.262181409295,.785419790105,0,.214580209895,.82796101949,0,.17203898051,.864692653673,0,.135307346327,.895427286357,0,.104572713643,.919227886057,0,.080772113943,.936094452774,0,.0639055472264,.94583958021,0,.0541604197901,.947901049475,0,.0520989505247,.94227886057,0,.0577211394303,.92916041979,0,.0708395802099,.908545727136,0,.0914542728636,.880434782609,0,.119565217391,.845389805097,0,.154610194903,.803785607196,0,.196214392804,.756746626687,0,.243253373313,.70595952024,0,.29404047976,.654047976012,0,.345952023988,.605509745127,0,.394490254873,.56371814093,0,.43628185907,.530172413793,0,.469827586207,.50356071964,0,.49643928036,.481821589205,0,.518178410795,.463643178411,0,.536356821589,.447901049475,0,.552098950525,.433845577211,0,.566154422789,.421101949025,0,.578898050975,.409482758621,0,.590517241379,.398425787106,0,.601574212894,.38811844078,0,.61188155922,.378373313343,0,.621626686657,.369190404798,0,.630809595202,.360382308846,0,.639617691154,.352136431784,0,.647863568216,.344265367316,0,.655734632684,.336769115442,0,.663230884558,.329647676162,0,.670352323838,.322901049475,0,.677098950525,.316716641679,0,.683283358321,.31071964018,0,.68928035982,.305284857571,0,.694715142429,.300037481259,0,.699962518741,.295352323838,0,.704647676162,.290854572714,0,.709145427286,.320089955022,0,.679910044978,.383995502249,0,.616004497751,.447901049475,0,.552098950525,.511244377811,0,.488755622189,.572901049475,0,.427098950525,.632496251874,0,.367503748126,.689092953523,0,.310907046477,.742128935532,0,.257871064468,.790667166417,0,.209332833583,.834145427286,0,.165854572714,.872188905547,0,.127811094453,.904235382309,0,.0957646176912,.929910044978,0,.0700899550225,.948650674663,0,.0513493253373,.960457271364,0,.0395427286357,.964955022489,0,.0350449775112,.962143928036,0,.037856071964,.952023988006,0,.047976011994,.934782608696,0,.0652173913043,.910794602699,0,.0892053973013,.880434782609,0,.119565217391,.844265367316,0,.155734632684,.803785607196,0,.196214392804,.760307346327,0,.239692653673,.715892053973,0,.284107946027,.673350824588,0,.326649175412,.634745127436,0,.365254872564,.6011994003,0,.3988005997,.572151424288,0,.427848575712,.547413793103,0,.452586206897,.525487256372,0,.474512743628,.506184407796,0,.493815592204,.488568215892,0,.511431784108,.472451274363,0,.527548725637,.457271364318,0,.542728635682,.443215892054,0,.556784107946,.429910044978,0,.570089955022,.417166416792,0,.582833583208,.405172413793,0,.594827586207,.393740629685,0,.606259370315,.382871064468,0,.617128935532,.372563718141,0,.627436281859,.362818590705,0,.637181409295,.353635682159,0,.646364317841,.344827586207,0,.655172413793,.336581709145,0,.663418290855,.328898050975,0,.671101949025,.321589205397,0,.678410794603,.314842578711,0,.685157421289,.308658170915,0,.691341829085,.302848575712,0,.697151424288,.319340329835,0,.680659670165,.383058470765,0,.616941529235,.447151424288,0,.552848575712,.510494752624,0,.489505247376,.572526236882,0,.427473763118,.632308845577,0,.367691154423,.689467766117,0,.310532233883,.743065967016,0,.256934032984,.792353823088,0,.207646176912,.836956521739,0,.163043478261,.876124437781,0,.123875562219,.909670164918,0,.0903298350825,.936844077961,0,.063155922039,.957458770615,0,.0425412293853,.971326836582,0,.0286731634183,.978260869565,0,.0217391304348,.978073463268,0,.0219265367316,.971139430285,0,.0288605697151,.957458770615,0,.0425412293853,.937218890555,0,.0627811094453,.911356821589,0,.0886431784108,.880434782609,0,.119565217391,.845389805097,0,.154610194903,.807533733133,0,.192466266867,.768740629685,0,.231259370315,.730697151424,0,.269302848576,.694715142429,0,.305284857571,.661731634183,0,.338268365817,.631934032984,0,.368065967016,.605134932534,0,.394865067466,.580772113943,0,.419227886057,.558658170915,0,.441341829085,.538230884558,0,.461769115442,.519115442279,0,.480884557721,.501124437781,0,.498875562219,.484257871064,0,.515742128936,.468140929535,0,.531859070465,.452773613193,0,.547226386807,.438343328336,0,.561656671664,.424475262369,0,.575524737631,.411169415292,0,.588830584708,.398613193403,0,.601386806597,.386619190405,0,.613380809595,.375374812594,0,.624625187406,.364692653673,0,.635307346327,.354572713643,0,.645427286357,.345202398801,0,.654797601199,.336394302849,0,.663605697151,.328148425787,0,.671851574213,.320652173913,0,.679347826087,.313530734633,0,.686469265367,.316716641679,0,.683283358321,.380059970015,0,.619940029985,.443778110945,0,.556221889055,.506934032984,0,.493065967016,.568965517241,0,.431034482759,.629122938531,0,.370877061469,.686469265367,0,.313530734633,.740442278861,0,.259557721139,.79047976012,0,.20952023988,.836019490255,0,.163980509745,.876311844078,0,.123688155922,.910982008996,0,.0890179910045,.939842578711,0,.0601574212894,.962143928036,0,.037856071964,.978073463268,0,.0219265367316,.987256371814,0,.0127436281859,.98988005997,0,.01011994003,.985944527736,0,.0140554722639,.975449775112,0,.0245502248876,.959145427286,0,.0408545727136,.937218890555,0,.0627811094453,.910794602699,0,.0892053973013,.880434782609,0,.119565217391,.847451274363,0,.152548725637,.812968515742,0,.187031484258,.778485757121,0,.221514242879,.744752623688,0,.255247376312,.712706146927,0,.287293853073,.682908545727,0,.317091454273,.654985007496,0,.345014992504,.628935532234,0,.371064467766,.60476011994,0,.39523988006,.581896551724,0,.418103448276,.560532233883,0,.439467766117,.540104947526,0,.459895052474,.520802098951,0,.479197901049,.502248875562,0,.497751124438,.484632683658,0,.515367316342,.467766116942,0,.532233883058,.451649175412,0,.548350824588,.43628185907,0,.56371814093,.421664167916,0,.578335832084,.407796101949,0,.592203898051,.394677661169,0,.605322338831,.38212143928,0,.61787856072,.370502248876,0,.629497751124,.359445277361,0,.640554722639,.349137931034,0,.650862068966,.339767616192,0,.660232383808,.330772113943,0,.669227886057,.322713643178,0,.677286356822,.311844077961,0,.688155922039,.374812593703,0,.625187406297,.437968515742,0,.562031484258,.500749625187,0,.499250374813,.562593703148,0,.437406296852,.622563718141,0,.377436281859,.680097451274,0,.319902548726,.734445277361,0,.265554722639,.785044977511,0,.214955022489,.831146926537,0,.168853073463,.872376311844,0,.127623688156,.90835832084,0,.0916416791604,.938343328336,0,.0616566716642,.96251874063,0,.0374812593703,.980322338831,0,.0196776611694,.991754122939,0,.00824587706147,.996814092954,0,.00318590704648,.995689655172,0,.00431034482759,.988380809595,0,.0116191904048,.975449775112,0,.0245502248876,.957458770615,0,.0425412293853,.934782608696,0,.0652173913043,.908545727136,0,.0914542728636,.879497751124,0,.120502248876,.848575712144,0,.151424287856,.816904047976,0,.183095952024,.785419790105,0,.214580209895,.754685157421,0,.245314842579,.724887556222,0,.275112443778,.696589205397,0,.303410794603,.669602698651,0,.330397301349,.643928035982,0,.356071964018,.619377811094,0,.380622188906,.595952023988,0,.404047976012,.573650674663,0,.426349325337,.552286356822,0,.447713643178,.531671664168,0,.468328335832,.511994002999,0,.488005997001,.493065967016,0,.506934032984,.475074962519,0,.524925037481,.457833583208,0,.542166416792,.441341829085,0,.558658170915,.425787106447,0,.574212893553,.410982008996,0,.589017991004,.396926536732,0,.603073463268,.383808095952,0,.616191904048,.37143928036,0,.62856071964,.359820089955,0,.640179910045,.349137931034,0,.650862068966,.339205397301,0,.660794602699,.330022488756,0,.669977511244,.305097451274,0,.694902548726,.367128935532,0,.632871064468,.429535232384,0,.570464767616,.491941529235,0,.508058470765,.553223388306,0,.446776611694,.613005997001,0,.386994002999,.670352323838,0,.329647676162,.724887556222,0,.275112443778,.775674662669,0,.224325337331,.822338830585,0,.177661169415,.864317841079,0,.135682158921,.901049475262,0,.0989505247376,.932533733133,0,.0674662668666,.958020989505,0,.0419790104948,.977698650675,0,.0223013493253,.991191904048,0,.00880809595202,.998500749625,0,.00149925037481,1,0,0,.995689655172,0,.00431034482759,.985944527736,0,.0140554722639,.971139430285,0,.0288605697151,.952023988006,0,.047976011994,.92916041979,0,.0708395802099,.903485757121,0,.0965142428786,.875749625187,0,.124250374813,.846701649175,0,.153298350825,.817091454273,0,.182908545727,.78748125937,0,.21251874063,.758433283358,0,.241566716642,.729947526237,0,.270052473763,.7023988006,0,.2976011994,.675787106447,0,.324212893553,.649925037481,0,.350074962519,.625187406297,0,.374812593703,.6011994003,0,.3988005997,.578148425787,0,.421851574213,.555847076462,0,.444152923538,.534482758621,0,.465517241379,.513868065967,0,.486131934033,.494190404798,0,.505809595202,.475262368816,0,.524737631184,.457271364318,0,.542728635682,.440217391304,0,.559782608696,.423913043478,0,.576086956522,.408545727136,0,.591454272864,.394115442279,0,.605884557721,.380622188906,0,.619377811094,.36787856072,0,.63212143928,.356259370315,0,.643740629685,.345389805097,0,.654610194903,.335457271364,0,.664542728636,.296289355322,0,.703710644678,.357196401799,0,.642803598201,.418665667166,0,.581334332834,.480134932534,0,.519865067466,.540854572714,0,.459145427286,.600074962519,0,.399925037481,.657046476762,0,.342953523238,.711394302849,0,.288605697151,.762368815592,0,.237631184408,.809220389805,0,.190779610195,.85176161919,0,.14823838081,.889430284858,0,.110569715142,.921851574213,0,.0781484257871,.948650674663,0,.0513493253373,.969827586207,0,.0301724137931,.985194902549,0,.0148050974513,.994752623688,0,.00524737631184,.998500749625,0,.00149925037481,.996814092954,0,.00318590704648,.98988005997,0,.01011994003,.978073463268,0,.0219265367316,.962143928036,0,.037856071964,.94227886057,0,.0577211394303,.919602698651,0,.0803973013493,.894490254873,0,.105509745127,.867691154423,0,.132308845577,.839955022489,0,.160044977511,.811656671664,0,.188343328336,.78335832084,0,.21664167916,.755059970015,0,.244940029985,.727323838081,0,.272676161919,.700149925037,0,.299850074963,.673538230885,0,.326461769115,.647676161919,0,.352323838081,.622563718141,0,.377436281859,.59820089955,0,.40179910045,.574587706147,0,.425412293853,.551724137931,0,.448275862069,.529797601199,0,.470202398801,.508808095952,0,.491191904048,.488568215892,0,.511431784108,.469265367316,0,.530734632684,.450899550225,0,.549100449775,.433470764618,0,.566529235382,.416979010495,0,.583020989505,.401424287856,0,.598575712144,.386806596702,0,.613193403298,.373313343328,0,.626686656672,.360757121439,0,.639242878561,.349137931034,0,.650862068966,.338643178411,0,.661356821589,.285232383808,0,.714767616192,.344827586207,0,.655172413793,.405172413793,0,.594827586207,.465704647676,0,.534295352324,.525487256372,0,.474512743628,.58395802099,0,.41604197901,.640367316342,0,.359632683658,.694340329835,0,.305659670165,.745127436282,0,.254872563718,.791979010495,0,.208020989505,.834895052474,0,.165104947526,.873125937031,0,.126874062969,.906296851574,0,.0937031484258,.934407796102,0,.0655922038981,.956896551724,0,.0431034482759,.973763118441,0,.0262368815592,.985194902549,0,.0148050974513,.991191904048,0,.00880809595202,.991754122939,0,.00824587706147,.987256371814,0,.0127436281859,.978260869565,0,.0217391304348,.964955022489,0,.0350449775112,.947901049475,0,.0520989505247,.927661169415,0,.0723388305847,.904985007496,0,.0950149925037,.880434782609,0,.119565217391,.854385307346,0,.145614692654,.8273988006,0,.1726011994,.799850074963,0,.200149925037,.772113943028,0,.227886056972,.744377811094,0,.255622188906,.717016491754,0,.282983508246,.690029985007,0,.309970014993,.663418290855,0,.336581709145,.637368815592,0,.362631184408,.612068965517,0,.387931034483,.58751874063,0,.41248125937,.56371814093,0,.43628185907,.540667166417,0,.459332833583,.518365817091,0,.481634182909,.497188905547,0,.502811094453,.47676161919,0,.52323838081,.457458770615,0,.542541229385,.439092953523,0,.560907046477,.421664167916,0,.578335832084,.40535982009,0,.59464017991,.390179910045,0,.609820089955,.375937031484,0,.624062968516,.362631184408,0,.637368815592,.350637181409,0,.649362818591,.339580209895,0,.660419790105,.272488755622,0,.727511244378,.330584707646,0,.669415292354,.389430284858,0,.610569715142,.448463268366,0,.551536731634,.50712143928,0,.49287856072,.564467766117,0,.435532233883,.620127436282,0,.379872563718,.673538230885,0,.326461769115,.723950524738,0,.276049475262,.770802098951,0,.229197901049,.81371814093,0,.18628185907,.852136431784,0,.147863568216,.886056971514,0,.113943028486,.914917541229,0,.0850824587706,.938530734633,0,.0614692653673,.956896551724,0,.0431034482759,.969827586207,0,.0301724137931,.977698650675,0,.0223013493253,.980322338831,0,.0196776611694,.978073463268,0,.0219265367316,.971326836582,0,.0286731634183,.960457271364,0,.0395427286357,.94583958021,0,.0541604197901,.927848575712,0,.0721514242879,.907421289355,0,.0925787106447,.884557721139,0,.115442278861,.860194902549,0,.139805097451,.83452023988,0,.16547976012,.807908545727,0,.192091454273,.780922038981,0,.219077961019,.75356071964,0,.24643928036,.7261994003,0,.2738005997,.699025487256,0,.300974512744,.67203898051,0,.32796101949,.645614692654,0,.354385307346,.619752623688,0,.380247376312,.594452773613,0,.405547226387,.569902548726,0,.430097451274,.546101949025,0,.453898050975,.523050974513,0,.476949025487,.501124437781,0,.498875562219,.479947526237,0,.520052473763,.459895052474,0,.540104947526,.440779610195,0,.559220389805,.422788605697,0,.577211394303,.405922038981,0,.594077961019,.390179910045,0,.609820089955,.375374812594,0,.624625187406,.36188155922,0,.63811844078,.349325337331,0,.650674662669,.33808095952,0,.66191904048,.257683658171,0,.742316341829,.314092953523,0,.685907046477,.371251874063,0,.628748125937,.428785607196,0,.571214392804,.485944527736,0,.514055472264,.542166416792,0,.457833583208,.596701649175,0,.403298350825,.649175412294,0,.350824587706,.69883808096,0,.30116191904,.745314842579,0,.254685157421,.788043478261,0,.211956521739,.826649175412,0,.173350824588,.860944527736,0,.139055472264,.890367316342,0,.109632683658,.914917541229,0,.0850824587706,.934407796102,0,.0655922038981,.948650674663,0,.0513493253373,.958020989505,0,.0419790104948,.96251874063,0,.0374812593703,.962143928036,0,.037856071964,.957458770615,0,.0425412293853,.948650674663,0,.0513493253373,.936094452774,0,.0639055472264,.920352323838,0,.0796476761619,.90179910045,0,.0982008995502,.880809595202,0,.119190404798,.857946026987,0,.142053973013,.833583208396,0,.166416791604,.808095952024,0,.191904047976,.781859070465,0,.218140929535,.755059970015,0,.244940029985,.727886056972,0,.272113943028,.700899550225,0,.299100449775,.673913043478,0,.326086956522,.647301349325,0,.352698650675,.621064467766,0,.378935532234,.595389805097,0,.404610194903,.570277361319,0,.429722638681,.546101949025,0,.453898050975,.522676161919,0,.477323838081,.500187406297,0,.499812593703,.478448275862,0,.521551724138,.458020989505,0,.541979010495,.438530734633,0,.561469265367,.420164917541,0,.579835082459,.402923538231,0,.597076461769,.386806596702,0,.613193403298,.37200149925,0,.62799850075,.358133433283,0,.641866566717,.345577211394,0,.654422788606,.334145427286,0,.665854572714,.241379310345,0,.758620689655,.295539730135,0,.704460269865,.350824587706,0,.649175412294,.406484257871,0,.593515742129,.462143928036,0,.537856071964,.51667916042,0,.48332083958,.570089955022,0,.429910044978,.62143928036,0,.37856071964,.670164917541,0,.329835082459,.71607946027,0,.28392053973,.758433283358,0,.241566716642,.796851574213,0,.203148425787,.831146926537,0,.168853073463,.860944527736,0,.139055472264,.886056971514,0,.113943028486,.906296851574,0,.0937031484258,.921851574213,0,.0781484257871,.932533733133,0,.0674662668666,.938343328336,0,.0616566716642,.939842578711,0,.0601574212894,.936844077961,0,.063155922039,.929910044978,0,.0700899550225,.919227886057,0,.080772113943,.90535982009,0,.09464017991,.888493253373,0,.111506746627,.869190404798,0,.130809595202,.847826086957,0,.152173913043,.824775112444,0,.175224887556,.800412293853,0,.199587706147,.775112443778,0,.224887556222,.748875562219,0,.251124437781,.722451274363,0,.277548725637,.695652173913,0,.304347826087,.668853073463,0,.331146926537,.642428785607,0,.357571214393,.616191904048,0,.383808095952,.590329835082,0,.409670164918,.565217391304,0,.434782608696,.540667166417,0,.459332833583,.517053973013,0,.482946026987,.494377811094,0,.505622188906,.47263868066,0,.52736131934,.451836581709,0,.548163418291,.43215892054,0,.56784107946,.413793103448,0,.586206896552,.396364317841,0,.603635682159,.380247376312,0,.619752623688,.365442278861,0,.634557721139,.35176161919,0,.64823838081,.339205397301,0,.660794602699,.327773613193,0,.672226386807,.223575712144,0,.776424287856,.275487256372,0,.724512743628,.328523238381,0,.671476761619,.38212143928,0,.61787856072,.43571964018,0,.56428035982,.488755622189,0,.511244377811,.54047976012,0,.45952023988,.590517241379,0,.409482758621,.63811844078,0,.36188155922,.683095952024,0,.316904047976,.724700149925,0,.275299850075,.762743628186,0,.237256371814,.796851574213,0,.203148425787,.826649175412,0,.173350824588,.852136431784,0,.147863568216,.873125937031,0,.126874062969,.889430284858,0,.110569715142,.901049475262,0,.0989505247376,.90835832084,0,.0916416791604,.910982008996,0,.0890179910045,.909670164918,0,.0903298350825,.904235382309,0,.0957646176912,.895427286357,0,.104572713643,.883058470765,0,.116941529235,.86787856072,0,.13212143928,.850074962519,0,.149925037481,.830209895052,0,.169790104948,.808470764618,0,.191529235382,.785232383808,0,.214767616192,.760869565217,0,.239130434783,.735569715142,0,.264430284858,.709707646177,0,.290292353823,.683658170915,0,.316341829085,.657233883058,0,.342766116942,.630997001499,0,.369002998501,.605134932534,0,.394865067466,.579460269865,0,.420539730135,.554535232384,0,.445464767616,.530172413793,0,.469827586207,.50655922039,0,.49344077961,.483883058471,0,.516116941529,.462143928036,0,.537856071964,.441529235382,0,.558470764618,.42203898051,0,.57796101949,.403673163418,0,.596326836582,.386431784108,0,.613568215892,.370502248876,0,.629497751124,.355884557721,0,.644115442279,.342391304348,0,.657608695652,.330209895052,0,.669790104948,.319152923538,0,.680847076462,.204272863568,0,.795727136432,.253748125937,0,.746251874063,.304535232384,0,.695464767616,.355884557721,0,.644115442279,.407233883058,0,.592766116942,.458208395802,0,.541791604198,.508245877061,0,.491754122939,.556596701649,0,.443403298351,.602886056972,0,.397113943028,.646551724138,0,.353448275862,.687218890555,0,.312781109445,.724700149925,0,.275299850075,.758433283358,0,.241566716642,.788043478261,0,.211956521739,.81371814093,0,.18628185907,.834895052474,0,.165104947526,.85176161919,0,.14823838081,.864317841079,0,.135682158921,.872376311844,0,.127623688156,.876311844078,0,.123688155922,.876124437781,0,.123875562219,.872188905547,0,.127811094453,.864692653673,0,.135307346327,.854010494753,0,.145989505247,.840329835082,0,.159670164918,.824025487256,0,.175974512744,.805472263868,0,.194527736132,.785044977511,0,.214955022489,.762931034483,0,.237068965517,.739692653673,0,.260307346327,.715329835082,0,.284670164918,.690404797601,0,.309595202399,.664917541229,0,.335082458771,.639242878561,0,.360757121439,.613568215892,0,.386431784108,.58808095952,0,.41191904048,.562968515742,0,.437031484258,.538418290855,0,.461581709145,.514430284858,0,.485569715142,.491191904048,0,.508808095952,.468890554723,0,.531109445277,.447526236882,0,.552473763118,.427286356822,0,.572713643178,.407983508246,0,.592016491754,.389992503748,0,.610007496252,.373313343328,0,.626686656672,.35775862069,0,.64224137931,.343515742129,0,.656484257871,.330584707646,0,.669415292354,.318778110945,0,.681221889055,.308283358321,0,.691716641679,.184032983508,0,.815967016492,.230697151424,0,.769302848576,.278860569715,0,.721139430285,.327773613193,0,.672226386807,.376874062969,0,.623125937031,.42559970015,0,.57440029985,.473575712144,0,.526424287856,.520052473763,0,.479947526237,.564655172414,0,.435344827586,.607008995502,0,.392991004498,.646551724138,0,.353448275862,.683095952024,0,.316904047976,.71607946027,0,.28392053973,.745314842579,0,.254685157421,.770802098951,0,.229197901049,.791979010495,0,.208020989505,.809220389805,0,.190779610195,.822338830585,0,.177661169415,.831146926537,0,.168853073463,.836019490255,0,.163980509745,.836956521739,0,.163043478261,.834145427286,0,.165854572714,.82796101949,0,.17203898051,.818590704648,0,.181409295352,.806221889055,0,.193778110945,.791229385307,0,.208770614693,.774175412294,0,.225824587706,.754872563718,0,.245127436282,.734070464768,0,.265929535232,.711956521739,0,.288043478261,.68871814093,0,.31128185907,.664730134933,0,.335269865067,.640179910045,0,.359820089955,.615254872564,0,.384745127436,.590517241379,0,.409482758621,.565592203898,0,.434407796102,.541229385307,0,.458770614693,.51724137931,0,.48275862069,.493815592204,0,.506184407796,.471139430285,0,.528860569715,.44940029985,0,.55059970015,.4285982009,0,.5714017991,.40892053973,0,.59107946027,.390367316342,0,.609632683658,.372938530735,0,.627061469265,.356821589205,0,.643178410795,.342016491754,0,.657983508246,.328335832084,0,.671664167916,.316154422789,0,.683845577211,.305097451274,0,.694902548726,.295352323838,0,.704647676162,.162856071964,0,.837143928036,.206709145427,0,.793290854573,.252061469265,0,.747938530735,.298350824588,0,.701649175412,.344827586207,0,.655172413793,.391116941529,0,.608883058471,.436844077961,0,.563155922039,.481259370315,0,.518740629685,.523988005997,0,.476011994003,.564655172414,0,.435344827586,.602886056972,0,.397113943028,.63811844078,0,.36188155922,.670164917541,0,.329835082459,.69883808096,0,.30116191904,.723950524738,0,.276049475262,.745127436282,0,.254872563718,.762368815592,0,.237631184408,.775674662669,0,.224325337331,.785044977511,0,.214955022489,.79047976012,0,.20952023988,.792353823088,0,.207646176912,.790667166417,0,.209332833583,.785419790105,0,.214580209895,.77736131934,0,.22263868066,.766116941529,0,.233883058471,.752623688156,0,.247376311844,.736694152924,0,.263305847076,.718703148426,0,.281296851574,.699025487256,0,.300974512744,.678223388306,0,.321776611694,.656109445277,0,.343890554723,.633058470765,0,.366941529235,.609632683658,0,.390367316342,.585832083958,0,.414167916042,.561844077961,0,.438155922039,.538043478261,0,.461956521739,.514430284858,0,.485569715142,.491191904048,0,.508808095952,.468703148426,0,.531296851574,.446964017991,0,.553035982009,.425974512744,0,.574025487256,.406109445277,0,.593890554723,.387181409295,0,.612818590705,.369377811094,0,.630622188906,.352886056972,0,.647113943028,.33751874063,0,.66248125937,.323650674663,0,.676349325337,.310907046477,0,.689092953523,.299475262369,0,.700524737631,.289355322339,0,.710644677661,.28035982009,0,.71964017991,.141116941529,0,.858883058471,.18215892054,0,.81784107946,.224325337331,0,.775674662669,.267616191904,0,.732383808096,.311469265367,0,.688530734633,.355134932534,0,.644865067466,.398425787106,0,.601574212894,.440592203898,0,.559407796102,.481259370315,0,.518740629685,.520052473763,0,.479947526237,.556596701649,0,.443403298351,.590517241379,0,.409482758621,.62143928036,0,.37856071964,.649175412294,0,.350824587706,.673538230885,0,.326461769115,.694340329835,0,.305659670165,.711394302849,0,.288605697151,.724887556222,0,.275112443778,.734445277361,0,.265554722639,.740442278861,0,.259557721139,.743065967016,0,.256934032984,.742128935532,0,.257871064468,.737818590705,0,.262181409295,.730697151424,0,.269302848576,.720764617691,0,.279235382309,.708208395802,0,.291791604198,.693590704648,0,.306409295352,.676911544228,0,.323088455772,.658545727136,0,.341454272864,.638868065967,0,.361131934033,.618065967016,0,.381934032984,.596326836582,0,.403673163418,.574025487256,0,.425974512744,.55116191904,0,.44883808096,.528485757121,0,.471514242879,.505622188906,0,.494377811094,.483133433283,0,.516866566717,.461019490255,0,.538980509745,.439467766117,0,.560532233883,.418853073463,0,.581146926537,.398988005997,0,.601011994003,.380059970015,0,.619940029985,.362068965517,0,.637931034483,.345389805097,0,.654610194903,.330022488756,0,.669977511244,.315779610195,0,.684220389805,.302661169415,0,.697338830585,.29104197901,0,.70895802099,.280734632684,0,.719265367316,.271551724138,0,.728448275862,.263868065967,0,.736131934033,.119190404798,0,.880809595202,.157046476762,0,.842953523238,.196214392804,0,.803785607196,.236506746627,0,.763493253373,.277173913043,0,.722826086957,.318215892054,0,.681784107946,.358695652174,0,.641304347826,.398425787106,0,.601574212894,.436844077961,0,.563155922039,.473575712144,0,.526424287856,.508245877061,0,.491754122939,.54047976012,0,.45952023988,.570089955022,0,.429910044978,.596701649175,0,.403298350825,.620127436282,0,.379872563718,.640367316342,0,.359632683658,.657046476762,0,.342953523238,.670352323838,0,.329647676162,.680097451274,0,.319902548726,.686469265367,0,.313530734633,.689467766117,0,.310532233883,.689092953523,0,.310907046477,.68571964018,0,.31428035982,.679535232384,0,.320464767616,.670539730135,0,.329460269865,.659295352324,0,.340704647676,.645802098951,0,.354197901049,.630247376312,0,.369752623688,.613193403298,0,.386806596702,.59464017991,0,.40535982009,.575149925037,0,.424850074963,.554722638681,0,.445277361319,.533545727136,0,.466454272864,.512181409295,0,.487818590705,.490629685157,0,.509370314843,.469077961019,0,.530922038981,.447713643178,0,.552286356822,.426911544228,0,.573088455772,.406671664168,0,.593328335832,.387181409295,0,.612818590705,.36844077961,0,.63155922039,.350824587706,0,.649175412294,.334145427286,0,.665854572714,.318778110945,0,.681221889055,.304535232384,0,.695464767616,.291416791604,0,.708583208396,.279797601199,0,.720202398801,.269302848576,0,.730697151424,.260307346327,0,.739692653673,.252436281859,0,.747563718141,.245689655172,0,.754310344828,.0974512743628,0,.902548725637,.131746626687,0,.868253373313,.167728635682,0,.832271364318,.204835082459,0,.795164917541,.242503748126,0,.757496251874,.28035982009,0,.71964017991,.318215892054,0,.681784107946,.355134932534,0,.644865067466,.391116941529,0,.608883058471,.42559970015,0,.57440029985,.458208395802,0,.541791604198,.488755622189,0,.511244377811,.51667916042,0,.48332083958,.542166416792,0,.457833583208,.564467766117,0,.435532233883,.58395802099,0,.41604197901,.600074962519,0,.399925037481,.613005997001,0,.386994002999,.622563718141,0,.377436281859,.629122938531,0,.370877061469,.632308845577,0,.367691154423,.632496251874,0,.367503748126,.629872563718,0,.370127436282,.624437781109,0,.375562218891,.616379310345,0,.383620689655,.606071964018,0,.393928035982,.593703148426,0,.406296851574,.579460269865,0,.420539730135,.563530734633,0,.436469265367,.546289355322,0,.453710644678,.528110944528,0,.471889055472,.508995502249,0,.491004497751,.489317841079,0,.510682158921,.469265367316,0,.530734632684,.449025487256,0,.550974512744,.428973013493,0,.571026986507,.40892053973,0,.59107946027,.389617691154,0,.610382308846,.370689655172,0,.629310344828,.352511244378,0,.647488755622,.335269865067,0,.664730134933,.319152923538,0,.680847076462,.303973013493,0,.696026986507,.289917541229,0,.710082458771,.276986506747,0,.723013493253,.265367316342,0,.734632683658,.255059970015,0,.744940029985,.246064467766,0,.753935532234,.238380809595,0,.761619190405,.231821589205,0,.768178410795,.226574212894,0,.773425787106,.0758995502249,0,.924100449775,.106821589205,0,.893178410795,.139430284858,0,.860569715142,.173163418291,0,.826836581709,.207646176912,0,.792353823088,.242503748126,0,.757496251874,.277173913043,0,.722826086957,.311469265367,0,.688530734633,.344827586207,0,.655172413793,.376874062969,0,.623125937031,.407233883058,0,.592766116942,.43571964018,0,.56428035982,.462143928036,0,.537856071964,.485944527736,0,.514055472264,.50712143928,0,.49287856072,.525487256372,0,.474512743628,.540854572714,0,.459145427286,.553223388306,0,.446776611694,.562593703148,0,.437406296852,.568965517241,0,.431034482759,.572526236882,0,.427473763118,.572901049475,0,.427098950525,.57083958021,0,.42916041979,.565967016492,0,.434032983508,.558845577211,0,.441154422789,.549475262369,0,.450524737631,.538043478261,0,.461956521739,.525112443778,0,.474887556222,.510494752624,0,.489505247376,.494565217391,0,.505434782609,.477698650675,0,.522301349325,.459895052474,0,.540104947526,.441716641679,0,.558283358321,.422976011994,0,.577023988006,.404235382309,0,.595764617691,.385682158921,0,.614317841079,.367316341829,0,.632683658171,.349512743628,0,.650487256372,.332083958021,0,.667916041979,.315592203898,0,.684407796102,.299850074963,0,.700149925037,.285232383808,0,.714767616192,.271551724138,0,.728448275862,.259182908546,0,.740817091454,.247751124438,0,.752248875562,.237818590705,0,.762181409295,.229010494753,0,.770989505247,.221514242879,0,.778485757121,.215329835082,0,.784670164918,.210269865067,0,.789730134933,.20652173913,0,.79347826087,.0550974512744,0,.944902548726,.0826461769115,0,.917353823088,.111694152924,0,.888305847076,.142053973013,0,.857946026987,.173163418291,0,.826836581709,.204835082459,0,.795164917541,.236506746627,0,.763493253373,.267616191904,0,.732383808096,.298350824588,0,.701649175412,.327773613193,0,.672226386807,.355884557721,0,.644115442279,.38212143928,0,.61787856072,.406484257871,0,.593515742129,.428785607196,0,.571214392804,.448463268366,0,.551536731634,.465704647676,0,.534295352324,.480134932534,0,.519865067466,.491941529235,0,.508058470765,.500749625187,0,.499250374813,.506934032984,0,.493065967016,.510494752624,0,.489505247376,.511244377811,0,.488755622189,.509370314843,0,.490629685157,.505247376312,0,.494752623688,.498688155922,0,.501311844078,.490254872564,0,.509745127436,.479947526237,0,.520052473763,.467953523238,0,.532046476762,.454460269865,0,.545539730135,.440029985007,0,.559970014993,.424475262369,0,.575524737631,.408170914543,0,.591829085457,.391304347826,0,.608695652174,.374250374813,0,.625749625187,.357196401799,0,.642803598201,.340142428786,0,.659857571214,.323463268366,0,.676536731634,.30715892054,0,.69284107946,.291604197901,0,.708395802099,.276611694153,0,.723388305847,.262743628186,0,.737256371814,.249625187406,0,.750374812594,.237818590705,0,.762181409295,.226949025487,0,.773050974513,.217391304348,0,.782608695652,.209145427286,0,.790854572714,.202023988006,0,.797976011994,.196214392804,0,.803785607196,.191716641679,0,.808283358321,.188343328336,0,.811656671664,.186094452774,0,.813905547226,.0354197901049,0,.964580209895,.0592203898051,0,.940779610195,.0848950524738,0,.915104947526,.111694152924,0,.888305847076,.139430284858,0,.860569715142,.167728635682,0,.832271364318,.196214392804,0,.803785607196,.224325337331,0,.775674662669,.252061469265,0,.747938530735,.278860569715,0,.721139430285,.304535232384,0,.695464767616,.328523238381,0,.671476761619,.350824587706,0,.649175412294,.371251874063,0,.628748125937,.389430284858,0,.610569715142,.405172413793,0,.594827586207,.418665667166,0,.581334332834,.429535232384,0,.570464767616,.437968515742,0,.562031484258,.443778110945,0,.556221889055,.447151424288,0,.552848575712,.447901049475,0,.552098950525,.4464017991,0,.5535982009,.442653673163,0,.557346326837,.436844077961,0,.563155922039,.42916041979,0,.57083958021,.419790104948,0,.580209895052,.40892053973,0,.59107946027,.396739130435,0,.603260869565,.383433283358,0,.616566716642,.369190404798,0,.630809595202,.354385307346,0,.645614692654,.339205397301,0,.660794602699,.32383808096,0,.67616191904,.308283358321,0,.691716641679,.292916041979,0,.707083958021,.277923538231,0,.722076461769,.263493253373,0,.736506746627,.249625187406,0,.750374812594,.236506746627,0,.763493253373,.224325337331,0,.775674662669,.21308095952,0,.78691904048,.20296101949,0,.79703898051,.194152923538,0,.805847076462,.18628185907,0,.81371814093,.179722638681,0,.820277361319,.174475262369,0,.825524737631,.170352323838,0,.829647676162,.167541229385,0,.832458770615,.16604197901,0,.83395802099,.16547976012,0,.83452023988,.0168665667166,0,.983133433283,.0372938530735,0,.962706146927,.0592203898051,0,.940779610195,.0826461769115,0,.917353823088,.106821589205,0,.893178410795,.131746626687,0,.868253373313,.157046476762,0,.842953523238,.18215892054,0,.81784107946,.206709145427,0,.793290854573,.230697151424,0,.769302848576,.253748125937,0,.746251874063,.275487256372,0,.724512743628,.295539730135,0,.704460269865,.314092953523,0,.685907046477,.330584707646,0,.669415292354,.344827586207,0,.655172413793,.357196401799,0,.642803598201,.367128935532,0,.632871064468,.374812593703,0,.625187406297,.380059970015,0,.619940029985,.383058470765,0,.616941529235,.383995502249,0,.616004497751,.382683658171,0,.617316341829,.379310344828,0,.620689655172,.374062968516,0,.625937031484,.367128935532,0,.632871064468,.358695652174,0,.641304347826,.348763118441,0,.651236881559,.337706146927,0,.662293853073,.325712143928,0,.674287856072,.312968515742,0,.687031484258,.299662668666,0,.700337331334,.285982008996,0,.714017991004,.272113943028,0,.727886056972,.258245877061,0,.741754122939,.244752623688,0,.755247376312,.231446776612,0,.768553223388,.218890554723,0,.781109445277,.206896551724,0,.793103448276,.195652173913,0,.804347826087,.185344827586,0,.814655172414,.17616191904,0,.82383808096,.167916041979,0,.832083958021,.160794602699,0,.839205397301,.154985007496,0,.845014992504,.150299850075,0,.849700149925,.146926536732,0,.853073463268,.144677661169,0,.855322338831,.143740629685,0,.856259370315,.143740629685,0,.856259370315,.145052473763,0,.854947526237,0,0,1,.0168665667166,0,.983133433283,.0354197901049,0,.964580209895,.0550974512744,0,.944902548726,.0758995502249,0,.924100449775,.0974512743628,0,.902548725637,.119190404798,0,.880809595202,.141116941529,0,.858883058471,.162856071964,0,.837143928036,.184032983508,0,.815967016492,.204272863568,0,.795727136432,.223575712144,0,.776424287856,.241379310345,0,.758620689655,.257683658171,0,.742316341829,.272488755622,0,.727511244378,.285232383808,0,.714767616192,.296289355322,0,.703710644678,.305097451274,0,.694902548726,.311844077961,0,.688155922039,.316716641679,0,.683283358321,.319340329835,0,.680659670165,.320089955022,0,.679910044978,.318778110945,0,.681221889055,.315779610195,0,.684220389805,.311094452774,0,.688905547226,.304722638681,0,.695277361319,.297226386807,0,.702773613193,.288230884558,0,.711769115442,.278298350825,0,.721701649175,.267616191904,0,.732383808096,.256184407796,0,.743815592204,.244377811094,0,.755622188906,.232196401799,0,.767803598201,.220014992504,0,.779985007496,.208020989505,0,.791979010495,.196214392804,0,.803785607196,.184782608696,0,.815217391304,.174100449775,0,.825899550225,.163980509745,0,.836019490255,.154610194903,0,.845389805097,.146364317841,0,.853635682159,.139055472264,0,.860944527736,.132871064468,0,.867128935532,.127811094453,0,.872188905547,.123875562219,0,.876124437781,.121251874063,0,.878748125937,.119752623688,0,.880247376312,.119377811094,0,.880622188906,.120314842579,0,.879685157421,.122188905547,0,.877811094453,.125187406297,0,.874812593703],Q2=[0,1,52,0,52,51,51,52,103,51,103,102,102,103,154,102,154,153,153,154,205,153,205,204,204,205,256,204,256,255,255,256,307,255,307,306,306,307,358,306,358,357,357,358,409,357,409,408,408,409,460,408,460,459,459,460,511,459,511,510,510,511,562,510,562,561,561,562,613,561,613,612,612,613,664,612,664,663,663,664,715,663,715,714,714,715,766,714,766,765,765,766,817,765,817,816,816,817,868,816,868,867,867,868,919,867,919,918,918,919,970,918,970,969,969,970,1021,969,1021,1020,1020,1021,1072,1020,1072,1071,1071,1072,1123,1071,1123,1122,1122,1123,1174,1122,1174,1173,1173,1174,1225,1173,1225,1224,1224,1225,1276,1224,1276,1275,1275,1276,1327,1275,1327,1326,1326,1327,1378,1326,1378,1377,1377,1378,1429,1377,1429,1428,1428,1429,1480,1428,1480,1479,1479,1480,1531,1479,1531,1530,1530,1531,1582,1530,1582,1581,1581,1582,1633,1581,1633,1632,1632,1633,1684,1632,1684,1683,1683,1684,1735,1683,1735,1734,1734,1735,1786,1734,1786,1785,1785,1786,1837,1785,1837,1836,1836,1837,1888,1836,1888,1887,1887,1888,1939,1887,1939,1938,1938,1939,1990,1938,1990,1989,1989,1990,2041,1989,2041,2040,2040,2041,2092,2040,2092,2091,2091,2092,2143,2091,2143,2142,2142,2143,2194,2142,2194,2193,2193,2194,2245,2193,2245,2244,2244,2245,2296,2244,2296,2295,2295,2296,2347,2295,2347,2346,2346,2347,2398,2346,2398,2397,2397,2398,2449,2397,2449,2448,2448,2449,2500,2448,2500,2499,2499,2500,2551,2499,2551,2550,1,2,53,1,53,52,52,53,104,52,104,103,103,104,155,103,155,154,154,155,206,154,206,205,205,206,257,205,257,256,256,257,308,256,308,307,307,308,359,307,359,358,358,359,410,358,410,409,409,410,461,409,461,460,460,461,512,460,512,511,511,512,563,511,563,562,562,563,614,562,614,613,613,614,665,613,665,664,664,665,716,664,716,715,715,716,767,715,767,766,766,767,818,766,818,817,817,818,869,817,869,868,868,869,920,868,920,919,919,920,971,919,971,970,970,971,1022,970,1022,1021,1021,1022,1073,1021,1073,1072,1072,1073,1124,1072,1124,1123,1123,1124,1175,1123,1175,1174,1174,1175,1226,1174,1226,1225,1225,1226,1277,1225,1277,1276,1276,1277,1328,1276,1328,1327,1327,1328,1379,1327,1379,1378,1378,1379,1430,1378,1430,1429,1429,1430,1481,1429,1481,1480,1480,1481,1532,1480,1532,1531,1531,1532,1583,1531,1583,1582,1582,1583,1634,1582,1634,1633,1633,1634,1685,1633,1685,1684,1684,1685,1736,1684,1736,1735,1735,1736,1787,1735,1787,1786,1786,1787,1838,1786,1838,1837,1837,1838,1889,1837,1889,1888,1888,1889,1940,1888,1940,1939,1939,1940,1991,1939,1991,1990,1990,1991,2042,1990,2042,2041,2041,2042,2093,2041,2093,2092,2092,2093,2144,2092,2144,2143,2143,2144,2195,2143,2195,2194,2194,2195,2246,2194,2246,2245,2245,2246,2297,2245,2297,2296,2296,2297,2348,2296,2348,2347,2347,2348,2399,2347,2399,2398,2398,2399,2450,2398,2450,2449,2449,2450,2501,2449,2501,2500,2500,2501,2552,2500,2552,2551,2,3,54,2,54,53,53,54,105,53,105,104,104,105,156,104,156,155,155,156,207,155,207,206,206,207,258,206,258,257,257,258,309,257,309,308,308,309,360,308,360,359,359,360,411,359,411,410,410,411,462,410,462,461,461,462,513,461,513,512,512,513,564,512,564,563,563,564,615,563,615,614,614,615,666,614,666,665,665,666,717,665,717,716,716,717,768,716,768,767,767,768,819,767,819,818,818,819,870,818,870,869,869,870,921,869,921,920,920,921,972,920,972,971,971,972,1023,971,1023,1022,1022,1023,1074,1022,1074,1073,1073,1074,1125,1073,1125,1124,1124,1125,1176,1124,1176,1175,1175,1176,1227,1175,1227,1226,1226,1227,1278,1226,1278,1277,1277,1278,1329,1277,1329,1328,1328,1329,1380,1328,1380,1379,1379,1380,1431,1379,1431,1430,1430,1431,1482,1430,1482,1481,1481,1482,1533,1481,1533,1532,1532,1533,1584,1532,1584,1583,1583,1584,1635,1583,1635,1634,1634,1635,1686,1634,1686,1685,1685,1686,1737,1685,1737,1736,1736,1737,1788,1736,1788,1787,1787,1788,1839,1787,1839,1838,1838,1839,1890,1838,1890,1889,1889,1890,1941,1889,1941,1940,1940,1941,1992,1940,1992,1991,1991,1992,2043,1991,2043,2042,2042,2043,2094,2042,2094,2093,2093,2094,2145,2093,2145,2144,2144,2145,2196,2144,2196,2195,2195,2196,2247,2195,2247,2246,2246,2247,2298,2246,2298,2297,2297,2298,2349,2297,2349,2348,2348,2349,2400,2348,2400,2399,2399,2400,2451,2399,2451,2450,2450,2451,2502,2450,2502,2501,2501,2502,2553,2501,2553,2552,3,4,55,3,55,54,54,55,106,54,106,105,105,106,157,105,157,156,156,157,208,156,208,207,207,208,259,207,259,258,258,259,310,258,310,309,309,310,361,309,361,360,360,361,412,360,412,411,411,412,463,411,463,462,462,463,514,462,514,513,513,514,565,513,565,564,564,565,616,564,616,615,615,616,667,615,667,666,666,667,718,666,718,717,717,718,769,717,769,768,768,769,820,768,820,819,819,820,871,819,871,870,870,871,922,870,922,921,921,922,973,921,973,972,972,973,1024,972,1024,1023,1023,1024,1075,1023,1075,1074,1074,1075,1126,1074,1126,1125,1125,1126,1177,1125,1177,1176,1176,1177,1228,1176,1228,1227,1227,1228,1279,1227,1279,1278,1278,1279,1330,1278,1330,1329,1329,1330,1381,1329,1381,1380,1380,1381,1432,1380,1432,1431,1431,1432,1483,1431,1483,1482,1482,1483,1534,1482,1534,1533,1533,1534,1585,1533,1585,1584,1584,1585,1636,1584,1636,1635,1635,1636,1687,1635,1687,1686,1686,1687,1738,1686,1738,1737,1737,1738,1789,1737,1789,1788,1788,1789,1840,1788,1840,1839,1839,1840,1891,1839,1891,1890,1890,1891,1942,1890,1942,1941,1941,1942,1993,1941,1993,1992,1992,1993,2044,1992,2044,2043,2043,2044,2095,2043,2095,2094,2094,2095,2146,2094,2146,2145,2145,2146,2197,2145,2197,2196,2196,2197,2248,2196,2248,2247,2247,2248,2299,2247,2299,2298,2298,2299,2350,2298,2350,2349,2349,2350,2401,2349,2401,2400,2400,2401,2452,2400,2452,2451,2451,2452,2503,2451,2503,2502,2502,2503,2554,2502,2554,2553,4,5,56,4,56,55,55,56,107,55,107,106,106,107,158,106,158,157,157,158,209,157,209,208,208,209,260,208,260,259,259,260,311,259,311,310,310,311,362,310,362,361,361,362,413,361,413,412,412,413,464,412,464,463,463,464,515,463,515,514,514,515,566,514,566,565,565,566,617,565,617,616,616,617,668,616,668,667,667,668,719,667,719,718,718,719,770,718,770,769,769,770,821,769,821,820,820,821,872,820,872,871,871,872,923,871,923,922,922,923,974,922,974,973,973,974,1025,973,1025,1024,1024,1025,1076,1024,1076,1075,1075,1076,1127,1075,1127,1126,1126,1127,1178,1126,1178,1177,1177,1178,1229,1177,1229,1228,1228,1229,1280,1228,1280,1279,1279,1280,1331,1279,1331,1330,1330,1331,1382,1330,1382,1381,1381,1382,1433,1381,1433,1432,1432,1433,1484,1432,1484,1483,1483,1484,1535,1483,1535,1534,1534,1535,1586,1534,1586,1585,1585,1586,1637,1585,1637,1636,1636,1637,1688,1636,1688,1687,1687,1688,1739,1687,1739,1738,1738,1739,1790,1738,1790,1789,1789,1790,1841,1789,1841,1840,1840,1841,1892,1840,1892,1891,1891,1892,1943,1891,1943,1942,1942,1943,1994,1942,1994,1993,1993,1994,2045,1993,2045,2044,2044,2045,2096,2044,2096,2095,2095,2096,2147,2095,2147,2146,2146,2147,2198,2146,2198,2197,2197,2198,2249,2197,2249,2248,2248,2249,2300,2248,2300,2299,2299,2300,2351,2299,2351,2350,2350,2351,2402,2350,2402,2401,2401,2402,2453,2401,2453,2452,2452,2453,2504,2452,2504,2503,2503,2504,2555,2503,2555,2554,5,6,57,5,57,56,56,57,108,56,108,107,107,108,159,107,159,158,158,159,210,158,210,209,209,210,261,209,261,260,260,261,312,260,312,311,311,312,363,311,363,362,362,363,414,362,414,413,413,414,465,413,465,464,464,465,516,464,516,515,515,516,567,515,567,566,566,567,618,566,618,617,617,618,669,617,669,668,668,669,720,668,720,719,719,720,771,719,771,770,770,771,822,770,822,821,821,822,873,821,873,872,872,873,924,872,924,923,923,924,975,923,975,974,974,975,1026,974,1026,1025,1025,1026,1077,1025,1077,1076,1076,1077,1128,1076,1128,1127,1127,1128,1179,1127,1179,1178,1178,1179,1230,1178,1230,1229,1229,1230,1281,1229,1281,1280,1280,1281,1332,1280,1332,1331,1331,1332,1383,1331,1383,1382,1382,1383,1434,1382,1434,1433,1433,1434,1485,1433,1485,1484,1484,1485,1536,1484,1536,1535,1535,1536,1587,1535,1587,1586,1586,1587,1638,1586,1638,1637,1637,1638,1689,1637,1689,1688,1688,1689,1740,1688,1740,1739,1739,1740,1791,1739,1791,1790,1790,1791,1842,1790,1842,1841,1841,1842,1893,1841,1893,1892,1892,1893,1944,1892,1944,1943,1943,1944,1995,1943,1995,1994,1994,1995,2046,1994,2046,2045,2045,2046,2097,2045,2097,2096,2096,2097,2148,2096,2148,2147,2147,2148,2199,2147,2199,2198,2198,2199,2250,2198,2250,2249,2249,2250,2301,2249,2301,2300,2300,2301,2352,2300,2352,2351,2351,2352,2403,2351,2403,2402,2402,2403,2454,2402,2454,2453,2453,2454,2505,2453,2505,2504,2504,2505,2556,2504,2556,2555,6,7,58,6,58,57,57,58,109,57,109,108,108,109,160,108,160,159,159,160,211,159,211,210,210,211,262,210,262,261,261,262,313,261,313,312,312,313,364,312,364,363,363,364,415,363,415,414,414,415,466,414,466,465,465,466,517,465,517,516,516,517,568,516,568,567,567,568,619,567,619,618,618,619,670,618,670,669,669,670,721,669,721,720,720,721,772,720,772,771,771,772,823,771,823,822,822,823,874,822,874,873,873,874,925,873,925,924,924,925,976,924,976,975,975,976,1027,975,1027,1026,1026,1027,1078,1026,1078,1077,1077,1078,1129,1077,1129,1128,1128,1129,1180,1128,1180,1179,1179,1180,1231,1179,1231,1230,1230,1231,1282,1230,1282,1281,1281,1282,1333,1281,1333,1332,1332,1333,1384,1332,1384,1383,1383,1384,1435,1383,1435,1434,1434,1435,1486,1434,1486,1485,1485,1486,1537,1485,1537,1536,1536,1537,1588,1536,1588,1587,1587,1588,1639,1587,1639,1638,1638,1639,1690,1638,1690,1689,1689,1690,1741,1689,1741,1740,1740,1741,1792,1740,1792,1791,1791,1792,1843,1791,1843,1842,1842,1843,1894,1842,1894,1893,1893,1894,1945,1893,1945,1944,1944,1945,1996,1944,1996,1995,1995,1996,2047,1995,2047,2046,2046,2047,2098,2046,2098,2097,2097,2098,2149,2097,2149,2148,2148,2149,2200,2148,2200,2199,2199,2200,2251,2199,2251,2250,2250,2251,2302,2250,2302,2301,2301,2302,2353,2301,2353,2352,2352,2353,2404,2352,2404,2403,2403,2404,2455,2403,2455,2454,2454,2455,2506,2454,2506,2505,2505,2506,2557,2505,2557,2556,7,8,59,7,59,58,58,59,110,58,110,109,109,110,161,109,161,160,160,161,212,160,212,211,211,212,263,211,263,262,262,263,314,262,314,313,313,314,365,313,365,364,364,365,416,364,416,415,415,416,467,415,467,466,466,467,518,466,518,517,517,518,569,517,569,568,568,569,620,568,620,619,619,620,671,619,671,670,670,671,722,670,722,721,721,722,773,721,773,772,772,773,824,772,824,823,823,824,875,823,875,874,874,875,926,874,926,925,925,926,977,925,977,976,976,977,1028,976,1028,1027,1027,1028,1079,1027,1079,1078,1078,1079,1130,1078,1130,1129,1129,1130,1181,1129,1181,1180,1180,1181,1232,1180,1232,1231,1231,1232,1283,1231,1283,1282,1282,1283,1334,1282,1334,1333,1333,1334,1385,1333,1385,1384,1384,1385,1436,1384,1436,1435,1435,1436,1487,1435,1487,1486,1486,1487,1538,1486,1538,1537,1537,1538,1589,1537,1589,1588,1588,1589,1640,1588,1640,1639,1639,1640,1691,1639,1691,1690,1690,1691,1742,1690,1742,1741,1741,1742,1793,1741,1793,1792,1792,1793,1844,1792,1844,1843,1843,1844,1895,1843,1895,1894,1894,1895,1946,1894,1946,1945,1945,1946,1997,1945,1997,1996,1996,1997,2048,1996,2048,2047,2047,2048,2099,2047,2099,2098,2098,2099,2150,2098,2150,2149,2149,2150,2201,2149,2201,2200,2200,2201,2252,2200,2252,2251,2251,2252,2303,2251,2303,2302,2302,2303,2354,2302,2354,2353,2353,2354,2405,2353,2405,2404,2404,2405,2456,2404,2456,2455,2455,2456,2507,2455,2507,2506,2506,2507,2558,2506,2558,2557,8,9,60,8,60,59,59,60,111,59,111,110,110,111,162,110,162,161,161,162,213,161,213,212,212,213,264,212,264,263,263,264,315,263,315,314,314,315,366,314,366,365,365,366,417,365,417,416,416,417,468,416,468,467,467,468,519,467,519,518,518,519,570,518,570,569,569,570,621,569,621,620,620,621,672,620,672,671,671,672,723,671,723,722,722,723,774,722,774,773,773,774,825,773,825,824,824,825,876,824,876,875,875,876,927,875,927,926,926,927,978,926,978,977,977,978,1029,977,1029,1028,1028,1029,1080,1028,1080,1079,1079,1080,1131,1079,1131,1130,1130,1131,1182,1130,1182,1181,1181,1182,1233,1181,1233,1232,1232,1233,1284,1232,1284,1283,1283,1284,1335,1283,1335,1334,1334,1335,1386,1334,1386,1385,1385,1386,1437,1385,1437,1436,1436,1437,1488,1436,1488,1487,1487,1488,1539,1487,1539,1538,1538,1539,1590,1538,1590,1589,1589,1590,1641,1589,1641,1640,1640,1641,1692,1640,1692,1691,1691,1692,1743,1691,1743,1742,1742,1743,1794,1742,1794,1793,1793,1794,1845,1793,1845,1844,1844,1845,1896,1844,1896,1895,1895,1896,1947,1895,1947,1946,1946,1947,1998,1946,1998,1997,1997,1998,2049,1997,2049,2048,2048,2049,2100,2048,2100,2099,2099,2100,2151,2099,2151,2150,2150,2151,2202,2150,2202,2201,2201,2202,2253,2201,2253,2252,2252,2253,2304,2252,2304,2303,2303,2304,2355,2303,2355,2354,2354,2355,2406,2354,2406,2405,2405,2406,2457,2405,2457,2456,2456,2457,2508,2456,2508,2507,2507,2508,2559,2507,2559,2558,9,10,61,9,61,60,60,61,112,60,112,111,111,112,163,111,163,162,162,163,214,162,214,213,213,214,265,213,265,264,264,265,316,264,316,315,315,316,367,315,367,366,366,367,418,366,418,417,417,418,469,417,469,468,468,469,520,468,520,519,519,520,571,519,571,570,570,571,622,570,622,621,621,622,673,621,673,672,672,673,724,672,724,723,723,724,775,723,775,774,774,775,826,774,826,825,825,826,877,825,877,876,876,877,928,876,928,927,927,928,979,927,979,978,978,979,1030,978,1030,1029,1029,1030,1081,1029,1081,1080,1080,1081,1132,1080,1132,1131,1131,1132,1183,1131,1183,1182,1182,1183,1234,1182,1234,1233,1233,1234,1285,1233,1285,1284,1284,1285,1336,1284,1336,1335,1335,1336,1387,1335,1387,1386,1386,1387,1438,1386,1438,1437,1437,1438,1489,1437,1489,1488,1488,1489,1540,1488,1540,1539,1539,1540,1591,1539,1591,1590,1590,1591,1642,1590,1642,1641,1641,1642,1693,1641,1693,1692,1692,1693,1744,1692,1744,1743,1743,1744,1795,1743,1795,1794,1794,1795,1846,1794,1846,1845,1845,1846,1897,1845,1897,1896,1896,1897,1948,1896,1948,1947,1947,1948,1999,1947,1999,1998,1998,1999,2050,1998,2050,2049,2049,2050,2101,2049,2101,2100,2100,2101,2152,2100,2152,2151,2151,2152,2203,2151,2203,2202,2202,2203,2254,2202,2254,2253,2253,2254,2305,2253,2305,2304,2304,2305,2356,2304,2356,2355,2355,2356,2407,2355,2407,2406,2406,2407,2458,2406,2458,2457,2457,2458,2509,2457,2509,2508,2508,2509,2560,2508,2560,2559,10,11,62,10,62,61,61,62,113,61,113,112,112,113,164,112,164,163,163,164,215,163,215,214,214,215,266,214,266,265,265,266,317,265,317,316,316,317,368,316,368,367,367,368,419,367,419,418,418,419,470,418,470,469,469,470,521,469,521,520,520,521,572,520,572,571,571,572,623,571,623,622,622,623,674,622,674,673,673,674,725,673,725,724,724,725,776,724,776,775,775,776,827,775,827,826,826,827,878,826,878,877,877,878,929,877,929,928,928,929,980,928,980,979,979,980,1031,979,1031,1030,1030,1031,1082,1030,1082,1081,1081,1082,1133,1081,1133,1132,1132,1133,1184,1132,1184,1183,1183,1184,1235,1183,1235,1234,1234,1235,1286,1234,1286,1285,1285,1286,1337,1285,1337,1336,1336,1337,1388,1336,1388,1387,1387,1388,1439,1387,1439,1438,1438,1439,1490,1438,1490,1489,1489,1490,1541,1489,1541,1540,1540,1541,1592,1540,1592,1591,1591,1592,1643,1591,1643,1642,1642,1643,1694,1642,1694,1693,1693,1694,1745,1693,1745,1744,1744,1745,1796,1744,1796,1795,1795,1796,1847,1795,1847,1846,1846,1847,1898,1846,1898,1897,1897,1898,1949,1897,1949,1948,1948,1949,2e3,1948,2e3,1999,1999,2e3,2051,1999,2051,2050,2050,2051,2102,2050,2102,2101,2101,2102,2153,2101,2153,2152,2152,2153,2204,2152,2204,2203,2203,2204,2255,2203,2255,2254,2254,2255,2306,2254,2306,2305,2305,2306,2357,2305,2357,2356,2356,2357,2408,2356,2408,2407,2407,2408,2459,2407,2459,2458,2458,2459,2510,2458,2510,2509,2509,2510,2561,2509,2561,2560,11,12,63,11,63,62,62,63,114,62,114,113,113,114,165,113,165,164,164,165,216,164,216,215,215,216,267,215,267,266,266,267,318,266,318,317,317,318,369,317,369,368,368,369,420,368,420,419,419,420,471,419,471,470,470,471,522,470,522,521,521,522,573,521,573,572,572,573,624,572,624,623,623,624,675,623,675,674,674,675,726,674,726,725,725,726,777,725,777,776,776,777,828,776,828,827,827,828,879,827,879,878,878,879,930,878,930,929,929,930,981,929,981,980,980,981,1032,980,1032,1031,1031,1032,1083,1031,1083,1082,1082,1083,1134,1082,1134,1133,1133,1134,1185,1133,1185,1184,1184,1185,1236,1184,1236,1235,1235,1236,1287,1235,1287,1286,1286,1287,1338,1286,1338,1337,1337,1338,1389,1337,1389,1388,1388,1389,1440,1388,1440,1439,1439,1440,1491,1439,1491,1490,1490,1491,1542,1490,1542,1541,1541,1542,1593,1541,1593,1592,1592,1593,1644,1592,1644,1643,1643,1644,1695,1643,1695,1694,1694,1695,1746,1694,1746,1745,1745,1746,1797,1745,1797,1796,1796,1797,1848,1796,1848,1847,1847,1848,1899,1847,1899,1898,1898,1899,1950,1898,1950,1949,1949,1950,2001,1949,2001,2e3,2e3,2001,2052,2e3,2052,2051,2051,2052,2103,2051,2103,2102,2102,2103,2154,2102,2154,2153,2153,2154,2205,2153,2205,2204,2204,2205,2256,2204,2256,2255,2255,2256,2307,2255,2307,2306,2306,2307,2358,2306,2358,2357,2357,2358,2409,2357,2409,2408,2408,2409,2460,2408,2460,2459,2459,2460,2511,2459,2511,2510,2510,2511,2562,2510,2562,2561,12,13,64,12,64,63,63,64,115,63,115,114,114,115,166,114,166,165,165,166,217,165,217,216,216,217,268,216,268,267,267,268,319,267,319,318,318,319,370,318,370,369,369,370,421,369,421,420,420,421,472,420,472,471,471,472,523,471,523,522,522,523,574,522,574,573,573,574,625,573,625,624,624,625,676,624,676,675,675,676,727,675,727,726,726,727,778,726,778,777,777,778,829,777,829,828,828,829,880,828,880,879,879,880,931,879,931,930,930,931,982,930,982,981,981,982,1033,981,1033,1032,1032,1033,1084,1032,1084,1083,1083,1084,1135,1083,1135,1134,1134,1135,1186,1134,1186,1185,1185,1186,1237,1185,1237,1236,1236,1237,1288,1236,1288,1287,1287,1288,1339,1287,1339,1338,1338,1339,1390,1338,1390,1389,1389,1390,1441,1389,1441,1440,1440,1441,1492,1440,1492,1491,1491,1492,1543,1491,1543,1542,1542,1543,1594,1542,1594,1593,1593,1594,1645,1593,1645,1644,1644,1645,1696,1644,1696,1695,1695,1696,1747,1695,1747,1746,1746,1747,1798,1746,1798,1797,1797,1798,1849,1797,1849,1848,1848,1849,1900,1848,1900,1899,1899,1900,1951,1899,1951,1950,1950,1951,2002,1950,2002,2001,2001,2002,2053,2001,2053,2052,2052,2053,2104,2052,2104,2103,2103,2104,2155,2103,2155,2154,2154,2155,2206,2154,2206,2205,2205,2206,2257,2205,2257,2256,2256,2257,2308,2256,2308,2307,2307,2308,2359,2307,2359,2358,2358,2359,2410,2358,2410,2409,2409,2410,2461,2409,2461,2460,2460,2461,2512,2460,2512,2511,2511,2512,2563,2511,2563,2562,13,14,65,13,65,64,64,65,116,64,116,115,115,116,167,115,167,166,166,167,218,166,218,217,217,218,269,217,269,268,268,269,320,268,320,319,319,320,371,319,371,370,370,371,422,370,422,421,421,422,473,421,473,472,472,473,524,472,524,523,523,524,575,523,575,574,574,575,626,574,626,625,625,626,677,625,677,676,676,677,728,676,728,727,727,728,779,727,779,778,778,779,830,778,830,829,829,830,881,829,881,880,880,881,932,880,932,931,931,932,983,931,983,982,982,983,1034,982,1034,1033,1033,1034,1085,1033,1085,1084,1084,1085,1136,1084,1136,1135,1135,1136,1187,1135,1187,1186,1186,1187,1238,1186,1238,1237,1237,1238,1289,1237,1289,1288,1288,1289,1340,1288,1340,1339,1339,1340,1391,1339,1391,1390,1390,1391,1442,1390,1442,1441,1441,1442,1493,1441,1493,1492,1492,1493,1544,1492,1544,1543,1543,1544,1595,1543,1595,1594,1594,1595,1646,1594,1646,1645,1645,1646,1697,1645,1697,1696,1696,1697,1748,1696,1748,1747,1747,1748,1799,1747,1799,1798,1798,1799,1850,1798,1850,1849,1849,1850,1901,1849,1901,1900,1900,1901,1952,1900,1952,1951,1951,1952,2003,1951,2003,2002,2002,2003,2054,2002,2054,2053,2053,2054,2105,2053,2105,2104,2104,2105,2156,2104,2156,2155,2155,2156,2207,2155,2207,2206,2206,2207,2258,2206,2258,2257,2257,2258,2309,2257,2309,2308,2308,2309,2360,2308,2360,2359,2359,2360,2411,2359,2411,2410,2410,2411,2462,2410,2462,2461,2461,2462,2513,2461,2513,2512,2512,2513,2564,2512,2564,2563,14,15,66,14,66,65,65,66,117,65,117,116,116,117,168,116,168,167,167,168,219,167,219,218,218,219,270,218,270,269,269,270,321,269,321,320,320,321,372,320,372,371,371,372,423,371,423,422,422,423,474,422,474,473,473,474,525,473,525,524,524,525,576,524,576,575,575,576,627,575,627,626,626,627,678,626,678,677,677,678,729,677,729,728,728,729,780,728,780,779,779,780,831,779,831,830,830,831,882,830,882,881,881,882,933,881,933,932,932,933,984,932,984,983,983,984,1035,983,1035,1034,1034,1035,1086,1034,1086,1085,1085,1086,1137,1085,1137,1136,1136,1137,1188,1136,1188,1187,1187,1188,1239,1187,1239,1238,1238,1239,1290,1238,1290,1289,1289,1290,1341,1289,1341,1340,1340,1341,1392,1340,1392,1391,1391,1392,1443,1391,1443,1442,1442,1443,1494,1442,1494,1493,1493,1494,1545,1493,1545,1544,1544,1545,1596,1544,1596,1595,1595,1596,1647,1595,1647,1646,1646,1647,1698,1646,1698,1697,1697,1698,1749,1697,1749,1748,1748,1749,1800,1748,1800,1799,1799,1800,1851,1799,1851,1850,1850,1851,1902,1850,1902,1901,1901,1902,1953,1901,1953,1952,1952,1953,2004,1952,2004,2003,2003,2004,2055,2003,2055,2054,2054,2055,2106,2054,2106,2105,2105,2106,2157,2105,2157,2156,2156,2157,2208,2156,2208,2207,2207,2208,2259,2207,2259,2258,2258,2259,2310,2258,2310,2309,2309,2310,2361,2309,2361,2360,2360,2361,2412,2360,2412,2411,2411,2412,2463,2411,2463,2462,2462,2463,2514,2462,2514,2513,2513,2514,2565,2513,2565,2564,15,16,67,15,67,66,66,67,118,66,118,117,117,118,169,117,169,168,168,169,220,168,220,219,219,220,271,219,271,270,270,271,322,270,322,321,321,322,373,321,373,372,372,373,424,372,424,423,423,424,475,423,475,474,474,475,526,474,526,525,525,526,577,525,577,576,576,577,628,576,628,627,627,628,679,627,679,678,678,679,730,678,730,729,729,730,781,729,781,780,780,781,832,780,832,831,831,832,883,831,883,882,882,883,934,882,934,933,933,934,985,933,985,984,984,985,1036,984,1036,1035,1035,1036,1087,1035,1087,1086,1086,1087,1138,1086,1138,1137,1137,1138,1189,1137,1189,1188,1188,1189,1240,1188,1240,1239,1239,1240,1291,1239,1291,1290,1290,1291,1342,1290,1342,1341,1341,1342,1393,1341,1393,1392,1392,1393,1444,1392,1444,1443,1443,1444,1495,1443,1495,1494,1494,1495,1546,1494,1546,1545,1545,1546,1597,1545,1597,1596,1596,1597,1648,1596,1648,1647,1647,1648,1699,1647,1699,1698,1698,1699,1750,1698,1750,1749,1749,1750,1801,1749,1801,1800,1800,1801,1852,1800,1852,1851,1851,1852,1903,1851,1903,1902,1902,1903,1954,1902,1954,1953,1953,1954,2005,1953,2005,2004,2004,2005,2056,2004,2056,2055,2055,2056,2107,2055,2107,2106,2106,2107,2158,2106,2158,2157,2157,2158,2209,2157,2209,2208,2208,2209,2260,2208,2260,2259,2259,2260,2311,2259,2311,2310,2310,2311,2362,2310,2362,2361,2361,2362,2413,2361,2413,2412,2412,2413,2464,2412,2464,2463,2463,2464,2515,2463,2515,2514,2514,2515,2566,2514,2566,2565,16,17,68,16,68,67,67,68,119,67,119,118,118,119,170,118,170,169,169,170,221,169,221,220,220,221,272,220,272,271,271,272,323,271,323,322,322,323,374,322,374,373,373,374,425,373,425,424,424,425,476,424,476,475,475,476,527,475,527,526,526,527,578,526,578,577,577,578,629,577,629,628,628,629,680,628,680,679,679,680,731,679,731,730,730,731,782,730,782,781,781,782,833,781,833,832,832,833,884,832,884,883,883,884,935,883,935,934,934,935,986,934,986,985,985,986,1037,985,1037,1036,1036,1037,1088,1036,1088,1087,1087,1088,1139,1087,1139,1138,1138,1139,1190,1138,1190,1189,1189,1190,1241,1189,1241,1240,1240,1241,1292,1240,1292,1291,1291,1292,1343,1291,1343,1342,1342,1343,1394,1342,1394,1393,1393,1394,1445,1393,1445,1444,1444,1445,1496,1444,1496,1495,1495,1496,1547,1495,1547,1546,1546,1547,1598,1546,1598,1597,1597,1598,1649,1597,1649,1648,1648,1649,1700,1648,1700,1699,1699,1700,1751,1699,1751,1750,1750,1751,1802,1750,1802,1801,1801,1802,1853,1801,1853,1852,1852,1853,1904,1852,1904,1903,1903,1904,1955,1903,1955,1954,1954,1955,2006,1954,2006,2005,2005,2006,2057,2005,2057,2056,2056,2057,2108,2056,2108,2107,2107,2108,2159,2107,2159,2158,2158,2159,2210,2158,2210,2209,2209,2210,2261,2209,2261,2260,2260,2261,2312,2260,2312,2311,2311,2312,2363,2311,2363,2362,2362,2363,2414,2362,2414,2413,2413,2414,2465,2413,2465,2464,2464,2465,2516,2464,2516,2515,2515,2516,2567,2515,2567,2566,17,18,69,17,69,68,68,69,120,68,120,119,119,120,171,119,171,170,170,171,222,170,222,221,221,222,273,221,273,272,272,273,324,272,324,323,323,324,375,323,375,374,374,375,426,374,426,425,425,426,477,425,477,476,476,477,528,476,528,527,527,528,579,527,579,578,578,579,630,578,630,629,629,630,681,629,681,680,680,681,732,680,732,731,731,732,783,731,783,782,782,783,834,782,834,833,833,834,885,833,885,884,884,885,936,884,936,935,935,936,987,935,987,986,986,987,1038,986,1038,1037,1037,1038,1089,1037,1089,1088,1088,1089,1140,1088,1140,1139,1139,1140,1191,1139,1191,1190,1190,1191,1242,1190,1242,1241,1241,1242,1293,1241,1293,1292,1292,1293,1344,1292,1344,1343,1343,1344,1395,1343,1395,1394,1394,1395,1446,1394,1446,1445,1445,1446,1497,1445,1497,1496,1496,1497,1548,1496,1548,1547,1547,1548,1599,1547,1599,1598,1598,1599,1650,1598,1650,1649,1649,1650,1701,1649,1701,1700,1700,1701,1752,1700,1752,1751,1751,1752,1803,1751,1803,1802,1802,1803,1854,1802,1854,1853,1853,1854,1905,1853,1905,1904,1904,1905,1956,1904,1956,1955,1955,1956,2007,1955,2007,2006,2006,2007,2058,2006,2058,2057,2057,2058,2109,2057,2109,2108,2108,2109,2160,2108,2160,2159,2159,2160,2211,2159,2211,2210,2210,2211,2262,2210,2262,2261,2261,2262,2313,2261,2313,2312,2312,2313,2364,2312,2364,2363,2363,2364,2415,2363,2415,2414,2414,2415,2466,2414,2466,2465,2465,2466,2517,2465,2517,2516,2516,2517,2568,2516,2568,2567,18,19,70,18,70,69,69,70,121,69,121,120,120,121,172,120,172,171,171,172,223,171,223,222,222,223,274,222,274,273,273,274,325,273,325,324,324,325,376,324,376,375,375,376,427,375,427,426,426,427,478,426,478,477,477,478,529,477,529,528,528,529,580,528,580,579,579,580,631,579,631,630,630,631,682,630,682,681,681,682,733,681,733,732,732,733,784,732,784,783,783,784,835,783,835,834,834,835,886,834,886,885,885,886,937,885,937,936,936,937,988,936,988,987,987,988,1039,987,1039,1038,1038,1039,1090,1038,1090,1089,1089,1090,1141,1089,1141,1140,1140,1141,1192,1140,1192,1191,1191,1192,1243,1191,1243,1242,1242,1243,1294,1242,1294,1293,1293,1294,1345,1293,1345,1344,1344,1345,1396,1344,1396,1395,1395,1396,1447,1395,1447,1446,1446,1447,1498,1446,1498,1497,1497,1498,1549,1497,1549,1548,1548,1549,1600,1548,1600,1599,1599,1600,1651,1599,1651,1650,1650,1651,1702,1650,1702,1701,1701,1702,1753,1701,1753,1752,1752,1753,1804,1752,1804,1803,1803,1804,1855,1803,1855,1854,1854,1855,1906,1854,1906,1905,1905,1906,1957,1905,1957,1956,1956,1957,2008,1956,2008,2007,2007,2008,2059,2007,2059,2058,2058,2059,2110,2058,2110,2109,2109,2110,2161,2109,2161,2160,2160,2161,2212,2160,2212,2211,2211,2212,2263,2211,2263,2262,2262,2263,2314,2262,2314,2313,2313,2314,2365,2313,2365,2364,2364,2365,2416,2364,2416,2415,2415,2416,2467,2415,2467,2466,2466,2467,2518,2466,2518,2517,2517,2518,2569,2517,2569,2568,19,20,71,19,71,70,70,71,122,70,122,121,121,122,173,121,173,172,172,173,224,172,224,223,223,224,275,223,275,274,274,275,326,274,326,325,325,326,377,325,377,376,376,377,428,376,428,427,427,428,479,427,479,478,478,479,530,478,530,529,529,530,581,529,581,580,580,581,632,580,632,631,631,632,683,631,683,682,682,683,734,682,734,733,733,734,785,733,785,784,784,785,836,784,836,835,835,836,887,835,887,886,886,887,938,886,938,937,937,938,989,937,989,988,988,989,1040,988,1040,1039,1039,1040,1091,1039,1091,1090,1090,1091,1142,1090,1142,1141,1141,1142,1193,1141,1193,1192,1192,1193,1244,1192,1244,1243,1243,1244,1295,1243,1295,1294,1294,1295,1346,1294,1346,1345,1345,1346,1397,1345,1397,1396,1396,1397,1448,1396,1448,1447,1447,1448,1499,1447,1499,1498,1498,1499,1550,1498,1550,1549,1549,1550,1601,1549,1601,1600,1600,1601,1652,1600,1652,1651,1651,1652,1703,1651,1703,1702,1702,1703,1754,1702,1754,1753,1753,1754,1805,1753,1805,1804,1804,1805,1856,1804,1856,1855,1855,1856,1907,1855,1907,1906,1906,1907,1958,1906,1958,1957,1957,1958,2009,1957,2009,2008,2008,2009,2060,2008,2060,2059,2059,2060,2111,2059,2111,2110,2110,2111,2162,2110,2162,2161,2161,2162,2213,2161,2213,2212,2212,2213,2264,2212,2264,2263,2263,2264,2315,2263,2315,2314,2314,2315,2366,2314,2366,2365,2365,2366,2417,2365,2417,2416,2416,2417,2468,2416,2468,2467,2467,2468,2519,2467,2519,2518,2518,2519,2570,2518,2570,2569,20,21,72,20,72,71,71,72,123,71,123,122,122,123,174,122,174,173,173,174,225,173,225,224,224,225,276,224,276,275,275,276,327,275,327,326,326,327,378,326,378,377,377,378,429,377,429,428,428,429,480,428,480,479,479,480,531,479,531,530,530,531,582,530,582,581,581,582,633,581,633,632,632,633,684,632,684,683,683,684,735,683,735,734,734,735,786,734,786,785,785,786,837,785,837,836,836,837,888,836,888,887,887,888,939,887,939,938,938,939,990,938,990,989,989,990,1041,989,1041,1040,1040,1041,1092,1040,1092,1091,1091,1092,1143,1091,1143,1142,1142,1143,1194,1142,1194,1193,1193,1194,1245,1193,1245,1244,1244,1245,1296,1244,1296,1295,1295,1296,1347,1295,1347,1346,1346,1347,1398,1346,1398,1397,1397,1398,1449,1397,1449,1448,1448,1449,1500,1448,1500,1499,1499,1500,1551,1499,1551,1550,1550,1551,1602,1550,1602,1601,1601,1602,1653,1601,1653,1652,1652,1653,1704,1652,1704,1703,1703,1704,1755,1703,1755,1754,1754,1755,1806,1754,1806,1805,1805,1806,1857,1805,1857,1856,1856,1857,1908,1856,1908,1907,1907,1908,1959,1907,1959,1958,1958,1959,2010,1958,2010,2009,2009,2010,2061,2009,2061,2060,2060,2061,2112,2060,2112,2111,2111,2112,2163,2111,2163,2162,2162,2163,2214,2162,2214,2213,2213,2214,2265,2213,2265,2264,2264,2265,2316,2264,2316,2315,2315,2316,2367,2315,2367,2366,2366,2367,2418,2366,2418,2417,2417,2418,2469,2417,2469,2468,2468,2469,2520,2468,2520,2519,2519,2520,2571,2519,2571,2570,21,22,73,21,73,72,72,73,124,72,124,123,123,124,175,123,175,174,174,175,226,174,226,225,225,226,277,225,277,276,276,277,328,276,328,327,327,328,379,327,379,378,378,379,430,378,430,429,429,430,481,429,481,480,480,481,532,480,532,531,531,532,583,531,583,582,582,583,634,582,634,633,633,634,685,633,685,684,684,685,736,684,736,735,735,736,787,735,787,786,786,787,838,786,838,837,837,838,889,837,889,888,888,889,940,888,940,939,939,940,991,939,991,990,990,991,1042,990,1042,1041,1041,1042,1093,1041,1093,1092,1092,1093,1144,1092,1144,1143,1143,1144,1195,1143,1195,1194,1194,1195,1246,1194,1246,1245,1245,1246,1297,1245,1297,1296,1296,1297,1348,1296,1348,1347,1347,1348,1399,1347,1399,1398,1398,1399,1450,1398,1450,1449,1449,1450,1501,1449,1501,1500,1500,1501,1552,1500,1552,1551,1551,1552,1603,1551,1603,1602,1602,1603,1654,1602,1654,1653,1653,1654,1705,1653,1705,1704,1704,1705,1756,1704,1756,1755,1755,1756,1807,1755,1807,1806,1806,1807,1858,1806,1858,1857,1857,1858,1909,1857,1909,1908,1908,1909,1960,1908,1960,1959,1959,1960,2011,1959,2011,2010,2010,2011,2062,2010,2062,2061,2061,2062,2113,2061,2113,2112,2112,2113,2164,2112,2164,2163,2163,2164,2215,2163,2215,2214,2214,2215,2266,2214,2266,2265,2265,2266,2317,2265,2317,2316,2316,2317,2368,2316,2368,2367,2367,2368,2419,2367,2419,2418,2418,2419,2470,2418,2470,2469,2469,2470,2521,2469,2521,2520,2520,2521,2572,2520,2572,2571,22,23,74,22,74,73,73,74,125,73,125,124,124,125,176,124,176,175,175,176,227,175,227,226,226,227,278,226,278,277,277,278,329,277,329,328,328,329,380,328,380,379,379,380,431,379,431,430,430,431,482,430,482,481,481,482,533,481,533,532,532,533,584,532,584,583,583,584,635,583,635,634,634,635,686,634,686,685,685,686,737,685,737,736,736,737,788,736,788,787,787,788,839,787,839,838,838,839,890,838,890,889,889,890,941,889,941,940,940,941,992,940,992,991,991,992,1043,991,1043,1042,1042,1043,1094,1042,1094,1093,1093,1094,1145,1093,1145,1144,1144,1145,1196,1144,1196,1195,1195,1196,1247,1195,1247,1246,1246,1247,1298,1246,1298,1297,1297,1298,1349,1297,1349,1348,1348,1349,1400,1348,1400,1399,1399,1400,1451,1399,1451,1450,1450,1451,1502,1450,1502,1501,1501,1502,1553,1501,1553,1552,1552,1553,1604,1552,1604,1603,1603,1604,1655,1603,1655,1654,1654,1655,1706,1654,1706,1705,1705,1706,1757,1705,1757,1756,1756,1757,1808,1756,1808,1807,1807,1808,1859,1807,1859,1858,1858,1859,1910,1858,1910,1909,1909,1910,1961,1909,1961,1960,1960,1961,2012,1960,2012,2011,2011,2012,2063,2011,2063,2062,2062,2063,2114,2062,2114,2113,2113,2114,2165,2113,2165,2164,2164,2165,2216,2164,2216,2215,2215,2216,2267,2215,2267,2266,2266,2267,2318,2266,2318,2317,2317,2318,2369,2317,2369,2368,2368,2369,2420,2368,2420,2419,2419,2420,2471,2419,2471,2470,2470,2471,2522,2470,2522,2521,2521,2522,2573,2521,2573,2572,23,24,75,23,75,74,74,75,126,74,126,125,125,126,177,125,177,176,176,177,228,176,228,227,227,228,279,227,279,278,278,279,330,278,330,329,329,330,381,329,381,380,380,381,432,380,432,431,431,432,483,431,483,482,482,483,534,482,534,533,533,534,585,533,585,584,584,585,636,584,636,635,635,636,687,635,687,686,686,687,738,686,738,737,737,738,789,737,789,788,788,789,840,788,840,839,839,840,891,839,891,890,890,891,942,890,942,941,941,942,993,941,993,992,992,993,1044,992,1044,1043,1043,1044,1095,1043,1095,1094,1094,1095,1146,1094,1146,1145,1145,1146,1197,1145,1197,1196,1196,1197,1248,1196,1248,1247,1247,1248,1299,1247,1299,1298,1298,1299,1350,1298,1350,1349,1349,1350,1401,1349,1401,1400,1400,1401,1452,1400,1452,1451,1451,1452,1503,1451,1503,1502,1502,1503,1554,1502,1554,1553,1553,1554,1605,1553,1605,1604,1604,1605,1656,1604,1656,1655,1655,1656,1707,1655,1707,1706,1706,1707,1758,1706,1758,1757,1757,1758,1809,1757,1809,1808,1808,1809,1860,1808,1860,1859,1859,1860,1911,1859,1911,1910,1910,1911,1962,1910,1962,1961,1961,1962,2013,1961,2013,2012,2012,2013,2064,2012,2064,2063,2063,2064,2115,2063,2115,2114,2114,2115,2166,2114,2166,2165,2165,2166,2217,2165,2217,2216,2216,2217,2268,2216,2268,2267,2267,2268,2319,2267,2319,2318,2318,2319,2370,2318,2370,2369,2369,2370,2421,2369,2421,2420,2420,2421,2472,2420,2472,2471,2471,2472,2523,2471,2523,2522,2522,2523,2574,2522,2574,2573,24,25,76,24,76,75,75,76,127,75,127,126,126,127,178,126,178,177,177,178,229,177,229,228,228,229,280,228,280,279,279,280,331,279,331,330,330,331,382,330,382,381,381,382,433,381,433,432,432,433,484,432,484,483,483,484,535,483,535,534,534,535,586,534,586,585,585,586,637,585,637,636,636,637,688,636,688,687,687,688,739,687,739,738,738,739,790,738,790,789,789,790,841,789,841,840,840,841,892,840,892,891,891,892,943,891,943,942,942,943,994,942,994,993,993,994,1045,993,1045,1044,1044,1045,1096,1044,1096,1095,1095,1096,1147,1095,1147,1146,1146,1147,1198,1146,1198,1197,1197,1198,1249,1197,1249,1248,1248,1249,1300,1248,1300,1299,1299,1300,1351,1299,1351,1350,1350,1351,1402,1350,1402,1401,1401,1402,1453,1401,1453,1452,1452,1453,1504,1452,1504,1503,1503,1504,1555,1503,1555,1554,1554,1555,1606,1554,1606,1605,1605,1606,1657,1605,1657,1656,1656,1657,1708,1656,1708,1707,1707,1708,1759,1707,1759,1758,1758,1759,1810,1758,1810,1809,1809,1810,1861,1809,1861,1860,1860,1861,1912,1860,1912,1911,1911,1912,1963,1911,1963,1962,1962,1963,2014,1962,2014,2013,2013,2014,2065,2013,2065,2064,2064,2065,2116,2064,2116,2115,2115,2116,2167,2115,2167,2166,2166,2167,2218,2166,2218,2217,2217,2218,2269,2217,2269,2268,2268,2269,2320,2268,2320,2319,2319,2320,2371,2319,2371,2370,2370,2371,2422,2370,2422,2421,2421,2422,2473,2421,2473,2472,2472,2473,2524,2472,2524,2523,2523,2524,2575,2523,2575,2574,25,26,77,25,77,76,76,77,128,76,128,127,127,128,179,127,179,178,178,179,230,178,230,229,229,230,281,229,281,280,280,281,332,280,332,331,331,332,383,331,383,382,382,383,434,382,434,433,433,434,485,433,485,484,484,485,536,484,536,535,535,536,587,535,587,586,586,587,638,586,638,637,637,638,689,637,689,688,688,689,740,688,740,739,739,740,791,739,791,790,790,791,842,790,842,841,841,842,893,841,893,892,892,893,944,892,944,943,943,944,995,943,995,994,994,995,1046,994,1046,1045,1045,1046,1097,1045,1097,1096,1096,1097,1148,1096,1148,1147,1147,1148,1199,1147,1199,1198,1198,1199,1250,1198,1250,1249,1249,1250,1301,1249,1301,1300,1300,1301,1352,1300,1352,1351,1351,1352,1403,1351,1403,1402,1402,1403,1454,1402,1454,1453,1453,1454,1505,1453,1505,1504,1504,1505,1556,1504,1556,1555,1555,1556,1607,1555,1607,1606,1606,1607,1658,1606,1658,1657,1657,1658,1709,1657,1709,1708,1708,1709,1760,1708,1760,1759,1759,1760,1811,1759,1811,1810,1810,1811,1862,1810,1862,1861,1861,1862,1913,1861,1913,1912,1912,1913,1964,1912,1964,1963,1963,1964,2015,1963,2015,2014,2014,2015,2066,2014,2066,2065,2065,2066,2117,2065,2117,2116,2116,2117,2168,2116,2168,2167,2167,2168,2219,2167,2219,2218,2218,2219,2270,2218,2270,2269,2269,2270,2321,2269,2321,2320,2320,2321,2372,2320,2372,2371,2371,2372,2423,2371,2423,2422,2422,2423,2474,2422,2474,2473,2473,2474,2525,2473,2525,2524,2524,2525,2576,2524,2576,2575,26,27,78,26,78,77,77,78,129,77,129,128,128,129,180,128,180,179,179,180,231,179,231,230,230,231,282,230,282,281,281,282,333,281,333,332,332,333,384,332,384,383,383,384,435,383,435,434,434,435,486,434,486,485,485,486,537,485,537,536,536,537,588,536,588,587,587,588,639,587,639,638,638,639,690,638,690,689,689,690,741,689,741,740,740,741,792,740,792,791,791,792,843,791,843,842,842,843,894,842,894,893,893,894,945,893,945,944,944,945,996,944,996,995,995,996,1047,995,1047,1046,1046,1047,1098,1046,1098,1097,1097,1098,1149,1097,1149,1148,1148,1149,1200,1148,1200,1199,1199,1200,1251,1199,1251,1250,1250,1251,1302,1250,1302,1301,1301,1302,1353,1301,1353,1352,1352,1353,1404,1352,1404,1403,1403,1404,1455,1403,1455,1454,1454,1455,1506,1454,1506,1505,1505,1506,1557,1505,1557,1556,1556,1557,1608,1556,1608,1607,1607,1608,1659,1607,1659,1658,1658,1659,1710,1658,1710,1709,1709,1710,1761,1709,1761,1760,1760,1761,1812,1760,1812,1811,1811,1812,1863,1811,1863,1862,1862,1863,1914,1862,1914,1913,1913,1914,1965,1913,1965,1964,1964,1965,2016,1964,2016,2015,2015,2016,2067,2015,2067,2066,2066,2067,2118,2066,2118,2117,2117,2118,2169,2117,2169,2168,2168,2169,2220,2168,2220,2219,2219,2220,2271,2219,2271,2270,2270,2271,2322,2270,2322,2321,2321,2322,2373,2321,2373,2372,2372,2373,2424,2372,2424,2423,2423,2424,2475,2423,2475,2474,2474,2475,2526,2474,2526,2525,2525,2526,2577,2525,2577,2576,27,28,79,27,79,78,78,79,130,78,130,129,129,130,181,129,181,180,180,181,232,180,232,231,231,232,283,231,283,282,282,283,334,282,334,333,333,334,385,333,385,384,384,385,436,384,436,435,435,436,487,435,487,486,486,487,538,486,538,537,537,538,589,537,589,588,588,589,640,588,640,639,639,640,691,639,691,690,690,691,742,690,742,741,741,742,793,741,793,792,792,793,844,792,844,843,843,844,895,843,895,894,894,895,946,894,946,945,945,946,997,945,997,996,996,997,1048,996,1048,1047,1047,1048,1099,1047,1099,1098,1098,1099,1150,1098,1150,1149,1149,1150,1201,1149,1201,1200,1200,1201,1252,1200,1252,1251,1251,1252,1303,1251,1303,1302,1302,1303,1354,1302,1354,1353,1353,1354,1405,1353,1405,1404,1404,1405,1456,1404,1456,1455,1455,1456,1507,1455,1507,1506,1506,1507,1558,1506,1558,1557,1557,1558,1609,1557,1609,1608,1608,1609,1660,1608,1660,1659,1659,1660,1711,1659,1711,1710,1710,1711,1762,1710,1762,1761,1761,1762,1813,1761,1813,1812,1812,1813,1864,1812,1864,1863,1863,1864,1915,1863,1915,1914,1914,1915,1966,1914,1966,1965,1965,1966,2017,1965,2017,2016,2016,2017,2068,2016,2068,2067,2067,2068,2119,2067,2119,2118,2118,2119,2170,2118,2170,2169,2169,2170,2221,2169,2221,2220,2220,2221,2272,2220,2272,2271,2271,2272,2323,2271,2323,2322,2322,2323,2374,2322,2374,2373,2373,2374,2425,2373,2425,2424,2424,2425,2476,2424,2476,2475,2475,2476,2527,2475,2527,2526,2526,2527,2578,2526,2578,2577,28,29,80,28,80,79,79,80,131,79,131,130,130,131,182,130,182,181,181,182,233,181,233,232,232,233,284,232,284,283,283,284,335,283,335,334,334,335,386,334,386,385,385,386,437,385,437,436,436,437,488,436,488,487,487,488,539,487,539,538,538,539,590,538,590,589,589,590,641,589,641,640,640,641,692,640,692,691,691,692,743,691,743,742,742,743,794,742,794,793,793,794,845,793,845,844,844,845,896,844,896,895,895,896,947,895,947,946,946,947,998,946,998,997,997,998,1049,997,1049,1048,1048,1049,1100,1048,1100,1099,1099,1100,1151,1099,1151,1150,1150,1151,1202,1150,1202,1201,1201,1202,1253,1201,1253,1252,1252,1253,1304,1252,1304,1303,1303,1304,1355,1303,1355,1354,1354,1355,1406,1354,1406,1405,1405,1406,1457,1405,1457,1456,1456,1457,1508,1456,1508,1507,1507,1508,1559,1507,1559,1558,1558,1559,1610,1558,1610,1609,1609,1610,1661,1609,1661,1660,1660,1661,1712,1660,1712,1711,1711,1712,1763,1711,1763,1762,1762,1763,1814,1762,1814,1813,1813,1814,1865,1813,1865,1864,1864,1865,1916,1864,1916,1915,1915,1916,1967,1915,1967,1966,1966,1967,2018,1966,2018,2017,2017,2018,2069,2017,2069,2068,2068,2069,2120,2068,2120,2119,2119,2120,2171,2119,2171,2170,2170,2171,2222,2170,2222,2221,2221,2222,2273,2221,2273,2272,2272,2273,2324,2272,2324,2323,2323,2324,2375,2323,2375,2374,2374,2375,2426,2374,2426,2425,2425,2426,2477,2425,2477,2476,2476,2477,2528,2476,2528,2527,2527,2528,2579,2527,2579,2578,29,30,81,29,81,80,80,81,132,80,132,131,131,132,183,131,183,182,182,183,234,182,234,233,233,234,285,233,285,284,284,285,336,284,336,335,335,336,387,335,387,386,386,387,438,386,438,437,437,438,489,437,489,488,488,489,540,488,540,539,539,540,591,539,591,590,590,591,642,590,642,641,641,642,693,641,693,692,692,693,744,692,744,743,743,744,795,743,795,794,794,795,846,794,846,845,845,846,897,845,897,896,896,897,948,896,948,947,947,948,999,947,999,998,998,999,1050,998,1050,1049,1049,1050,1101,1049,1101,1100,1100,1101,1152,1100,1152,1151,1151,1152,1203,1151,1203,1202,1202,1203,1254,1202,1254,1253,1253,1254,1305,1253,1305,1304,1304,1305,1356,1304,1356,1355,1355,1356,1407,1355,1407,1406,1406,1407,1458,1406,1458,1457,1457,1458,1509,1457,1509,1508,1508,1509,1560,1508,1560,1559,1559,1560,1611,1559,1611,1610,1610,1611,1662,1610,1662,1661,1661,1662,1713,1661,1713,1712,1712,1713,1764,1712,1764,1763,1763,1764,1815,1763,1815,1814,1814,1815,1866,1814,1866,1865,1865,1866,1917,1865,1917,1916,1916,1917,1968,1916,1968,1967,1967,1968,2019,1967,2019,2018,2018,2019,2070,2018,2070,2069,2069,2070,2121,2069,2121,2120,2120,2121,2172,2120,2172,2171,2171,2172,2223,2171,2223,2222,2222,2223,2274,2222,2274,2273,2273,2274,2325,2273,2325,2324,2324,2325,2376,2324,2376,2375,2375,2376,2427,2375,2427,2426,2426,2427,2478,2426,2478,2477,2477,2478,2529,2477,2529,2528,2528,2529,2580,2528,2580,2579,30,31,82,30,82,81,81,82,133,81,133,132,132,133,184,132,184,183,183,184,235,183,235,234,234,235,286,234,286,285,285,286,337,285,337,336,336,337,388,336,388,387,387,388,439,387,439,438,438,439,490,438,490,489,489,490,541,489,541,540,540,541,592,540,592,591,591,592,643,591,643,642,642,643,694,642,694,693,693,694,745,693,745,744,744,745,796,744,796,795,795,796,847,795,847,846,846,847,898,846,898,897,897,898,949,897,949,948,948,949,1e3,948,1e3,999,999,1e3,1051,999,1051,1050,1050,1051,1102,1050,1102,1101,1101,1102,1153,1101,1153,1152,1152,1153,1204,1152,1204,1203,1203,1204,1255,1203,1255,1254,1254,1255,1306,1254,1306,1305,1305,1306,1357,1305,1357,1356,1356,1357,1408,1356,1408,1407,1407,1408,1459,1407,1459,1458,1458,1459,1510,1458,1510,1509,1509,1510,1561,1509,1561,1560,1560,1561,1612,1560,1612,1611,1611,1612,1663,1611,1663,1662,1662,1663,1714,1662,1714,1713,1713,1714,1765,1713,1765,1764,1764,1765,1816,1764,1816,1815,1815,1816,1867,1815,1867,1866,1866,1867,1918,1866,1918,1917,1917,1918,1969,1917,1969,1968,1968,1969,2020,1968,2020,2019,2019,2020,2071,2019,2071,2070,2070,2071,2122,2070,2122,2121,2121,2122,2173,2121,2173,2172,2172,2173,2224,2172,2224,2223,2223,2224,2275,2223,2275,2274,2274,2275,2326,2274,2326,2325,2325,2326,2377,2325,2377,2376,2376,2377,2428,2376,2428,2427,2427,2428,2479,2427,2479,2478,2478,2479,2530,2478,2530,2529,2529,2530,2581,2529,2581,2580,31,32,83,31,83,82,82,83,134,82,134,133,133,134,185,133,185,184,184,185,236,184,236,235,235,236,287,235,287,286,286,287,338,286,338,337,337,338,389,337,389,388,388,389,440,388,440,439,439,440,491,439,491,490,490,491,542,490,542,541,541,542,593,541,593,592,592,593,644,592,644,643,643,644,695,643,695,694,694,695,746,694,746,745,745,746,797,745,797,796,796,797,848,796,848,847,847,848,899,847,899,898,898,899,950,898,950,949,949,950,1001,949,1001,1e3,1e3,1001,1052,1e3,1052,1051,1051,1052,1103,1051,1103,1102,1102,1103,1154,1102,1154,1153,1153,1154,1205,1153,1205,1204,1204,1205,1256,1204,1256,1255,1255,1256,1307,1255,1307,1306,1306,1307,1358,1306,1358,1357,1357,1358,1409,1357,1409,1408,1408,1409,1460,1408,1460,1459,1459,1460,1511,1459,1511,1510,1510,1511,1562,1510,1562,1561,1561,1562,1613,1561,1613,1612,1612,1613,1664,1612,1664,1663,1663,1664,1715,1663,1715,1714,1714,1715,1766,1714,1766,1765,1765,1766,1817,1765,1817,1816,1816,1817,1868,1816,1868,1867,1867,1868,1919,1867,1919,1918,1918,1919,1970,1918,1970,1969,1969,1970,2021,1969,2021,2020,2020,2021,2072,2020,2072,2071,2071,2072,2123,2071,2123,2122,2122,2123,2174,2122,2174,2173,2173,2174,2225,2173,2225,2224,2224,2225,2276,2224,2276,2275,2275,2276,2327,2275,2327,2326,2326,2327,2378,2326,2378,2377,2377,2378,2429,2377,2429,2428,2428,2429,2480,2428,2480,2479,2479,2480,2531,2479,2531,2530,2530,2531,2582,2530,2582,2581,32,33,84,32,84,83,83,84,135,83,135,134,134,135,186,134,186,185,185,186,237,185,237,236,236,237,288,236,288,287,287,288,339,287,339,338,338,339,390,338,390,389,389,390,441,389,441,440,440,441,492,440,492,491,491,492,543,491,543,542,542,543,594,542,594,593,593,594,645,593,645,644,644,645,696,644,696,695,695,696,747,695,747,746,746,747,798,746,798,797,797,798,849,797,849,848,848,849,900,848,900,899,899,900,951,899,951,950,950,951,1002,950,1002,1001,1001,1002,1053,1001,1053,1052,1052,1053,1104,1052,1104,1103,1103,1104,1155,1103,1155,1154,1154,1155,1206,1154,1206,1205,1205,1206,1257,1205,1257,1256,1256,1257,1308,1256,1308,1307,1307,1308,1359,1307,1359,1358,1358,1359,1410,1358,1410,1409,1409,1410,1461,1409,1461,1460,1460,1461,1512,1460,1512,1511,1511,1512,1563,1511,1563,1562,1562,1563,1614,1562,1614,1613,1613,1614,1665,1613,1665,1664,1664,1665,1716,1664,1716,1715,1715,1716,1767,1715,1767,1766,1766,1767,1818,1766,1818,1817,1817,1818,1869,1817,1869,1868,1868,1869,1920,1868,1920,1919,1919,1920,1971,1919,1971,1970,1970,1971,2022,1970,2022,2021,2021,2022,2073,2021,2073,2072,2072,2073,2124,2072,2124,2123,2123,2124,2175,2123,2175,2174,2174,2175,2226,2174,2226,2225,2225,2226,2277,2225,2277,2276,2276,2277,2328,2276,2328,2327,2327,2328,2379,2327,2379,2378,2378,2379,2430,2378,2430,2429,2429,2430,2481,2429,2481,2480,2480,2481,2532,2480,2532,2531,2531,2532,2583,2531,2583,2582,33,34,85,33,85,84,84,85,136,84,136,135,135,136,187,135,187,186,186,187,238,186,238,237,237,238,289,237,289,288,288,289,340,288,340,339,339,340,391,339,391,390,390,391,442,390,442,441,441,442,493,441,493,492,492,493,544,492,544,543,543,544,595,543,595,594,594,595,646,594,646,645,645,646,697,645,697,696,696,697,748,696,748,747,747,748,799,747,799,798,798,799,850,798,850,849,849,850,901,849,901,900,900,901,952,900,952,951,951,952,1003,951,1003,1002,1002,1003,1054,1002,1054,1053,1053,1054,1105,1053,1105,1104,1104,1105,1156,1104,1156,1155,1155,1156,1207,1155,1207,1206,1206,1207,1258,1206,1258,1257,1257,1258,1309,1257,1309,1308,1308,1309,1360,1308,1360,1359,1359,1360,1411,1359,1411,1410,1410,1411,1462,1410,1462,1461,1461,1462,1513,1461,1513,1512,1512,1513,1564,1512,1564,1563,1563,1564,1615,1563,1615,1614,1614,1615,1666,1614,1666,1665,1665,1666,1717,1665,1717,1716,1716,1717,1768,1716,1768,1767,1767,1768,1819,1767,1819,1818,1818,1819,1870,1818,1870,1869,1869,1870,1921,1869,1921,1920,1920,1921,1972,1920,1972,1971,1971,1972,2023,1971,2023,2022,2022,2023,2074,2022,2074,2073,2073,2074,2125,2073,2125,2124,2124,2125,2176,2124,2176,2175,2175,2176,2227,2175,2227,2226,2226,2227,2278,2226,2278,2277,2277,2278,2329,2277,2329,2328,2328,2329,2380,2328,2380,2379,2379,2380,2431,2379,2431,2430,2430,2431,2482,2430,2482,2481,2481,2482,2533,2481,2533,2532,2532,2533,2584,2532,2584,2583,34,35,86,34,86,85,85,86,137,85,137,136,136,137,188,136,188,187,187,188,239,187,239,238,238,239,290,238,290,289,289,290,341,289,341,340,340,341,392,340,392,391,391,392,443,391,443,442,442,443,494,442,494,493,493,494,545,493,545,544,544,545,596,544,596,595,595,596,647,595,647,646,646,647,698,646,698,697,697,698,749,697,749,748,748,749,800,748,800,799,799,800,851,799,851,850,850,851,902,850,902,901,901,902,953,901,953,952,952,953,1004,952,1004,1003,1003,1004,1055,1003,1055,1054,1054,1055,1106,1054,1106,1105,1105,1106,1157,1105,1157,1156,1156,1157,1208,1156,1208,1207,1207,1208,1259,1207,1259,1258,1258,1259,1310,1258,1310,1309,1309,1310,1361,1309,1361,1360,1360,1361,1412,1360,1412,1411,1411,1412,1463,1411,1463,1462,1462,1463,1514,1462,1514,1513,1513,1514,1565,1513,1565,1564,1564,1565,1616,1564,1616,1615,1615,1616,1667,1615,1667,1666,1666,1667,1718,1666,1718,1717,1717,1718,1769,1717,1769,1768,1768,1769,1820,1768,1820,1819,1819,1820,1871,1819,1871,1870,1870,1871,1922,1870,1922,1921,1921,1922,1973,1921,1973,1972,1972,1973,2024,1972,2024,2023,2023,2024,2075,2023,2075,2074,2074,2075,2126,2074,2126,2125,2125,2126,2177,2125,2177,2176,2176,2177,2228,2176,2228,2227,2227,2228,2279,2227,2279,2278,2278,2279,2330,2278,2330,2329,2329,2330,2381,2329,2381,2380,2380,2381,2432,2380,2432,2431,2431,2432,2483,2431,2483,2482,2482,2483,2534,2482,2534,2533,2533,2534,2585,2533,2585,2584,35,36,87,35,87,86,86,87,138,86,138,137,137,138,189,137,189,188,188,189,240,188,240,239,239,240,291,239,291,290,290,291,342,290,342,341,341,342,393,341,393,392,392,393,444,392,444,443,443,444,495,443,495,494,494,495,546,494,546,545,545,546,597,545,597,596,596,597,648,596,648,647,647,648,699,647,699,698,698,699,750,698,750,749,749,750,801,749,801,800,800,801,852,800,852,851,851,852,903,851,903,902,902,903,954,902,954,953,953,954,1005,953,1005,1004,1004,1005,1056,1004,1056,1055,1055,1056,1107,1055,1107,1106,1106,1107,1158,1106,1158,1157,1157,1158,1209,1157,1209,1208,1208,1209,1260,1208,1260,1259,1259,1260,1311,1259,1311,1310,1310,1311,1362,1310,1362,1361,1361,1362,1413,1361,1413,1412,1412,1413,1464,1412,1464,1463,1463,1464,1515,1463,1515,1514,1514,1515,1566,1514,1566,1565,1565,1566,1617,1565,1617,1616,1616,1617,1668,1616,1668,1667,1667,1668,1719,1667,1719,1718,1718,1719,1770,1718,1770,1769,1769,1770,1821,1769,1821,1820,1820,1821,1872,1820,1872,1871,1871,1872,1923,1871,1923,1922,1922,1923,1974,1922,1974,1973,1973,1974,2025,1973,2025,2024,2024,2025,2076,2024,2076,2075,2075,2076,2127,2075,2127,2126,2126,2127,2178,2126,2178,2177,2177,2178,2229,2177,2229,2228,2228,2229,2280,2228,2280,2279,2279,2280,2331,2279,2331,2330,2330,2331,2382,2330,2382,2381,2381,2382,2433,2381,2433,2432,2432,2433,2484,2432,2484,2483,2483,2484,2535,2483,2535,2534,2534,2535,2586,2534,2586,2585,36,37,88,36,88,87,87,88,139,87,139,138,138,139,190,138,190,189,189,190,241,189,241,240,240,241,292,240,292,291,291,292,343,291,343,342,342,343,394,342,394,393,393,394,445,393,445,444,444,445,496,444,496,495,495,496,547,495,547,546,546,547,598,546,598,597,597,598,649,597,649,648,648,649,700,648,700,699,699,700,751,699,751,750,750,751,802,750,802,801,801,802,853,801,853,852,852,853,904,852,904,903,903,904,955,903,955,954,954,955,1006,954,1006,1005,1005,1006,1057,1005,1057,1056,1056,1057,1108,1056,1108,1107,1107,1108,1159,1107,1159,1158,1158,1159,1210,1158,1210,1209,1209,1210,1261,1209,1261,1260,1260,1261,1312,1260,1312,1311,1311,1312,1363,1311,1363,1362,1362,1363,1414,1362,1414,1413,1413,1414,1465,1413,1465,1464,1464,1465,1516,1464,1516,1515,1515,1516,1567,1515,1567,1566,1566,1567,1618,1566,1618,1617,1617,1618,1669,1617,1669,1668,1668,1669,1720,1668,1720,1719,1719,1720,1771,1719,1771,1770,1770,1771,1822,1770,1822,1821,1821,1822,1873,1821,1873,1872,1872,1873,1924,1872,1924,1923,1923,1924,1975,1923,1975,1974,1974,1975,2026,1974,2026,2025,2025,2026,2077,2025,2077,2076,2076,2077,2128,2076,2128,2127,2127,2128,2179,2127,2179,2178,2178,2179,2230,2178,2230,2229,2229,2230,2281,2229,2281,2280,2280,2281,2332,2280,2332,2331,2331,2332,2383,2331,2383,2382,2382,2383,2434,2382,2434,2433,2433,2434,2485,2433,2485,2484,2484,2485,2536,2484,2536,2535,2535,2536,2587,2535,2587,2586,37,38,89,37,89,88,88,89,140,88,140,139,139,140,191,139,191,190,190,191,242,190,242,241,241,242,293,241,293,292,292,293,344,292,344,343,343,344,395,343,395,394,394,395,446,394,446,445,445,446,497,445,497,496,496,497,548,496,548,547,547,548,599,547,599,598,598,599,650,598,650,649,649,650,701,649,701,700,700,701,752,700,752,751,751,752,803,751,803,802,802,803,854,802,854,853,853,854,905,853,905,904,904,905,956,904,956,955,955,956,1007,955,1007,1006,1006,1007,1058,1006,1058,1057,1057,1058,1109,1057,1109,1108,1108,1109,1160,1108,1160,1159,1159,1160,1211,1159,1211,1210,1210,1211,1262,1210,1262,1261,1261,1262,1313,1261,1313,1312,1312,1313,1364,1312,1364,1363,1363,1364,1415,1363,1415,1414,1414,1415,1466,1414,1466,1465,1465,1466,1517,1465,1517,1516,1516,1517,1568,1516,1568,1567,1567,1568,1619,1567,1619,1618,1618,1619,1670,1618,1670,1669,1669,1670,1721,1669,1721,1720,1720,1721,1772,1720,1772,1771,1771,1772,1823,1771,1823,1822,1822,1823,1874,1822,1874,1873,1873,1874,1925,1873,1925,1924,1924,1925,1976,1924,1976,1975,1975,1976,2027,1975,2027,2026,2026,2027,2078,2026,2078,2077,2077,2078,2129,2077,2129,2128,2128,2129,2180,2128,2180,2179,2179,2180,2231,2179,2231,2230,2230,2231,2282,2230,2282,2281,2281,2282,2333,2281,2333,2332,2332,2333,2384,2332,2384,2383,2383,2384,2435,2383,2435,2434,2434,2435,2486,2434,2486,2485,2485,2486,2537,2485,2537,2536,2536,2537,2588,2536,2588,2587,38,39,90,38,90,89,89,90,141,89,141,140,140,141,192,140,192,191,191,192,243,191,243,242,242,243,294,242,294,293,293,294,345,293,345,344,344,345,396,344,396,395,395,396,447,395,447,446,446,447,498,446,498,497,497,498,549,497,549,548,548,549,600,548,600,599,599,600,651,599,651,650,650,651,702,650,702,701,701,702,753,701,753,752,752,753,804,752,804,803,803,804,855,803,855,854,854,855,906,854,906,905,905,906,957,905,957,956,956,957,1008,956,1008,1007,1007,1008,1059,1007,1059,1058,1058,1059,1110,1058,1110,1109,1109,1110,1161,1109,1161,1160,1160,1161,1212,1160,1212,1211,1211,1212,1263,1211,1263,1262,1262,1263,1314,1262,1314,1313,1313,1314,1365,1313,1365,1364,1364,1365,1416,1364,1416,1415,1415,1416,1467,1415,1467,1466,1466,1467,1518,1466,1518,1517,1517,1518,1569,1517,1569,1568,1568,1569,1620,1568,1620,1619,1619,1620,1671,1619,1671,1670,1670,1671,1722,1670,1722,1721,1721,1722,1773,1721,1773,1772,1772,1773,1824,1772,1824,1823,1823,1824,1875,1823,1875,1874,1874,1875,1926,1874,1926,1925,1925,1926,1977,1925,1977,1976,1976,1977,2028,1976,2028,2027,2027,2028,2079,2027,2079,2078,2078,2079,2130,2078,2130,2129,2129,2130,2181,2129,2181,2180,2180,2181,2232,2180,2232,2231,2231,2232,2283,2231,2283,2282,2282,2283,2334,2282,2334,2333,2333,2334,2385,2333,2385,2384,2384,2385,2436,2384,2436,2435,2435,2436,2487,2435,2487,2486,2486,2487,2538,2486,2538,2537,2537,2538,2589,2537,2589,2588,39,40,91,39,91,90,90,91,142,90,142,141,141,142,193,141,193,192,192,193,244,192,244,243,243,244,295,243,295,294,294,295,346,294,346,345,345,346,397,345,397,396,396,397,448,396,448,447,447,448,499,447,499,498,498,499,550,498,550,549,549,550,601,549,601,600,600,601,652,600,652,651,651,652,703,651,703,702,702,703,754,702,754,753,753,754,805,753,805,804,804,805,856,804,856,855,855,856,907,855,907,906,906,907,958,906,958,957,957,958,1009,957,1009,1008,1008,1009,1060,1008,1060,1059,1059,1060,1111,1059,1111,1110,1110,1111,1162,1110,1162,1161,1161,1162,1213,1161,1213,1212,1212,1213,1264,1212,1264,1263,1263,1264,1315,1263,1315,1314,1314,1315,1366,1314,1366,1365,1365,1366,1417,1365,1417,1416,1416,1417,1468,1416,1468,1467,1467,1468,1519,1467,1519,1518,1518,1519,1570,1518,1570,1569,1569,1570,1621,1569,1621,1620,1620,1621,1672,1620,1672,1671,1671,1672,1723,1671,1723,1722,1722,1723,1774,1722,1774,1773,1773,1774,1825,1773,1825,1824,1824,1825,1876,1824,1876,1875,1875,1876,1927,1875,1927,1926,1926,1927,1978,1926,1978,1977,1977,1978,2029,1977,2029,2028,2028,2029,2080,2028,2080,2079,2079,2080,2131,2079,2131,2130,2130,2131,2182,2130,2182,2181,2181,2182,2233,2181,2233,2232,2232,2233,2284,2232,2284,2283,2283,2284,2335,2283,2335,2334,2334,2335,2386,2334,2386,2385,2385,2386,2437,2385,2437,2436,2436,2437,2488,2436,2488,2487,2487,2488,2539,2487,2539,2538,2538,2539,2590,2538,2590,2589,40,41,92,40,92,91,91,92,143,91,143,142,142,143,194,142,194,193,193,194,245,193,245,244,244,245,296,244,296,295,295,296,347,295,347,346,346,347,398,346,398,397,397,398,449,397,449,448,448,449,500,448,500,499,499,500,551,499,551,550,550,551,602,550,602,601,601,602,653,601,653,652,652,653,704,652,704,703,703,704,755,703,755,754,754,755,806,754,806,805,805,806,857,805,857,856,856,857,908,856,908,907,907,908,959,907,959,958,958,959,1010,958,1010,1009,1009,1010,1061,1009,1061,1060,1060,1061,1112,1060,1112,1111,1111,1112,1163,1111,1163,1162,1162,1163,1214,1162,1214,1213,1213,1214,1265,1213,1265,1264,1264,1265,1316,1264,1316,1315,1315,1316,1367,1315,1367,1366,1366,1367,1418,1366,1418,1417,1417,1418,1469,1417,1469,1468,1468,1469,1520,1468,1520,1519,1519,1520,1571,1519,1571,1570,1570,1571,1622,1570,1622,1621,1621,1622,1673,1621,1673,1672,1672,1673,1724,1672,1724,1723,1723,1724,1775,1723,1775,1774,1774,1775,1826,1774,1826,1825,1825,1826,1877,1825,1877,1876,1876,1877,1928,1876,1928,1927,1927,1928,1979,1927,1979,1978,1978,1979,2030,1978,2030,2029,2029,2030,2081,2029,2081,2080,2080,2081,2132,2080,2132,2131,2131,2132,2183,2131,2183,2182,2182,2183,2234,2182,2234,2233,2233,2234,2285,2233,2285,2284,2284,2285,2336,2284,2336,2335,2335,2336,2387,2335,2387,2386,2386,2387,2438,2386,2438,2437,2437,2438,2489,2437,2489,2488,2488,2489,2540,2488,2540,2539,2539,2540,2591,2539,2591,2590,41,42,93,41,93,92,92,93,144,92,144,143,143,144,195,143,195,194,194,195,246,194,246,245,245,246,297,245,297,296,296,297,348,296,348,347,347,348,399,347,399,398,398,399,450,398,450,449,449,450,501,449,501,500,500,501,552,500,552,551,551,552,603,551,603,602,602,603,654,602,654,653,653,654,705,653,705,704,704,705,756,704,756,755,755,756,807,755,807,806,806,807,858,806,858,857,857,858,909,857,909,908,908,909,960,908,960,959,959,960,1011,959,1011,1010,1010,1011,1062,1010,1062,1061,1061,1062,1113,1061,1113,1112,1112,1113,1164,1112,1164,1163,1163,1164,1215,1163,1215,1214,1214,1215,1266,1214,1266,1265,1265,1266,1317,1265,1317,1316,1316,1317,1368,1316,1368,1367,1367,1368,1419,1367,1419,1418,1418,1419,1470,1418,1470,1469,1469,1470,1521,1469,1521,1520,1520,1521,1572,1520,1572,1571,1571,1572,1623,1571,1623,1622,1622,1623,1674,1622,1674,1673,1673,1674,1725,1673,1725,1724,1724,1725,1776,1724,1776,1775,1775,1776,1827,1775,1827,1826,1826,1827,1878,1826,1878,1877,1877,1878,1929,1877,1929,1928,1928,1929,1980,1928,1980,1979,1979,1980,2031,1979,2031,2030,2030,2031,2082,2030,2082,2081,2081,2082,2133,2081,2133,2132,2132,2133,2184,2132,2184,2183,2183,2184,2235,2183,2235,2234,2234,2235,2286,2234,2286,2285,2285,2286,2337,2285,2337,2336,2336,2337,2388,2336,2388,2387,2387,2388,2439,2387,2439,2438,2438,2439,2490,2438,2490,2489,2489,2490,2541,2489,2541,2540,2540,2541,2592,2540,2592,2591,42,43,94,42,94,93,93,94,145,93,145,144,144,145,196,144,196,195,195,196,247,195,247,246,246,247,298,246,298,297,297,298,349,297,349,348,348,349,400,348,400,399,399,400,451,399,451,450,450,451,502,450,502,501,501,502,553,501,553,552,552,553,604,552,604,603,603,604,655,603,655,654,654,655,706,654,706,705,705,706,757,705,757,756,756,757,808,756,808,807,807,808,859,807,859,858,858,859,910,858,910,909,909,910,961,909,961,960,960,961,1012,960,1012,1011,1011,1012,1063,1011,1063,1062,1062,1063,1114,1062,1114,1113,1113,1114,1165,1113,1165,1164,1164,1165,1216,1164,1216,1215,1215,1216,1267,1215,1267,1266,1266,1267,1318,1266,1318,1317,1317,1318,1369,1317,1369,1368,1368,1369,1420,1368,1420,1419,1419,1420,1471,1419,1471,1470,1470,1471,1522,1470,1522,1521,1521,1522,1573,1521,1573,1572,1572,1573,1624,1572,1624,1623,1623,1624,1675,1623,1675,1674,1674,1675,1726,1674,1726,1725,1725,1726,1777,1725,1777,1776,1776,1777,1828,1776,1828,1827,1827,1828,1879,1827,1879,1878,1878,1879,1930,1878,1930,1929,1929,1930,1981,1929,1981,1980,1980,1981,2032,1980,2032,2031,2031,2032,2083,2031,2083,2082,2082,2083,2134,2082,2134,2133,2133,2134,2185,2133,2185,2184,2184,2185,2236,2184,2236,2235,2235,2236,2287,2235,2287,2286,2286,2287,2338,2286,2338,2337,2337,2338,2389,2337,2389,2388,2388,2389,2440,2388,2440,2439,2439,2440,2491,2439,2491,2490,2490,2491,2542,2490,2542,2541,2541,2542,2593,2541,2593,2592,43,44,95,43,95,94,94,95,146,94,146,145,145,146,197,145,197,196,196,197,248,196,248,247,247,248,299,247,299,298,298,299,350,298,350,349,349,350,401,349,401,400,400,401,452,400,452,451,451,452,503,451,503,502,502,503,554,502,554,553,553,554,605,553,605,604,604,605,656,604,656,655,655,656,707,655,707,706,706,707,758,706,758,757,757,758,809,757,809,808,808,809,860,808,860,859,859,860,911,859,911,910,910,911,962,910,962,961,961,962,1013,961,1013,1012,1012,1013,1064,1012,1064,1063,1063,1064,1115,1063,1115,1114,1114,1115,1166,1114,1166,1165,1165,1166,1217,1165,1217,1216,1216,1217,1268,1216,1268,1267,1267,1268,1319,1267,1319,1318,1318,1319,1370,1318,1370,1369,1369,1370,1421,1369,1421,1420,1420,1421,1472,1420,1472,1471,1471,1472,1523,1471,1523,1522,1522,1523,1574,1522,1574,1573,1573,1574,1625,1573,1625,1624,1624,1625,1676,1624,1676,1675,1675,1676,1727,1675,1727,1726,1726,1727,1778,1726,1778,1777,1777,1778,1829,1777,1829,1828,1828,1829,1880,1828,1880,1879,1879,1880,1931,1879,1931,1930,1930,1931,1982,1930,1982,1981,1981,1982,2033,1981,2033,2032,2032,2033,2084,2032,2084,2083,2083,2084,2135,2083,2135,2134,2134,2135,2186,2134,2186,2185,2185,2186,2237,2185,2237,2236,2236,2237,2288,2236,2288,2287,2287,2288,2339,2287,2339,2338,2338,2339,2390,2338,2390,2389,2389,2390,2441,2389,2441,2440,2440,2441,2492,2440,2492,2491,2491,2492,2543,2491,2543,2542,2542,2543,2594,2542,2594,2593,44,45,96,44,96,95,95,96,147,95,147,146,146,147,198,146,198,197,197,198,249,197,249,248,248,249,300,248,300,299,299,300,351,299,351,350,350,351,402,350,402,401,401,402,453,401,453,452,452,453,504,452,504,503,503,504,555,503,555,554,554,555,606,554,606,605,605,606,657,605,657,656,656,657,708,656,708,707,707,708,759,707,759,758,758,759,810,758,810,809,809,810,861,809,861,860,860,861,912,860,912,911,911,912,963,911,963,962,962,963,1014,962,1014,1013,1013,1014,1065,1013,1065,1064,1064,1065,1116,1064,1116,1115,1115,1116,1167,1115,1167,1166,1166,1167,1218,1166,1218,1217,1217,1218,1269,1217,1269,1268,1268,1269,1320,1268,1320,1319,1319,1320,1371,1319,1371,1370,1370,1371,1422,1370,1422,1421,1421,1422,1473,1421,1473,1472,1472,1473,1524,1472,1524,1523,1523,1524,1575,1523,1575,1574,1574,1575,1626,1574,1626,1625,1625,1626,1677,1625,1677,1676,1676,1677,1728,1676,1728,1727,1727,1728,1779,1727,1779,1778,1778,1779,1830,1778,1830,1829,1829,1830,1881,1829,1881,1880,1880,1881,1932,1880,1932,1931,1931,1932,1983,1931,1983,1982,1982,1983,2034,1982,2034,2033,2033,2034,2085,2033,2085,2084,2084,2085,2136,2084,2136,2135,2135,2136,2187,2135,2187,2186,2186,2187,2238,2186,2238,2237,2237,2238,2289,2237,2289,2288,2288,2289,2340,2288,2340,2339,2339,2340,2391,2339,2391,2390,2390,2391,2442,2390,2442,2441,2441,2442,2493,2441,2493,2492,2492,2493,2544,2492,2544,2543,2543,2544,2595,2543,2595,2594,45,46,97,45,97,96,96,97,148,96,148,147,147,148,199,147,199,198,198,199,250,198,250,249,249,250,301,249,301,300,300,301,352,300,352,351,351,352,403,351,403,402,402,403,454,402,454,453,453,454,505,453,505,504,504,505,556,504,556,555,555,556,607,555,607,606,606,607,658,606,658,657,657,658,709,657,709,708,708,709,760,708,760,759,759,760,811,759,811,810,810,811,862,810,862,861,861,862,913,861,913,912,912,913,964,912,964,963,963,964,1015,963,1015,1014,1014,1015,1066,1014,1066,1065,1065,1066,1117,1065,1117,1116,1116,1117,1168,1116,1168,1167,1167,1168,1219,1167,1219,1218,1218,1219,1270,1218,1270,1269,1269,1270,1321,1269,1321,1320,1320,1321,1372,1320,1372,1371,1371,1372,1423,1371,1423,1422,1422,1423,1474,1422,1474,1473,1473,1474,1525,1473,1525,1524,1524,1525,1576,1524,1576,1575,1575,1576,1627,1575,1627,1626,1626,1627,1678,1626,1678,1677,1677,1678,1729,1677,1729,1728,1728,1729,1780,1728,1780,1779,1779,1780,1831,1779,1831,1830,1830,1831,1882,1830,1882,1881,1881,1882,1933,1881,1933,1932,1932,1933,1984,1932,1984,1983,1983,1984,2035,1983,2035,2034,2034,2035,2086,2034,2086,2085,2085,2086,2137,2085,2137,2136,2136,2137,2188,2136,2188,2187,2187,2188,2239,2187,2239,2238,2238,2239,2290,2238,2290,2289,2289,2290,2341,2289,2341,2340,2340,2341,2392,2340,2392,2391,2391,2392,2443,2391,2443,2442,2442,2443,2494,2442,2494,2493,2493,2494,2545,2493,2545,2544,2544,2545,2596,2544,2596,2595,46,47,98,46,98,97,97,98,149,97,149,148,148,149,200,148,200,199,199,200,251,199,251,250,250,251,302,250,302,301,301,302,353,301,353,352,352,353,404,352,404,403,403,404,455,403,455,454,454,455,506,454,506,505,505,506,557,505,557,556,556,557,608,556,608,607,607,608,659,607,659,658,658,659,710,658,710,709,709,710,761,709,761,760,760,761,812,760,812,811,811,812,863,811,863,862,862,863,914,862,914,913,913,914,965,913,965,964,964,965,1016,964,1016,1015,1015,1016,1067,1015,1067,1066,1066,1067,1118,1066,1118,1117,1117,1118,1169,1117,1169,1168,1168,1169,1220,1168,1220,1219,1219,1220,1271,1219,1271,1270,1270,1271,1322,1270,1322,1321,1321,1322,1373,1321,1373,1372,1372,1373,1424,1372,1424,1423,1423,1424,1475,1423,1475,1474,1474,1475,1526,1474,1526,1525,1525,1526,1577,1525,1577,1576,1576,1577,1628,1576,1628,1627,1627,1628,1679,1627,1679,1678,1678,1679,1730,1678,1730,1729,1729,1730,1781,1729,1781,1780,1780,1781,1832,1780,1832,1831,1831,1832,1883,1831,1883,1882,1882,1883,1934,1882,1934,1933,1933,1934,1985,1933,1985,1984,1984,1985,2036,1984,2036,2035,2035,2036,2087,2035,2087,2086,2086,2087,2138,2086,2138,2137,2137,2138,2189,2137,2189,2188,2188,2189,2240,2188,2240,2239,2239,2240,2291,2239,2291,2290,2290,2291,2342,2290,2342,2341,2341,2342,2393,2341,2393,2392,2392,2393,2444,2392,2444,2443,2443,2444,2495,2443,2495,2494,2494,2495,2546,2494,2546,2545,2545,2546,2597,2545,2597,2596,47,48,99,47,99,98,98,99,150,98,150,149,149,150,201,149,201,200,200,201,252,200,252,251,251,252,303,251,303,302,302,303,354,302,354,353,353,354,405,353,405,404,404,405,456,404,456,455,455,456,507,455,507,506,506,507,558,506,558,557,557,558,609,557,609,608,608,609,660,608,660,659,659,660,711,659,711,710,710,711,762,710,762,761,761,762,813,761,813,812,812,813,864,812,864,863,863,864,915,863,915,914,914,915,966,914,966,965,965,966,1017,965,1017,1016,1016,1017,1068,1016,1068,1067,1067,1068,1119,1067,1119,1118,1118,1119,1170,1118,1170,1169,1169,1170,1221,1169,1221,1220,1220,1221,1272,1220,1272,1271,1271,1272,1323,1271,1323,1322,1322,1323,1374,1322,1374,1373,1373,1374,1425,1373,1425,1424,1424,1425,1476,1424,1476,1475,1475,1476,1527,1475,1527,1526,1526,1527,1578,1526,1578,1577,1577,1578,1629,1577,1629,1628,1628,1629,1680,1628,1680,1679,1679,1680,1731,1679,1731,1730,1730,1731,1782,1730,1782,1781,1781,1782,1833,1781,1833,1832,1832,1833,1884,1832,1884,1883,1883,1884,1935,1883,1935,1934,1934,1935,1986,1934,1986,1985,1985,1986,2037,1985,2037,2036,2036,2037,2088,2036,2088,2087,2087,2088,2139,2087,2139,2138,2138,2139,2190,2138,2190,2189,2189,2190,2241,2189,2241,2240,2240,2241,2292,2240,2292,2291,2291,2292,2343,2291,2343,2342,2342,2343,2394,2342,2394,2393,2393,2394,2445,2393,2445,2444,2444,2445,2496,2444,2496,2495,2495,2496,2547,2495,2547,2546,2546,2547,2598,2546,2598,2597,48,49,100,48,100,99,99,100,151,99,151,150,150,151,202,150,202,201,201,202,253,201,253,252,252,253,304,252,304,303,303,304,355,303,355,354,354,355,406,354,406,405,405,406,457,405,457,456,456,457,508,456,508,507,507,508,559,507,559,558,558,559,610,558,610,609,609,610,661,609,661,660,660,661,712,660,712,711,711,712,763,711,763,762,762,763,814,762,814,813,813,814,865,813,865,864,864,865,916,864,916,915,915,916,967,915,967,966,966,967,1018,966,1018,1017,1017,1018,1069,1017,1069,1068,1068,1069,1120,1068,1120,1119,1119,1120,1171,1119,1171,1170,1170,1171,1222,1170,1222,1221,1221,1222,1273,1221,1273,1272,1272,1273,1324,1272,1324,1323,1323,1324,1375,1323,1375,1374,1374,1375,1426,1374,1426,1425,1425,1426,1477,1425,1477,1476,1476,1477,1528,1476,1528,1527,1527,1528,1579,1527,1579,1578,1578,1579,1630,1578,1630,1629,1629,1630,1681,1629,1681,1680,1680,1681,1732,1680,1732,1731,1731,1732,1783,1731,1783,1782,1782,1783,1834,1782,1834,1833,1833,1834,1885,1833,1885,1884,1884,1885,1936,1884,1936,1935,1935,1936,1987,1935,1987,1986,1986,1987,2038,1986,2038,2037,2037,2038,2089,2037,2089,2088,2088,2089,2140,2088,2140,2139,2139,2140,2191,2139,2191,2190,2190,2191,2242,2190,2242,2241,2241,2242,2293,2241,2293,2292,2292,2293,2344,2292,2344,2343,2343,2344,2395,2343,2395,2394,2394,2395,2446,2394,2446,2445,2445,2446,2497,2445,2497,2496,2496,2497,2548,2496,2548,2547,2547,2548,2599,2547,2599,2598,49,50,101,49,101,100,100,101,152,100,152,151,151,152,203,151,203,202,202,203,254,202,254,253,253,254,305,253,305,304,304,305,356,304,356,355,355,356,407,355,407,406,406,407,458,406,458,457,457,458,509,457,509,508,508,509,560,508,560,559,559,560,611,559,611,610,610,611,662,610,662,661,661,662,713,661,713,712,712,713,764,712,764,763,763,764,815,763,815,814,814,815,866,814,866,865,865,866,917,865,917,916,916,917,968,916,968,967,967,968,1019,967,1019,1018,1018,1019,1070,1018,1070,1069,1069,1070,1121,1069,1121,1120,1120,1121,1172,1120,1172,1171,1171,1172,1223,1171,1223,1222,1222,1223,1274,1222,1274,1273,1273,1274,1325,1273,1325,1324,1324,1325,1376,1324,1376,1375,1375,1376,1427,1375,1427,1426,1426,1427,1478,1426,1478,1477,1477,1478,1529,1477,1529,1528,1528,1529,1580,1528,1580,1579,1579,1580,1631,1579,1631,1630,1630,1631,1682,1630,1682,1681,1681,1682,1733,1681,1733,1732,1732,1733,1784,1732,1784,1783,1783,1784,1835,1783,1835,1834,1834,1835,1886,1834,1886,1885,1885,1886,1937,1885,1937,1936,1936,1937,1988,1936,1988,1987,1987,1988,2039,1987,2039,2038,2038,2039,2090,2038,2090,2089,2089,2090,2141,2089,2141,2140,2140,2141,2192,2140,2192,2191,2191,2192,2243,2191,2243,2242,2242,2243,2294,2242,2294,2293,2293,2294,2345,2293,2345,2344,2344,2345,2396,2344,2396,2395,2395,2396,2447,2395,2447,2446,2446,2447,2498,2446,2498,2497,2497,2498,2549,2497,2549,2548,2548,2549,2600,2548,2600,2599],er=[-25,-25,-6.68,-25,-24,-5.62,-25,-23,-4.53,-25,-22,-3.43,-25,-21,-2.34,-25,-20,-1.27,-25,-19,-.25,-25,-18,.72,-25,-17,1.6,-25,-16,2.4,-25,-15,3.09,-25,-14,3.67,-25,-13,4.13,-25,-12,4.47,-25,-11,4.68,-25,-10,4.76,-25,-9,4.71,-25,-8,4.54,-25,-7,4.25,-25,-6,3.86,-25,-5,3.37,-25,-4,2.8,-25,-3,2.16,-25,-2,1.47,-25,-1,.74,-25,0,0,-25,1,0,-25,2,0,-25,3,0,-25,4,0,-25,5,0,-25,6,0,-25,7,0,-25,8,0,-25,9,0,-25,10,0,-25,11,0,-25,12,0,-25,13,0,-25,14,0,-25,15,0,-25,16,0,-25,17,0,-25,18,0,-25,19,0,-25,20,0,-25,21,0,-25,22,0,-25,23,0,-25,24,0,-25,25,0,-24,-25,-6.84,-24,-24,-5.69,-24,-23,-4.5,-24,-22,-3.31,-24,-21,-2.14,-24,-20,-.99,-24,-19,.11,-24,-18,1.13,-24,-17,2.08,-24,-16,2.92,-24,-15,3.65,-24,-14,4.26,-24,-13,4.74,-24,-12,5.08,-24,-11,5.28,-24,-10,5.35,-24,-9,5.27,-24,-8,5.07,-24,-7,4.74,-24,-6,4.29,-24,-5,3.75,-24,-4,3.11,-24,-3,2.4,-24,-2,1.63,-24,-1,.82,-24,0,0,-24,1,0,-24,2,0,-24,3,0,-24,4,0,-24,5,0,-24,6,0,-24,7,0,-24,8,0,-24,9,0,-24,10,0,-24,11,0,-24,12,0,-24,13,0,-24,14,0,-24,15,0,-24,16,0,-24,17,0,-24,18,0,-24,19,0,-24,20,0,-24,21,0,-24,22,0,-24,23,0,-24,24,0,-24,25,0,-23,-25,-6.94,-23,-24,-5.69,-23,-23,-4.42,-23,-22,-3.13,-23,-21,-1.87,-23,-20,-.64,-23,-19,.53,-23,-18,1.62,-23,-17,2.62,-23,-16,3.51,-23,-15,4.28,-23,-14,4.91,-23,-13,5.41,-23,-12,5.75,-23,-11,5.95,-23,-10,5.99,-23,-9,5.89,-23,-8,5.65,-23,-7,5.27,-23,-6,4.77,-23,-5,4.15,-23,-4,3.44,-23,-3,2.65,-23,-2,1.8,-23,-1,.91,-23,0,0,-23,1,0,-23,2,0,-23,3,0,-23,4,0,-23,5,0,-23,6,0,-23,7,0,-23,8,0,-23,9,0,-23,10,0,-23,11,0,-23,12,0,-23,13,0,-23,14,0,-23,15,0,-23,16,0,-23,17,0,-23,18,0,-23,19,0,-23,20,0,-23,21,0,-23,22,0,-23,23,0,-23,24,0,-23,25,0,-22,-25,-6.99,-22,-24,-5.64,-22,-23,-4.27,-22,-22,-2.89,-22,-21,-1.54,-22,-20,-.23,-22,-19,1.01,-22,-18,2.17,-22,-17,3.23,-22,-16,4.16,-22,-15,4.97,-22,-14,5.63,-22,-13,6.14,-22,-12,6.49,-22,-11,6.67,-22,-10,6.7,-22,-9,6.56,-22,-8,6.27,-22,-7,5.84,-22,-6,5.27,-22,-5,4.59,-22,-4,3.8,-22,-3,2.93,-22,-2,1.99,-22,-1,1.01,-22,0,0,-22,1,0,-22,2,0,-22,3,0,-22,4,0,-22,5,0,-22,6,0,-22,7,0,-22,8,0,-22,9,0,-22,10,0,-22,11,0,-22,12,0,-22,13,0,-22,14,0,-22,15,0,-22,16,0,-22,17,0,-22,18,0,-22,19,0,-22,20,0,-22,21,0,-22,22,0,-22,23,0,-22,24,0,-22,25,0,-21,-25,-6.97,-21,-24,-5.52,-21,-23,-4.05,-21,-22,-2.58,-21,-21,-1.14,-21,-20,.25,-21,-19,1.57,-21,-18,2.79,-21,-17,3.91,-21,-16,4.89,-21,-15,5.73,-21,-14,6.41,-21,-13,6.93,-21,-12,7.28,-21,-11,7.46,-21,-10,7.46,-21,-9,7.28,-21,-8,6.95,-21,-7,6.46,-21,-6,5.82,-21,-5,5.06,-21,-4,4.19,-21,-3,3.22,-21,-2,2.19,-21,-1,1.11,-21,0,0,-21,1,0,-21,2,0,-21,3,0,-21,4,0,-21,5,0,-21,6,0,-21,7,0,-21,8,0,-21,9,0,-21,10,0,-21,11,0,-21,12,0,-21,13,0,-21,14,0,-21,15,0,-21,16,0,-21,17,0,-21,18,0,-21,19,0,-21,20,0,-21,21,0,-21,22,0,-21,23,0,-21,24,0,-21,25,0,-20,-25,-6.89,-20,-24,-5.34,-20,-23,-3.77,-20,-22,-2.2,-20,-21,-.67,-20,-20,.8,-20,-19,2.19,-20,-18,3.49,-20,-17,4.65,-20,-16,5.68,-20,-15,6.56,-20,-14,7.26,-20,-13,7.79,-20,-12,8.14,-20,-11,8.3,-20,-10,8.27,-20,-9,8.06,-20,-8,7.67,-20,-7,7.12,-20,-6,6.41,-20,-5,5.56,-20,-4,4.6,-20,-3,3.54,-20,-2,2.4,-20,-1,1.21,-20,0,0,-20,1,0,-20,2,0,-20,3,0,-20,4,0,-20,5,0,-20,6,0,-20,7,0,-20,8,0,-20,9,0,-20,10,0,-20,11,0,-20,12,0,-20,13,0,-20,14,0,-20,15,0,-20,16,0,-20,17,0,-20,18,0,-20,19,0,-20,20,0,-20,21,0,-20,22,0,-20,23,0,-20,24,0,-20,25,0,-19,-25,-6.75,-19,-24,-5.09,-19,-23,-3.42,-19,-22,-1.76,-19,-21,-.14,-19,-20,1.42,-19,-19,2.89,-19,-18,4.25,-19,-17,5.47,-19,-16,6.54,-19,-15,7.45,-19,-14,8.18,-19,-13,8.72,-19,-12,9.06,-19,-11,9.2,-19,-10,9.14,-19,-9,8.89,-19,-8,8.44,-19,-7,7.82,-19,-6,7.03,-19,-5,6.1,-19,-4,5.04,-19,-3,3.87,-19,-2,2.63,-19,-1,1.33,-19,0,0,-19,1,0,-19,2,0,-19,3,0,-19,4,0,-19,5,0,-19,6,0,-19,7,0,-19,8,0,-19,9,0,-19,10,0,-19,11,0,-19,12,0,-19,13,0,-19,14,0,-19,15,0,-19,16,0,-19,17,0,-19,18,0,-19,19,0,-19,20,0,-19,21,0,-19,22,0,-19,23,0,-19,24,0,-19,25,0,-18,-25,-6.54,-18,-24,-4.78,-18,-23,-3,-18,-22,-1.25,-18,-21,.47,-18,-20,2.11,-18,-19,3.65,-18,-18,5.07,-18,-17,6.35,-18,-16,7.47,-18,-15,8.41,-18,-14,9.16,-18,-13,9.7,-18,-12,10.04,-18,-11,10.16,-18,-10,10.07,-18,-9,9.77,-18,-8,9.26,-18,-7,8.57,-18,-6,7.7,-18,-5,6.67,-18,-4,5.51,-18,-3,4.23,-18,-2,2.87,-18,-1,1.45,-18,0,0,-18,1,0,-18,2,0,-18,3,0,-18,4,0,-18,5,0,-18,6,0,-18,7,0,-18,8,0,-18,9,0,-18,10,0,-18,11,0,-18,12,0,-18,13,0,-18,14,0,-18,15,0,-18,16,0,-18,17,0,-18,18,0,-18,19,0,-18,20,0,-18,21,0,-18,22,0,-18,23,0,-18,24,0,-18,25,0,-17,-25,-6.27,-17,-24,-4.4,-17,-23,-2.53,-17,-22,-.67,-17,-21,1.13,-17,-20,2.86,-17,-19,4.47,-17,-18,5.96,-17,-17,7.3,-17,-16,8.46,-17,-15,9.44,-17,-14,10.2,-17,-13,10.75,-17,-12,11.08,-17,-11,11.18,-17,-10,11.05,-17,-9,10.7,-17,-8,10.13,-17,-7,9.36,-17,-6,8.4,-17,-5,7.27,-17,-4,6,-17,-3,4.61,-17,-2,3.13,-17,-1,1.58,-17,0,0,-17,1,0,-17,2,0,-17,3,0,-17,4,0,-17,5,0,-17,6,0,-17,7,0,-17,8,0,-17,9,0,-17,10,0,-17,11,0,-17,12,0,-17,13,0,-17,14,0,-17,15,0,-17,16,0,-17,17,0,-17,18,0,-17,19,0,-17,20,0,-17,21,0,-17,22,0,-17,23,0,-17,24,0,-17,25,0,-16,-25,-5.94,-16,-24,-3.96,-16,-23,-1.99,-16,-22,-.04,-16,-21,1.86,-16,-20,3.67,-16,-19,5.36,-16,-18,6.92,-16,-17,8.31,-16,-16,9.51,-16,-15,10.52,-16,-14,11.3,-16,-13,11.86,-16,-12,12.17,-16,-11,12.25,-16,-10,12.08,-16,-9,11.68,-16,-8,11.04,-16,-7,10.19,-16,-6,9.14,-16,-5,7.91,-16,-4,6.52,-16,-3,5.01,-16,-2,3.4,-16,-1,1.71,-16,0,0,-16,1,0,-16,2,0,-16,3,0,-16,4,0,-16,5,0,-16,6,0,-16,7,0,-16,8,0,-16,9,0,-16,10,0,-16,11,0,-16,12,0,-16,13,0,-16,14,0,-16,15,0,-16,16,0,-16,17,0,-16,18,0,-16,19,0,-16,20,0,-16,21,0,-16,22,0,-16,23,0,-16,24,0,-16,25,0,-15,-25,-5.55,-15,-24,-3.47,-15,-23,-1.39,-15,-22,.66,-15,-21,2.64,-15,-20,4.53,-15,-19,6.3,-15,-18,7.93,-15,-17,9.37,-15,-16,10.62,-15,-15,11.66,-15,-14,12.46,-15,-13,13.02,-15,-12,13.33,-15,-11,13.38,-15,-10,13.17,-15,-9,12.71,-15,-8,12,-15,-7,11.07,-15,-6,9.92,-15,-5,8.58,-15,-4,7.07,-15,-3,5.43,-15,-2,3.68,-15,-1,1.86,-15,0,0,-15,1,0,-15,2,0,-15,3,0,-15,4,0,-15,5,0,-15,6,0,-15,7,0,-15,8,0,-15,9,0,-15,10,0,-15,11,0,-15,12,0,-15,13,0,-15,14,0,-15,15,0,-15,16,0,-15,17,0,-15,18,0,-15,19,0,-15,20,0,-15,21,0,-15,22,0,-15,23,0,-15,24,0,-15,25,0,-14,-25,-5.11,-14,-24,-2.92,-14,-23,-.74,-14,-22,1.4,-14,-21,3.48,-14,-20,5.45,-14,-19,7.3,-14,-18,8.99,-14,-17,10.49,-14,-16,11.78,-14,-15,12.85,-14,-14,13.67,-14,-13,14.23,-14,-12,14.53,-14,-11,14.55,-14,-10,14.3,-14,-9,13.79,-14,-8,13.01,-14,-7,11.99,-14,-6,10.74,-14,-5,9.29,-14,-4,7.65,-14,-3,5.87,-14,-2,3.98,-14,-1,2.01,-14,0,0,-14,1,0,-14,2,0,-14,3,0,-14,4,0,-14,5,0,-14,6,0,-14,7,0,-14,8,0,-14,9,0,-14,10,0,-14,11,0,-14,12,0,-14,13,0,-14,14,0,-14,15,0,-14,16,0,-14,17,0,-14,18,0,-14,19,0,-14,20,0,-14,21,0,-14,22,0,-14,23,0,-14,24,0,-14,25,0,-13,-25,-4.61,-13,-24,-2.32,-13,-23,-.04,-13,-22,2.2,-13,-21,4.36,-13,-20,6.42,-13,-19,8.34,-13,-18,10.09,-13,-17,11.65,-13,-16,12.99,-13,-15,14.09,-13,-14,14.93,-13,-13,15.49,-13,-12,15.78,-13,-11,15.78,-13,-10,15.49,-13,-9,14.91,-13,-8,14.06,-13,-7,12.95,-13,-6,11.6,-13,-5,10.03,-13,-4,8.26,-13,-3,6.34,-13,-2,4.3,-13,-1,2.17,-13,0,0,-13,1,0,-13,2,0,-13,3,0,-13,4,0,-13,5,0,-13,6,0,-13,7,0,-13,8,0,-13,9,0,-13,10,0,-13,11,0,-13,12,0,-13,13,0,-13,14,0,-13,15,0,-13,16,0,-13,17,0,-13,18,0,-13,19,0,-13,20,0,-13,21,0,-13,22,0,-13,23,0,-13,24,0,-13,25,0,-12,-25,-4.07,-12,-24,-1.68,-12,-23,.7,-12,-22,3.03,-12,-21,5.29,-12,-20,7.43,-12,-19,9.42,-12,-18,11.24,-12,-17,12.85,-12,-16,14.24,-12,-15,15.37,-12,-14,16.23,-12,-13,16.8,-12,-12,17.07,-12,-11,17.05,-12,-10,16.72,-12,-9,16.08,-12,-8,15.16,-12,-7,13.96,-12,-6,12.5,-12,-5,10.8,-12,-4,8.9,-12,-3,6.83,-12,-2,4.63,-12,-1,2.34,-12,0,0,-12,1,0,-12,2,0,-12,3,0,-12,4,0,-12,5,0,-12,6,0,-12,7,0,-12,8,0,-12,9,0,-12,10,0,-12,11,0,-12,12,0,-12,13,0,-12,14,0,-12,15,0,-12,16,0,-12,17,0,-12,18,0,-12,19,0,-12,20,0,-12,21,0,-12,22,0,-12,23,0,-12,24,0,-12,25,0,-11,-25,-3.5,-11,-24,-1.01,-11,-23,1.47,-11,-22,3.9,-11,-21,6.24,-11,-20,8.46,-11,-19,10.53,-11,-18,12.42,-11,-17,14.09,-11,-16,15.52,-11,-15,16.68,-11,-14,17.56,-11,-13,18.14,-11,-12,18.41,-11,-11,18.36,-11,-10,17.99,-11,-9,17.3,-11,-8,16.3,-11,-7,15.01,-11,-6,13.44,-11,-5,11.62,-11,-4,9.58,-11,-3,7.35,-11,-2,4.98,-11,-1,2.52,-11,0,0,-11,1,0,-11,2,0,-11,3,0,-11,4,0,-11,5,0,-11,6,0,-11,7,0,-11,8,0,-11,9,0,-11,10,0,-11,11,0,-11,12,0,-11,13,0,-11,14,0,-11,15,0,-11,16,0,-11,17,0,-11,18,0,-11,19,0,-11,20,0,-11,21,0,-11,22,0,-11,23,0,-11,24,0,-11,25,0,-10,-25,-2.89,-10,-24,-.3,-10,-23,2.27,-10,-22,4.79,-10,-21,7.22,-10,-20,9.53,-10,-19,11.67,-10,-18,13.62,-10,-17,15.35,-10,-16,16.82,-10,-15,18.02,-10,-14,18.93,-10,-13,19.52,-10,-12,19.78,-10,-11,19.71,-10,-10,19.3,-10,-9,18.56,-10,-8,17.49,-10,-7,16.11,-10,-6,14.43,-10,-5,12.48,-10,-4,10.29,-10,-3,7.9,-10,-2,5.36,-10,-1,2.71,-10,0,0,-10,1,0,-10,2,0,-10,3,0,-10,4,0,-10,5,0,-10,6,0,-10,7,0,-10,8,0,-10,9,0,-10,10,0,-10,11,0,-10,12,0,-10,13,0,-10,14,0,-10,15,0,-10,16,0,-10,17,0,-10,18,0,-10,19,0,-10,20,0,-10,21,0,-10,22,0,-10,23,0,-10,24,0,-10,25,0,-9,-25,-2.26,-9,-24,.42,-9,-23,3.09,-9,-22,5.7,-9,-21,8.21,-9,-20,10.6,-9,-19,12.82,-9,-18,14.84,-9,-17,16.62,-9,-16,18.15,-9,-15,19.38,-9,-14,20.31,-9,-13,20.92,-9,-12,21.18,-9,-11,21.09,-9,-10,20.65,-9,-9,19.86,-9,-8,18.72,-9,-7,17.25,-9,-6,15.46,-9,-5,13.38,-9,-4,11.04,-9,-3,8.49,-9,-2,5.76,-9,-1,2.91,-9,0,0,-9,1,0,-9,2,0,-9,3,0,-9,4,0,-9,5,0,-9,6,0,-9,7,0,-9,8,0,-9,9,0,-9,10,0,-9,11,0,-9,12,0,-9,13,0,-9,14,0,-9,15,0,-9,16,0,-9,17,0,-9,18,0,-9,19,0,-9,20,0,-9,21,0,-9,22,0,-9,23,0,-9,24,0,-9,25,0,-8,-25,-1.62,-8,-24,1.16,-8,-23,3.92,-8,-22,6.61,-8,-21,9.21,-8,-20,11.68,-8,-19,13.97,-8,-18,16.05,-8,-17,17.9,-8,-16,19.47,-8,-15,20.75,-8,-14,21.71,-8,-13,22.33,-8,-12,22.6,-8,-11,22.5,-8,-10,22.04,-8,-9,21.2,-8,-8,20,-8,-7,18.44,-8,-6,16.55,-8,-5,14.34,-8,-4,11.85,-8,-3,9.11,-8,-2,6.19,-8,-1,3.13,-8,0,0,-8,1,0,-8,2,0,-8,3,0,-8,4,0,-8,5,0,-8,6,0,-8,7,0,-8,8,0,-8,9,0,-8,10,0,-8,11,0,-8,12,0,-8,13,0,-8,14,0,-8,15,0,-8,16,0,-8,17,0,-8,18,0,-8,19,0,-8,20,0,-8,21,0,-8,22,0,-8,23,0,-8,24,0,-8,25,0,-7,-25,-.97,-7,-24,1.9,-7,-23,4.74,-7,-22,7.52,-7,-21,10.21,-7,-20,12.75,-7,-19,15.11,-7,-18,17.27,-7,-17,19.17,-7,-16,20.8,-7,-15,22.12,-7,-14,23.12,-7,-13,23.76,-7,-12,24.04,-7,-11,23.94,-7,-10,23.46,-7,-9,22.58,-7,-8,21.32,-7,-7,19.69,-7,-6,17.69,-7,-5,15.36,-7,-4,12.71,-7,-3,9.79,-7,-2,6.66,-7,-1,3.37,-7,0,0,-7,1,0,-7,2,0,-7,3,0,-7,4,0,-7,5,0,-7,6,0,-7,7,0,-7,8,0,-7,9,0,-7,10,0,-7,11,0,-7,12,0,-7,13,0,-7,14,0,-7,15,0,-7,16,0,-7,17,0,-7,18,0,-7,19,0,-7,20,0,-7,21,0,-7,22,0,-7,23,0,-7,24,0,-7,25,0,-6,-25,-.32,-6,-24,2.63,-6,-23,5.55,-6,-22,8.42,-6,-21,11.18,-6,-20,13.8,-6,-19,16.24,-6,-18,18.46,-6,-17,20.42,-6,-16,22.11,-6,-15,23.48,-6,-14,24.51,-6,-13,25.19,-6,-12,25.48,-6,-11,25.39,-6,-10,24.9,-6,-9,24,-6,-8,22.7,-6,-7,21,-6,-6,18.91,-6,-5,16.45,-6,-4,13.65,-6,-3,10.54,-6,-2,7.18,-6,-1,3.64,-6,0,0,-6,1,0,-6,2,0,-6,3,0,-6,4,0,-6,5,0,-6,6,0,-6,7,0,-6,8,0,-6,9,0,-6,10,0,-6,11,0,-6,12,0,-6,13,0,-6,14,0,-6,15,0,-6,16,0,-6,17,0,-6,18,0,-6,19,0,-6,20,0,-6,21,0,-6,22,0,-6,23,0,-6,24,0,-6,25,0,-5,-25,.31,-5,-24,3.34,-5,-23,6.34,-5,-22,9.29,-5,-21,12.13,-5,-20,14.82,-5,-19,17.33,-5,-18,19.62,-5,-17,21.65,-5,-16,23.39,-5,-15,24.81,-5,-14,25.89,-5,-13,26.6,-5,-12,26.93,-5,-11,26.85,-5,-10,26.36,-5,-9,25.45,-5,-8,24.12,-5,-7,22.37,-5,-6,20.2,-5,-5,17.63,-5,-4,14.68,-5,-3,11.38,-5,-2,7.78,-5,-1,3.95,-5,0,0,-5,1,0,-5,2,0,-5,3,0,-5,4,0,-5,5,0,-5,6,0,-5,7,0,-5,8,0,-5,9,0,-5,10,0,-5,11,0,-5,12,0,-5,13,0,-5,14,0,-5,15,0,-5,16,0,-5,17,0,-5,18,0,-5,19,0,-5,20,0,-5,21,0,-5,22,0,-5,23,0,-5,24,0,-5,25,0,-4,-25,.92,-4,-24,4.02,-4,-23,7.1,-4,-22,10.12,-4,-21,13.03,-4,-20,15.79,-4,-19,18.37,-4,-18,20.73,-4,-17,22.83,-4,-16,24.63,-4,-15,26.11,-4,-14,27.24,-4,-13,28,-4,-12,28.36,-4,-11,28.31,-4,-10,27.84,-4,-9,26.93,-4,-8,25.59,-4,-7,23.81,-4,-6,21.59,-4,-5,18.93,-4,-4,15.85,-4,-3,12.35,-4,-2,8.49,-4,-1,4.33,-4,0,0,-4,1,0,-4,2,0,-4,3,0,-4,4,0,-4,5,0,-4,6,0,-4,7,0,-4,8,0,-4,9,0,-4,10,0,-4,11,0,-4,12,0,-4,13,0,-4,14,0,-4,15,0,-4,16,0,-4,17,0,-4,18,0,-4,19,0,-4,20,0,-4,21,0,-4,22,0,-4,23,0,-4,24,0,-4,25,0,-3,-25,1.49,-3,-24,4.66,-3,-23,7.81,-3,-22,10.89,-3,-21,13.88,-3,-20,16.71,-3,-19,19.36,-3,-18,21.78,-3,-17,23.94,-3,-16,25.81,-3,-15,27.35,-3,-14,28.54,-3,-13,29.35,-3,-12,29.76,-3,-11,29.75,-3,-10,29.32,-3,-9,28.44,-3,-8,27.11,-3,-7,25.32,-3,-6,23.08,-3,-5,20.36,-3,-4,17.17,-3,-3,13.51,-3,-2,9.37,-3,-1,4.82,-3,0,0,-3,1,0,-3,2,0,-3,3,0,-3,4,0,-3,5,0,-3,6,0,-3,7,0,-3,8,0,-3,9,0,-3,10,0,-3,11,0,-3,12,0,-3,13,0,-3,14,0,-3,15,0,-3,16,0,-3,17,0,-3,18,0,-3,19,0,-3,20,0,-3,21,0,-3,22,0,-3,23,0,-3,24,0,-3,25,0,-2,-25,2.02,-2,-24,5.25,-2,-23,8.46,-2,-22,11.61,-2,-21,14.66,-2,-20,17.56,-2,-19,20.27,-2,-18,22.76,-2,-17,24.99,-2,-16,26.92,-2,-15,28.53,-2,-14,29.78,-2,-13,30.65,-2,-12,31.12,-2,-11,31.17,-2,-10,30.79,-2,-9,29.95,-2,-8,28.66,-2,-7,26.91,-2,-6,24.67,-2,-5,21.95,-2,-4,18.72,-2,-3,14.93,-2,-2,10.55,-2,-1,5.53,-2,0,0,-2,1,0,-2,2,0,-2,3,0,-2,4,0,-2,5,0,-2,6,0,-2,7,0,-2,8,0,-2,9,0,-2,10,0,-2,11,0,-2,12,0,-2,13,0,-2,14,0,-2,15,0,-2,16,0,-2,17,0,-2,18,0,-2,19,0,-2,20,0,-2,21,0,-2,22,0,-2,23,0,-2,24,0,-2,25,0,-1,-25,2.5,-1,-24,5.78,-1,-23,9.04,-1,-22,12.25,-1,-21,15.35,-1,-20,18.32,-1,-19,21.1,-1,-18,23.65,-1,-17,25.95,-1,-16,27.95,-1,-15,29.62,-1,-14,30.94,-1,-13,31.88,-1,-12,32.42,-1,-11,32.54,-1,-10,32.23,-1,-9,31.46,-1,-8,30.24,-1,-7,28.55,-1,-6,26.38,-1,-5,23.71,-1,-4,20.51,-1,-3,16.72,-1,-2,12.22,-1,-1,6.74,-1,0,0,-1,1,0,-1,2,0,-1,3,0,-1,4,0,-1,5,0,-1,6,0,-1,7,0,-1,8,0,-1,9,0,-1,10,0,-1,11,0,-1,12,0,-1,13,0,-1,14,0,-1,15,0,-1,16,0,-1,17,0,-1,18,0,-1,19,0,-1,20,0,-1,21,0,-1,22,0,-1,23,0,-1,24,0,-1,25,0,0,-25,2.9,0,-24,6.23,0,-23,9.54,0,-22,12.8,0,-21,15.96,0,-20,18.98,0,-19,21.82,0,-18,24.43,0,-17,26.8,0,-16,28.86,0,-15,30.61,0,-14,32,0,-13,33.02,0,-12,33.64,0,-11,33.84,0,-10,33.62,0,-9,32.94,0,-8,31.82,0,-7,30.23,0,-6,28.18,0,-5,25.63,0,-4,22.57,0,-3,18.95,0,-2,14.63,0,-1,9.28,0,0,0,0,1,0,0,2,0,0,3,0,0,4,0,0,5,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,1,-25,3.24,1,-24,6.6,1,-23,9.95,1,-22,13.25,1,-21,16.46,1,-20,19.53,1,-19,22.42,1,-18,25.1,1,-17,27.52,1,-16,29.66,1,-15,31.48,1,-14,32.95,1,-13,34.05,1,-12,34.76,1,-11,35.06,1,-10,34.93,1,-9,34.37,1,-8,33.37,1,-7,31.92,1,-6,30.02,1,-5,27.66,1,-4,24.84,1,-3,21.54,1,-2,17.74,1,-1,13.47,1,0,9.28,1,1,6.74,1,2,5.53,1,3,4.82,1,4,4.33,1,5,3.95,1,6,3.64,1,7,3.37,1,8,3.13,1,9,2.91,1,10,2.71,1,11,2.52,1,12,2.34,1,13,2.17,1,14,2.01,1,15,1.86,1,16,1.71,1,17,1.58,1,18,1.45,1,19,1.33,1,20,1.21,1,21,1.11,1,22,1.01,1,23,.91,1,24,.82,1,25,.74,2,-25,3.49,2,-24,6.88,2,-23,10.26,2,-22,13.6,2,-21,16.84,2,-20,19.96,2,-19,22.9,2,-18,25.63,2,-17,28.12,2,-16,30.32,2,-15,32.21,2,-14,33.76,2,-13,34.95,2,-12,35.75,2,-11,36.15,2,-10,36.14,2,-9,35.71,2,-8,34.85,2,-7,33.57,2,-6,31.86,2,-5,29.73,2,-4,27.21,2,-3,24.31,2,-2,21.1,2,-1,17.74,2,0,14.63,2,1,12.22,2,2,10.55,2,3,9.37,2,4,8.49,2,5,7.78,2,6,7.18,2,7,6.66,2,8,6.19,2,9,5.76,2,10,5.36,2,11,4.98,2,12,4.63,2,13,4.3,2,14,3.98,2,15,3.68,2,16,3.4,2,17,3.13,2,18,2.87,2,19,2.63,2,20,2.4,2,21,2.19,2,22,1.99,2,23,1.8,2,24,1.63,2,25,1.47,3,-25,3.65,3,-24,7.06,3,-23,10.46,3,-22,13.82,3,-21,17.1,3,-20,20.25,3,-19,23.23,3,-18,26.01,3,-17,28.55,3,-16,30.82,3,-15,32.78,3,-14,34.42,3,-13,35.69,3,-12,36.59,3,-11,37.11,3,-10,37.22,3,-9,36.92,3,-8,36.22,3,-7,35.12,3,-6,33.62,3,-5,31.75,3,-4,29.53,3,-3,27.02,3,-2,24.31,3,-1,21.54,3,0,18.95,3,1,16.72,3,2,14.93,3,3,13.51,3,4,12.35,3,5,11.38,3,6,10.54,3,7,9.79,3,8,9.11,3,9,8.49,3,10,7.9,3,11,7.35,3,12,6.83,3,13,6.34,3,14,5.87,3,15,5.43,3,16,5.01,3,17,4.61,3,18,4.23,3,19,3.87,3,20,3.54,3,21,3.22,3,22,2.93,3,23,2.65,3,24,2.4,3,25,2.16,4,-25,3.72,4,-24,7.13,4,-23,10.54,4,-22,13.92,4,-21,17.21,4,-20,20.39,4,-19,23.41,4,-18,26.24,4,-17,28.83,4,-16,31.15,4,-15,33.18,4,-14,34.89,4,-13,36.26,4,-12,37.26,4,-11,37.89,4,-10,38.13,4,-9,37.98,4,-8,37.44,4,-7,36.52,4,-6,35.24,4,-5,33.62,4,-4,31.69,4,-3,29.53,4,-2,27.21,4,-1,24.84,4,0,22.57,4,1,20.51,4,2,18.72,4,3,17.17,4,4,15.85,4,5,14.68,4,6,13.65,4,7,12.71,4,8,11.85,4,9,11.04,4,10,10.29,4,11,9.58,4,12,8.9,4,13,8.26,4,14,7.65,4,15,7.07,4,16,6.52,4,17,6,4,18,5.51,4,19,5.04,4,20,4.6,4,21,4.19,4,22,3.8,4,23,3.44,4,24,3.11,4,25,2.8,5,-25,3.68,5,-24,7.08,5,-23,10.5,5,-22,13.88,5,-21,17.19,5,-20,20.38,5,-19,23.43,5,-18,26.29,5,-17,28.92,5,-16,31.3,5,-15,33.39,5,-14,35.18,5,-13,36.63,5,-12,37.73,5,-11,38.47,5,-10,38.84,5,-9,38.83,5,-8,38.46,5,-7,37.73,5,-6,36.65,5,-5,35.27,5,-4,33.62,5,-3,31.75,5,-2,29.73,5,-1,27.66,5,0,25.63,5,1,23.71,5,2,21.95,5,3,20.36,5,4,18.93,5,5,17.63,5,6,16.45,5,7,15.36,5,8,14.34,5,9,13.38,5,10,12.48,5,11,11.62,5,12,10.8,5,13,10.03,5,14,9.29,5,15,8.58,5,16,7.91,5,17,7.27,5,18,6.67,5,19,6.1,5,20,5.56,5,21,5.06,5,22,4.59,5,23,4.15,5,24,3.75,5,25,3.37,6,-25,3.54,6,-24,6.92,6,-23,10.32,6,-22,13.69,6,-21,17,6,-20,20.21,6,-19,23.27,6,-18,26.15,6,-17,28.82,6,-16,31.25,6,-15,33.4,6,-14,35.25,6,-13,36.79,6,-12,37.98,6,-11,38.83,6,-10,39.32,6,-9,39.46,6,-8,39.25,6,-7,38.69,6,-6,37.82,6,-5,36.65,6,-4,35.24,6,-3,33.62,6,-2,31.86,6,-1,30.02,6,0,28.18,6,1,26.38,6,2,24.67,6,3,23.08,6,4,21.59,6,5,20.2,6,6,18.91,6,7,17.69,6,8,16.55,6,9,15.46,6,10,14.43,6,11,13.44,6,12,12.5,6,13,11.6,6,14,10.74,6,15,9.92,6,16,9.14,6,17,8.4,6,18,7.7,6,19,7.03,6,20,6.41,6,21,5.82,6,22,5.27,6,23,4.77,6,24,4.29,6,25,3.86,7,-25,3.28,7,-24,6.64,7,-23,10.01,7,-22,13.36,7,-21,16.66,7,-20,19.86,7,-19,22.93,7,-18,25.83,7,-17,28.53,7,-16,30.99,7,-15,33.19,7,-14,35.11,7,-13,36.71,7,-12,38,7,-11,38.95,7,-10,39.56,7,-9,39.83,7,-8,39.77,7,-7,39.38,7,-6,38.69,7,-5,37.73,7,-4,36.52,7,-3,35.12,7,-2,33.57,7,-1,31.92,7,0,30.23,7,1,28.55,7,2,26.91,7,3,25.32,7,4,23.81,7,5,22.37,7,6,21,7,7,19.69,7,8,18.44,7,9,17.25,7,10,16.11,7,11,15.01,7,12,13.96,7,13,12.95,7,14,11.99,7,15,11.07,7,16,10.19,7,17,9.36,7,18,8.57,7,19,7.82,7,20,7.12,7,21,6.46,7,22,5.84,7,23,5.27,7,24,4.74,7,25,4.25,8,-25,2.92,8,-24,6.23,8,-23,9.56,8,-22,12.89,8,-21,16.16,8,-20,19.35,8,-19,22.41,8,-18,25.32,8,-17,28.03,8,-16,30.52,8,-15,32.76,8,-14,34.72,8,-13,36.4,8,-12,37.76,8,-11,38.81,8,-10,39.53,8,-9,39.92,8,-8,40,8,-7,39.77,8,-6,39.25,8,-5,38.46,8,-4,37.44,8,-3,36.22,8,-2,34.85,8,-1,33.37,8,0,31.82,8,1,30.24,8,2,28.66,8,3,27.11,8,4,25.59,8,5,24.12,8,6,22.7,8,7,21.32,8,8,20,8,9,18.72,8,10,17.49,8,11,16.3,8,12,15.16,8,13,14.06,8,14,13.01,8,15,12,8,16,11.04,8,17,10.13,8,18,9.26,8,19,8.44,8,20,7.67,8,21,6.95,8,22,6.27,8,23,5.65,8,24,5.07,8,25,4.54,9,-25,2.45,9,-24,5.7,9,-23,8.98,9,-22,12.26,9,-21,15.5,9,-20,18.66,9,-19,21.7,9,-18,24.6,9,-17,27.32,9,-16,29.82,9,-15,32.09,9,-14,34.1,9,-13,35.83,9,-12,37.26,9,-11,38.39,9,-10,39.21,9,-9,39.72,9,-8,39.92,9,-7,39.83,9,-6,39.46,9,-5,38.83,9,-4,37.98,9,-3,36.92,9,-2,35.71,9,-1,34.37,9,0,32.94,9,1,31.46,9,2,29.95,9,3,28.44,9,4,26.93,9,5,25.45,9,6,24,9,7,22.58,9,8,21.2,9,9,19.86,9,10,18.56,9,11,17.3,9,12,16.08,9,13,14.91,9,14,13.79,9,15,12.71,9,16,11.68,9,17,10.7,9,18,9.77,9,19,8.89,9,20,8.06,9,21,7.28,9,22,6.56,9,23,5.89,9,24,5.27,9,25,4.71,10,-25,1.86,10,-24,5.04,10,-23,8.26,10,-22,11.49,10,-21,14.68,10,-20,17.8,10,-19,20.81,10,-18,23.69,10,-17,26.4,10,-16,28.9,10,-15,31.19,10,-14,33.23,10,-13,35,10,-12,36.5,10,-11,37.7,10,-10,38.6,10,-9,39.21,10,-8,39.53,10,-7,39.56,10,-6,39.32,10,-5,38.84,10,-4,38.13,10,-3,37.22,10,-2,36.14,10,-1,34.93,10,0,33.62,10,1,32.23,10,2,30.79,10,3,29.32,10,4,27.84,10,5,26.36,10,6,24.9,10,7,23.46,10,8,22.04,10,9,20.65,10,10,19.3,10,11,17.99,10,12,16.72,10,13,15.49,10,14,14.3,10,15,13.17,10,16,12.08,10,17,11.05,10,18,10.07,10,19,9.14,10,20,8.27,10,21,7.46,10,22,6.7,10,23,5.99,10,24,5.35,10,25,4.76,11,-25,1.18,11,-24,4.28,11,-23,7.42,11,-22,10.57,11,-21,13.7,11,-20,16.76,11,-19,19.73,11,-18,22.58,11,-17,25.27,11,-16,27.77,11,-15,30.06,11,-14,32.11,11,-13,33.92,11,-12,35.46,11,-11,36.72,11,-10,37.7,11,-9,38.39,11,-8,38.81,11,-7,38.95,11,-6,38.83,11,-5,38.47,11,-4,37.89,11,-3,37.11,11,-2,36.15,11,-1,35.06,11,0,33.84,11,1,32.54,11,2,31.17,11,3,29.75,11,4,28.31,11,5,26.85,11,6,25.39,11,7,23.94,11,8,22.5,11,9,21.09,11,10,19.71,11,11,18.36,11,12,17.05,11,13,15.78,11,14,14.55,11,15,13.38,11,16,12.25,11,17,11.18,11,18,10.16,11,19,9.2,11,20,8.3,11,21,7.46,11,22,6.67,11,23,5.95,11,24,5.28,11,25,4.68,12,-25,.39,12,-24,3.4,12,-23,6.45,12,-22,9.52,12,-21,12.57,12,-20,15.57,12,-19,18.48,12,-18,21.28,12,-17,23.93,12,-16,26.41,12,-15,28.69,12,-14,30.75,12,-13,32.58,12,-12,34.15,12,-11,35.46,12,-10,36.5,12,-9,37.26,12,-8,37.76,12,-7,38,12,-6,37.98,12,-5,37.73,12,-4,37.26,12,-3,36.59,12,-2,35.75,12,-1,34.76,12,0,33.64,12,1,32.42,12,2,31.12,12,3,29.76,12,4,28.36,12,5,26.93,12,6,25.48,12,7,24.04,12,8,22.6,12,9,21.18,12,10,19.78,12,11,18.41,12,12,17.07,12,13,15.78,12,14,14.53,12,15,13.33,12,16,12.17,12,17,11.08,12,18,10.04,12,19,9.06,12,20,8.14,12,21,7.28,12,22,6.49,12,23,5.75,12,24,5.08,12,25,4.47,13,-25,-.48,13,-24,2.41,13,-23,5.36,13,-22,8.33,13,-21,11.3,13,-20,14.21,13,-19,17.06,13,-18,19.8,13,-17,22.4,13,-16,24.85,13,-15,27.11,13,-14,29.16,13,-13,30.99,13,-12,32.58,13,-11,33.92,13,-10,35,13,-9,35.83,13,-8,36.4,13,-7,36.71,13,-6,36.79,13,-5,36.63,13,-4,36.26,13,-3,35.69,13,-2,34.95,13,-1,34.05,13,0,33.02,13,1,31.88,13,2,30.65,13,3,29.35,13,4,28,13,5,26.6,13,6,25.19,13,7,23.76,13,8,22.33,13,9,20.92,13,10,19.52,13,11,18.14,13,12,16.8,13,13,15.49,13,14,14.23,13,15,13.02,13,16,11.86,13,17,10.75,13,18,9.7,13,19,8.72,13,20,7.79,13,21,6.93,13,22,6.14,13,23,5.41,13,24,4.74,13,25,4.13,14,-25,-1.43,14,-24,1.34,14,-23,4.17,14,-22,7.03,14,-21,9.89,14,-20,12.72,14,-19,15.48,14,-18,18.15,14,-17,20.69,14,-16,23.09,14,-15,25.31,14,-14,27.34,14,-13,29.16,14,-12,30.75,14,-11,32.11,14,-10,33.23,14,-9,34.1,14,-8,34.72,14,-7,35.11,14,-6,35.25,14,-5,35.18,14,-4,34.89,14,-3,34.42,14,-2,33.76,14,-1,32.95,14,0,32,14,1,30.94,14,2,29.78,14,3,28.54,14,4,27.24,14,5,25.89,14,6,24.51,14,7,23.12,14,8,21.71,14,9,20.31,14,10,18.93,14,11,17.56,14,12,16.23,14,13,14.93,14,14,13.67,14,15,12.46,14,16,11.3,14,17,10.2,14,18,9.16,14,19,8.18,14,20,7.26,14,21,6.41,14,22,5.63,14,23,4.91,14,24,4.26,14,25,3.67,15,-25,-2.46,15,-24,.18,15,-23,2.89,15,-22,5.63,15,-21,8.37,15,-20,11.09,15,-19,13.76,15,-18,16.34,15,-17,18.81,15,-16,21.14,15,-15,23.31,15,-14,25.31,15,-13,27.11,15,-12,28.69,15,-11,30.06,15,-10,31.19,15,-9,32.09,15,-8,32.76,15,-7,33.19,15,-6,33.4,15,-5,33.39,15,-4,33.18,15,-3,32.78,15,-2,32.21,15,-1,31.48,15,0,30.61,15,1,29.62,15,2,28.53,15,3,27.35,15,4,26.11,15,5,24.81,15,6,23.48,15,7,22.12,15,8,20.75,15,9,19.38,15,10,18.02,15,11,16.68,15,12,15.37,15,13,14.09,15,14,12.85,15,15,11.66,15,16,10.52,15,17,9.44,15,18,8.41,15,19,7.45,15,20,6.56,15,21,5.73,15,22,4.97,15,23,4.28,15,24,3.65,15,25,3.09,16,-25,-3.54,16,-24,-1.05,16,-23,1.52,16,-22,4.13,16,-21,6.75,16,-20,9.35,16,-19,11.91,16,-18,14.39,16,-17,16.77,16,-16,19.03,16,-15,21.14,16,-14,23.09,16,-13,24.85,16,-12,26.41,16,-11,27.77,16,-10,28.9,16,-9,29.82,16,-8,30.52,16,-7,30.99,16,-6,31.25,16,-5,31.3,16,-4,31.15,16,-3,30.82,16,-2,30.32,16,-1,29.66,16,0,28.86,16,1,27.95,16,2,26.92,16,3,25.81,16,4,24.63,16,5,23.39,16,6,22.11,16,7,20.8,16,8,19.47,16,9,18.15,16,10,16.82,16,11,15.52,16,12,14.24,16,13,12.99,16,14,11.78,16,15,10.62,16,16,9.51,16,17,8.46,16,18,7.47,16,19,6.54,16,20,5.68,16,21,4.89,16,22,4.16,16,23,3.51,16,24,2.92,16,25,2.4,17,-25,-4.67,17,-24,-2.33,17,-23,.09,17,-22,2.56,17,-21,5.04,17,-20,7.51,17,-19,9.95,17,-18,12.32,17,-17,14.6,17,-16,16.77,17,-15,18.81,17,-14,20.69,17,-13,22.4,17,-12,23.93,17,-11,25.27,17,-10,26.4,17,-9,27.32,17,-8,28.03,17,-7,28.53,17,-6,28.82,17,-5,28.92,17,-4,28.83,17,-3,28.55,17,-2,28.12,17,-1,27.52,17,0,26.8,17,1,25.95,17,2,24.99,17,3,23.94,17,4,22.83,17,5,21.65,17,6,20.42,17,7,19.17,17,8,17.9,17,9,16.62,17,10,15.35,17,11,14.09,17,12,12.85,17,13,11.65,17,14,10.49,17,15,9.37,17,16,8.31,17,17,7.3,17,18,6.35,17,19,5.47,17,20,4.65,17,21,3.91,17,22,3.23,17,23,2.62,17,24,2.08,17,25,1.6,18,-25,-5.83,18,-24,-3.64,18,-23,-1.39,18,-22,.92,18,-21,3.26,18,-20,5.59,18,-19,7.9,18,-18,10.15,18,-17,12.32,18,-16,14.39,18,-15,16.34,18,-14,18.15,18,-13,19.8,18,-12,21.28,18,-11,22.58,18,-10,23.69,18,-9,24.6,18,-8,25.32,18,-7,25.83,18,-6,26.15,18,-5,26.29,18,-4,26.24,18,-3,26.01,18,-2,25.63,18,-1,25.1,18,0,24.43,18,1,23.65,18,2,22.76,18,3,21.78,18,4,20.73,18,5,19.62,18,6,18.46,18,7,17.27,18,8,16.05,18,9,14.84,18,10,13.62,18,11,12.42,18,12,11.24,18,13,10.09,18,14,8.99,18,15,7.93,18,16,6.92,18,17,5.96,18,18,5.07,18,19,4.25,18,20,3.49,18,21,2.79,18,22,2.17,18,23,1.62,18,24,1.13,18,25,.72,19,-25,-7,19,-24,-4.98,19,-23,-2.89,19,-22,-.74,19,-21,1.43,19,-20,3.62,19,-19,5.78,19,-18,7.9,19,-17,9.95,19,-16,11.91,19,-15,13.76,19,-14,15.48,19,-13,17.06,19,-12,18.48,19,-11,19.73,19,-10,20.81,19,-9,21.7,19,-8,22.41,19,-7,22.93,19,-6,23.27,19,-5,23.43,19,-4,23.41,19,-3,23.23,19,-2,22.9,19,-1,22.42,19,0,21.82,19,1,21.1,19,2,20.27,19,3,19.36,19,4,18.37,19,5,17.33,19,6,16.24,19,7,15.11,19,8,13.97,19,9,12.82,19,10,11.67,19,11,10.53,19,12,9.42,19,13,8.34,19,14,7.3,19,15,6.3,19,16,5.36,19,17,4.47,19,18,3.65,19,19,2.89,19,20,2.19,19,21,1.57,19,22,1.01,19,23,.53,19,24,.11,19,25,-.25,20,-25,-8.16,20,-24,-6.33,20,-23,-4.41,20,-22,-2.43,20,-21,-.42,20,-20,1.6,20,-19,3.62,20,-18,5.59,20,-17,7.51,20,-16,9.35,20,-15,11.09,20,-14,12.72,20,-13,14.21,20,-12,15.57,20,-11,16.76,20,-10,17.8,20,-9,18.66,20,-8,19.35,20,-7,19.86,20,-6,20.21,20,-5,20.38,20,-4,20.39,20,-3,20.25,20,-2,19.96,20,-1,19.53,20,0,18.98,20,1,18.32,20,2,17.56,20,3,16.71,20,4,15.79,20,5,14.82,20,6,13.8,20,7,12.75,20,8,11.68,20,9,10.6,20,10,9.53,20,11,8.46,20,12,7.43,20,13,6.42,20,14,5.45,20,15,4.53,20,16,3.67,20,17,2.86,20,18,2.11,20,19,1.42,20,20,.8,20,21,.25,20,22,-.23,20,23,-.64,20,24,-.99,20,25,-1.27,21,-25,-9.31,21,-24,-7.66,21,-23,-5.92,21,-22,-4.12,21,-21,-2.28,21,-20,-.42,21,-19,1.43,21,-18,3.26,21,-17,5.04,21,-16,6.75,21,-15,8.37,21,-14,9.89,21,-13,11.3,21,-12,12.57,21,-11,13.7,21,-10,14.68,21,-9,15.5,21,-8,16.16,21,-7,16.66,21,-6,17,21,-5,17.19,21,-4,17.21,21,-3,17.1,21,-2,16.84,21,-1,16.46,21,0,15.96,21,1,15.35,21,2,14.66,21,3,13.88,21,4,13.03,21,5,12.13,21,6,11.18,21,7,10.21,21,8,9.21,21,9,8.21,21,10,7.22,21,11,6.24,21,12,5.29,21,13,4.36,21,14,3.48,21,15,2.64,21,16,1.86,21,17,1.13,21,18,.47,21,19,-.14,21,20,-.67,21,21,-1.14,21,22,-1.54,21,23,-1.87,21,24,-2.14,21,25,-2.34,22,-25,-10.42,22,-24,-8.95,22,-23,-7.4,22,-22,-5.78,22,-21,-4.12,22,-20,-2.43,22,-19,-.74,22,-18,.92,22,-17,2.56,22,-16,4.13,22,-15,5.63,22,-14,7.03,22,-13,8.33,22,-12,9.52,22,-11,10.57,22,-10,11.49,22,-9,12.26,22,-8,12.89,22,-7,13.36,22,-6,13.69,22,-5,13.88,22,-4,13.92,22,-3,13.82,22,-2,13.6,22,-1,13.25,22,0,12.8,22,1,12.25,22,2,11.61,22,3,10.89,22,4,10.12,22,5,9.29,22,6,8.42,22,7,7.52,22,8,6.61,22,9,5.7,22,10,4.79,22,11,3.9,22,12,3.03,22,13,2.2,22,14,1.4,22,15,.66,22,16,-.04,22,17,-.67,22,18,-1.25,22,19,-1.76,22,20,-2.2,22,21,-2.58,22,22,-2.89,22,23,-3.13,22,24,-3.31,22,25,-3.43,23,-25,-11.47,23,-24,-10.2,23,-23,-8.83,23,-22,-7.4,23,-21,-5.92,23,-20,-4.41,23,-19,-2.89,23,-18,-1.39,23,-17,.09,23,-16,1.52,23,-15,2.89,23,-14,4.17,23,-13,5.36,23,-12,6.45,23,-11,7.42,23,-10,8.26,23,-9,8.98,23,-8,9.56,23,-7,10.01,23,-6,10.32,23,-5,10.5,23,-4,10.54,23,-3,10.46,23,-2,10.26,23,-1,9.95,23,0,9.54,23,1,9.04,23,2,8.46,23,3,7.81,23,4,7.1,23,5,6.34,23,6,5.55,23,7,4.74,23,8,3.92,23,9,3.09,23,10,2.27,23,11,1.47,23,12,.7,23,13,-.04,23,14,-.74,23,15,-1.39,23,16,-1.99,23,17,-2.53,23,18,-3,23,19,-3.42,23,20,-3.77,23,21,-4.05,23,22,-4.27,23,23,-4.42,23,24,-4.5,23,25,-4.53,24,-25,-12.46,24,-24,-11.37,24,-23,-10.2,24,-22,-8.95,24,-21,-7.66,24,-20,-6.33,24,-19,-4.98,24,-18,-3.64,24,-17,-2.33,24,-16,-1.05,24,-15,.18,24,-14,1.34,24,-13,2.41,24,-12,3.4,24,-11,4.28,24,-10,5.04,24,-9,5.7,24,-8,6.23,24,-7,6.64,24,-6,6.92,24,-5,7.08,24,-4,7.13,24,-3,7.06,24,-2,6.88,24,-1,6.6,24,0,6.23,24,1,5.78,24,2,5.25,24,3,4.66,24,4,4.02,24,5,3.34,24,6,2.63,24,7,1.9,24,8,1.16,24,9,.42,24,10,-.3,24,11,-1.01,24,12,-1.68,24,13,-2.32,24,14,-2.92,24,15,-3.47,24,16,-3.96,24,17,-4.4,24,18,-4.78,24,19,-5.09,24,20,-5.34,24,21,-5.52,24,22,-5.64,24,23,-5.69,24,24,-5.69,24,25,-5.62,25,-25,-13.36,25,-24,-12.46,25,-23,-11.47,25,-22,-10.42,25,-21,-9.31,25,-20,-8.16,25,-19,-7,25,-18,-5.83,25,-17,-4.67,25,-16,-3.54,25,-15,-2.46,25,-14,-1.43,25,-13,-.48,25,-12,.39,25,-11,1.18,25,-10,1.86,25,-9,2.45,25,-8,2.92,25,-7,3.28,25,-6,3.54,25,-5,3.68,25,-4,3.72,25,-3,3.65,25,-2,3.49,25,-1,3.24,25,0,2.9,25,1,2.5,25,2,2.02,25,3,1.49,25,4,.92,25,5,.31,25,6,-.32,25,7,-.97,25,8,-1.62,25,9,-2.26,25,10,-2.89,25,11,-3.5,25,12,-4.07,25,13,-4.61,25,14,-5.11,25,15,-5.55,25,16,-5.94,25,17,-6.27,25,18,-6.54,25,19,-6.75,25,20,-6.89,25,21,-6.97,25,22,-6.99,25,23,-6.94,25,24,-6.84,25,25,-6.68];/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const I1="152",Tt={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},yt={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},tr=0,X1=1,nr=2,v2=1,ir=2,Xe=3,tt=0,de=1,Fe=2,et=0,kt=1,q1=2,Y1=3,j1=4,rr=5,Ht=100,sr=101,ar=102,K1=103,Z1=104,or=200,lr=201,cr=202,ur=203,x2=204,M2=205,hr=206,dr=207,fr=208,pr=209,mr=210,_r=0,gr=1,vr=2,b1=3,xr=4,Mr=5,Sr=6,Er=7,S2=0,Tr=1,yr=2,Ye=0,br=1,Ar=2,wr=3,Rr=4,Cr=5,E2=300,qt=301,Yt=302,A1=303,w1=304,On=306,R1=1e3,Le=1001,C1=1002,ue=1003,$1=1004,Yn=1005,Se=1006,Lr=1007,sn=1008,vt=1009,Pr=1010,Dr=1011,T2=1012,Ur=1013,ft=1014,pt=1015,an=1016,Ir=1017,Nr=1018,Wt=1020,Fr=1021,Pe=1023,Or=1024,Br=1025,mt=1026,jt=1027,zr=1028,Gr=1029,Hr=1030,Vr=1031,kr=1033,jn=33776,Kn=33777,Zn=33778,$n=33779,J1=35840,Q1=35841,ei=35842,ti=35843,Wr=36196,ni=37492,ii=37496,ri=37808,si=37809,ai=37810,oi=37811,li=37812,ci=37813,ui=37814,hi=37815,di=37816,fi=37817,pi=37818,mi=37819,_i=37820,gi=37821,Jn=36492,Xr=36283,vi=36284,xi=36285,Mi=36286,y2=3e3,_t=3001,qr=3200,Yr=3201,jr=0,Kr=1,gt="",b0="srgb",Oe="srgb-linear",b2="display-p3",Qn=7680,Zr=519,Si=35044,Ei="300 es",L1=1035;class Et{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[e]===void 0&&(n[e]=[]),n[e].indexOf(t)===-1&&n[e].push(t)}hasEventListener(e,t){if(this._listeners===void 0)return!1;const n=this._listeners;return n[e]!==void 0&&n[e].indexOf(t)!==-1}removeEventListener(e,t){if(this._listeners===void 0)return;const r=this._listeners[e];if(r!==void 0){const s=r.indexOf(t);s!==-1&&r.splice(s,1)}}dispatchEvent(e){if(this._listeners===void 0)return;const n=this._listeners[e.type];if(n!==void 0){e.target=this;const r=n.slice(0);for(let s=0,o=r.length;s<o;s++)r[s].call(this,e);e.target=null}}}const se=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],e1=Math.PI/180,P1=180/Math.PI;function on(){const i=Math.random()*4294967295|0,e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(se[i&255]+se[i>>8&255]+se[i>>16&255]+se[i>>24&255]+"-"+se[e&255]+se[e>>8&255]+"-"+se[e>>16&15|64]+se[e>>24&255]+"-"+se[t&63|128]+se[t>>8&255]+"-"+se[t>>16&255]+se[t>>24&255]+se[n&255]+se[n>>8&255]+se[n>>16&255]+se[n>>24&255]).toLowerCase()}function he(i,e,t){return Math.max(e,Math.min(t,i))}function $r(i,e){return(i%e+e)%e}function t1(i,e,t){return(1-t)*i+t*e}function Ti(i){return(i&i-1)===0&&i!==0}function Jr(i){return Math.pow(2,Math.floor(Math.log(i)/Math.LN2))}function dn(i,e){switch(e.constructor){case Float32Array:return i;case Uint16Array:return i/65535;case Uint8Array:return i/255;case Int16Array:return Math.max(i/32767,-1);case Int8Array:return Math.max(i/127,-1);default:throw new Error("Invalid component type.")}}function me(i,e){switch(e.constructor){case Float32Array:return i;case Uint16Array:return Math.round(i*65535);case Uint8Array:return Math.round(i*255);case Int16Array:return Math.round(i*32767);case Int8Array:return Math.round(i*127);default:throw new Error("Invalid component type.")}}class I0{constructor(e=0,t=0){I0.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,r=e.elements;return this.x=r[0]*t+r[3]*n+r[6],this.y=r[1]*t+r[4]*n+r[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(he(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),r=Math.sin(t),s=this.x-e.x,o=this.y-e.y;return this.x=s*n-o*r+e.x,this.y=s*r+o*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class U0{constructor(){U0.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1]}set(e,t,n,r,s,o,a,u,l){const h=this.elements;return h[0]=e,h[1]=r,h[2]=a,h[3]=t,h[4]=s,h[5]=u,h[6]=n,h[7]=o,h[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,r=t.elements,s=this.elements,o=n[0],a=n[3],u=n[6],l=n[1],h=n[4],f=n[7],d=n[2],m=n[5],v=n[8],x=r[0],p=r[3],c=r[6],y=r[1],M=r[4],L=r[7],T=r[2],R=r[5],U=r[8];return s[0]=o*x+a*y+u*T,s[3]=o*p+a*M+u*R,s[6]=o*c+a*L+u*U,s[1]=l*x+h*y+f*T,s[4]=l*p+h*M+f*R,s[7]=l*c+h*L+f*U,s[2]=d*x+m*y+v*T,s[5]=d*p+m*M+v*R,s[8]=d*c+m*L+v*U,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],r=e[2],s=e[3],o=e[4],a=e[5],u=e[6],l=e[7],h=e[8];return t*o*h-t*a*l-n*s*h+n*a*u+r*s*l-r*o*u}invert(){const e=this.elements,t=e[0],n=e[1],r=e[2],s=e[3],o=e[4],a=e[5],u=e[6],l=e[7],h=e[8],f=h*o-a*l,d=a*u-h*s,m=l*s-o*u,v=t*f+n*d+r*m;if(v===0)return this.set(0,0,0,0,0,0,0,0,0);const x=1/v;return e[0]=f*x,e[1]=(r*l-h*n)*x,e[2]=(a*n-r*o)*x,e[3]=d*x,e[4]=(h*t-r*u)*x,e[5]=(r*s-a*t)*x,e[6]=m*x,e[7]=(n*u-l*t)*x,e[8]=(o*t-n*s)*x,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,r,s,o,a){const u=Math.cos(s),l=Math.sin(s);return this.set(n*u,n*l,-n*(u*o+l*a)+o+e,-r*l,r*u,-r*(-l*o+u*a)+a+t,0,0,1),this}scale(e,t){return this.premultiply(n1.makeScale(e,t)),this}rotate(e){return this.premultiply(n1.makeRotation(-e)),this}translate(e,t){return this.premultiply(n1.makeTranslation(e,t)),this}makeTranslation(e,t){return this.set(1,0,e,0,1,t,0,0,1),this}makeRotation(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,n,t,0,0,0,1),this}makeScale(e,t){return this.set(e,0,0,0,t,0,0,0,1),this}equals(e){const t=this.elements,n=e.elements;for(let r=0;r<9;r++)if(t[r]!==n[r])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return new this.constructor().fromArray(this.elements)}}const n1=new U0;function A2(i){for(let e=i.length-1;e>=0;--e)if(i[e]>=65535)return!0;return!1}function Fn(i){return document.createElementNS("http://www.w3.org/1999/xhtml",i)}const yi={};function rn(i){i in yi||(yi[i]=!0,console.warn(i))}function Xt(i){return i<.04045?i*.0773993808:Math.pow(i*.9478672986+.0521327014,2.4)}function i1(i){return i<.0031308?i*12.92:1.055*Math.pow(i,.41666)-.055}const Qr=new U0().fromArray([.8224621,.0331941,.0170827,.177538,.9668058,.0723974,-1e-7,1e-7,.9105199]),es=new U0().fromArray([1.2249401,-.0420569,-.0196376,-.2249404,1.0420571,-.0786361,1e-7,0,1.0982735]);function ts(i){return i.convertSRGBToLinear().applyMatrix3(es)}function ns(i){return i.applyMatrix3(Qr).convertLinearToSRGB()}const is={[Oe]:i=>i,[b0]:i=>i.convertSRGBToLinear(),[b2]:ts},rs={[Oe]:i=>i,[b0]:i=>i.convertLinearToSRGB(),[b2]:ns},be={enabled:!0,get legacyMode(){return console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."),!this.enabled},set legacyMode(i){console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."),this.enabled=!i},get workingColorSpace(){return Oe},set workingColorSpace(i){console.warn("THREE.ColorManagement: .workingColorSpace is readonly.")},convert:function(i,e,t){if(this.enabled===!1||e===t||!e||!t)return i;const n=is[e],r=rs[t];if(n===void 0||r===void 0)throw new Error(`Unsupported color space conversion, "${e}" to "${t}".`);return r(n(i))},fromWorkingColorSpace:function(i,e){return this.convert(i,this.workingColorSpace,e)},toWorkingColorSpace:function(i,e){return this.convert(i,e,this.workingColorSpace)}};let bt;class w2{static getDataURL(e){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement>"u")return e.src;let t;if(e instanceof HTMLCanvasElement)t=e;else{bt===void 0&&(bt=Fn("canvas")),bt.width=e.width,bt.height=e.height;const n=bt.getContext("2d");e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0,e.width,e.height),t=bt}return t.width>2048||t.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e),t.toDataURL("image/jpeg",.6)):t.toDataURL("image/png")}static sRGBToLinear(e){if(typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&e instanceof ImageBitmap){const t=Fn("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const r=n.getImageData(0,0,e.width,e.height),s=r.data;for(let o=0;o<s.length;o++)s[o]=Xt(s[o]/255)*255;return n.putImageData(r,0,0),t}else if(e.data){const t=e.data.slice(0);for(let n=0;n<t.length;n++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[n]=Math.floor(Xt(t[n]/255)*255):t[n]=Xt(t[n]);return{data:t,width:e.width,height:e.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}class R2{constructor(e=null){this.isSource=!0,this.uuid=on(),this.data=e,this.version=0}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.images[this.uuid]!==void 0)return e.images[this.uuid];const n={uuid:this.uuid,url:""},r=this.data;if(r!==null){let s;if(Array.isArray(r)){s=[];for(let o=0,a=r.length;o<a;o++)r[o].isDataTexture?s.push(r1(r[o].image)):s.push(r1(r[o]))}else s=r1(r);n.url=s}return t||(e.images[this.uuid]=n),n}}function r1(i){return typeof HTMLImageElement<"u"&&i instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&i instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&i instanceof ImageBitmap?w2.getDataURL(i):i.data?{data:Array.from(i.data),width:i.width,height:i.height,type:i.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let ss=0;class ve extends Et{constructor(e=ve.DEFAULT_IMAGE,t=ve.DEFAULT_MAPPING,n=Le,r=Le,s=Se,o=sn,a=Pe,u=vt,l=ve.DEFAULT_ANISOTROPY,h=gt){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:ss++}),this.uuid=on(),this.name="",this.source=new R2(e),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=n,this.wrapT=r,this.magFilter=s,this.minFilter=o,this.anisotropy=l,this.format=a,this.internalFormat=null,this.type=u,this.offset=new I0(0,0),this.repeat=new I0(1,1),this.center=new I0(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new U0,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,typeof h=="string"?this.colorSpace=h:(rn("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=h===_t?b0:gt),this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.colorSpace=e.colorSpace,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),t||(e.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==E2)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case R1:e.x=e.x-Math.floor(e.x);break;case Le:e.x=e.x<0?0:1;break;case C1:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case R1:e.y=e.y-Math.floor(e.y);break;case Le:e.y=e.y<0?0:1;break;case C1:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}get encoding(){return rn("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace===b0?_t:y2}set encoding(e){rn("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=e===_t?b0:gt}}ve.DEFAULT_IMAGE=null;ve.DEFAULT_MAPPING=E2;ve.DEFAULT_ANISOTROPY=1;class ne{constructor(e=0,t=0,n=0,r=1){ne.prototype.isVector4=!0,this.x=e,this.y=t,this.z=n,this.w=r}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,r){return this.x=e,this.y=t,this.z=n,this.w=r,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,r=this.z,s=this.w,o=e.elements;return this.x=o[0]*t+o[4]*n+o[8]*r+o[12]*s,this.y=o[1]*t+o[5]*n+o[9]*r+o[13]*s,this.z=o[2]*t+o[6]*n+o[10]*r+o[14]*s,this.w=o[3]*t+o[7]*n+o[11]*r+o[15]*s,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,n,r,s;const u=e.elements,l=u[0],h=u[4],f=u[8],d=u[1],m=u[5],v=u[9],x=u[2],p=u[6],c=u[10];if(Math.abs(h-d)<.01&&Math.abs(f-x)<.01&&Math.abs(v-p)<.01){if(Math.abs(h+d)<.1&&Math.abs(f+x)<.1&&Math.abs(v+p)<.1&&Math.abs(l+m+c-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;const M=(l+1)/2,L=(m+1)/2,T=(c+1)/2,R=(h+d)/4,U=(f+x)/4,k=(v+p)/4;return M>L&&M>T?M<.01?(n=0,r=.707106781,s=.707106781):(n=Math.sqrt(M),r=R/n,s=U/n):L>T?L<.01?(n=.707106781,r=0,s=.707106781):(r=Math.sqrt(L),n=R/r,s=k/r):T<.01?(n=.707106781,r=.707106781,s=0):(s=Math.sqrt(T),n=U/s,r=k/s),this.set(n,r,s,t),this}let y=Math.sqrt((p-v)*(p-v)+(f-x)*(f-x)+(d-h)*(d-h));return Math.abs(y)<.001&&(y=1),this.x=(p-v)/y,this.y=(f-x)/y,this.z=(d-h)/y,this.w=Math.acos((l+m+c-1)/2),this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class xt extends Et{constructor(e=1,t=1,n={}){super(),this.isWebGLRenderTarget=!0,this.width=e,this.height=t,this.depth=1,this.scissor=new ne(0,0,e,t),this.scissorTest=!1,this.viewport=new ne(0,0,e,t);const r={width:e,height:t,depth:1};n.encoding!==void 0&&(rn("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace."),n.colorSpace=n.encoding===_t?b0:gt),this.texture=new ve(r,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=n.generateMipmaps!==void 0?n.generateMipmaps:!1,this.texture.internalFormat=n.internalFormat!==void 0?n.internalFormat:null,this.texture.minFilter=n.minFilter!==void 0?n.minFilter:Se,this.depthBuffer=n.depthBuffer!==void 0?n.depthBuffer:!0,this.stencilBuffer=n.stencilBuffer!==void 0?n.stencilBuffer:!1,this.depthTexture=n.depthTexture!==void 0?n.depthTexture:null,this.samples=n.samples!==void 0?n.samples:0}setSize(e,t,n=1){(this.width!==e||this.height!==t||this.depth!==n)&&(this.width=e,this.height=t,this.depth=n,this.texture.image.width=e,this.texture.image.height=t,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.texture.isRenderTargetTexture=!0;const t=Object.assign({},e.texture.image);return this.texture.source=new R2(t),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class C2 extends ve{constructor(e=null,t=1,n=1,r=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:n,depth:r},this.magFilter=ue,this.minFilter=ue,this.wrapR=Le,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class as extends ve{constructor(e=null,t=1,n=1,r=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:n,depth:r},this.magFilter=ue,this.minFilter=ue,this.wrapR=Le,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Mt{constructor(e=0,t=0,n=0,r=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=n,this._w=r}static slerpFlat(e,t,n,r,s,o,a){let u=n[r+0],l=n[r+1],h=n[r+2],f=n[r+3];const d=s[o+0],m=s[o+1],v=s[o+2],x=s[o+3];if(a===0){e[t+0]=u,e[t+1]=l,e[t+2]=h,e[t+3]=f;return}if(a===1){e[t+0]=d,e[t+1]=m,e[t+2]=v,e[t+3]=x;return}if(f!==x||u!==d||l!==m||h!==v){let p=1-a;const c=u*d+l*m+h*v+f*x,y=c>=0?1:-1,M=1-c*c;if(M>Number.EPSILON){const T=Math.sqrt(M),R=Math.atan2(T,c*y);p=Math.sin(p*R)/T,a=Math.sin(a*R)/T}const L=a*y;if(u=u*p+d*L,l=l*p+m*L,h=h*p+v*L,f=f*p+x*L,p===1-a){const T=1/Math.sqrt(u*u+l*l+h*h+f*f);u*=T,l*=T,h*=T,f*=T}}e[t]=u,e[t+1]=l,e[t+2]=h,e[t+3]=f}static multiplyQuaternionsFlat(e,t,n,r,s,o){const a=n[r],u=n[r+1],l=n[r+2],h=n[r+3],f=s[o],d=s[o+1],m=s[o+2],v=s[o+3];return e[t]=a*v+h*f+u*m-l*d,e[t+1]=u*v+h*d+l*f-a*m,e[t+2]=l*v+h*m+a*d-u*f,e[t+3]=h*v-a*f-u*d-l*m,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,r){return this._x=e,this._y=t,this._z=n,this._w=r,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t){const n=e._x,r=e._y,s=e._z,o=e._order,a=Math.cos,u=Math.sin,l=a(n/2),h=a(r/2),f=a(s/2),d=u(n/2),m=u(r/2),v=u(s/2);switch(o){case"XYZ":this._x=d*h*f+l*m*v,this._y=l*m*f-d*h*v,this._z=l*h*v+d*m*f,this._w=l*h*f-d*m*v;break;case"YXZ":this._x=d*h*f+l*m*v,this._y=l*m*f-d*h*v,this._z=l*h*v-d*m*f,this._w=l*h*f+d*m*v;break;case"ZXY":this._x=d*h*f-l*m*v,this._y=l*m*f+d*h*v,this._z=l*h*v+d*m*f,this._w=l*h*f-d*m*v;break;case"ZYX":this._x=d*h*f-l*m*v,this._y=l*m*f+d*h*v,this._z=l*h*v-d*m*f,this._w=l*h*f+d*m*v;break;case"YZX":this._x=d*h*f+l*m*v,this._y=l*m*f+d*h*v,this._z=l*h*v-d*m*f,this._w=l*h*f-d*m*v;break;case"XZY":this._x=d*h*f-l*m*v,this._y=l*m*f-d*h*v,this._z=l*h*v+d*m*f,this._w=l*h*f+d*m*v;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}return t!==!1&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,r=Math.sin(n);return this._x=e.x*r,this._y=e.y*r,this._z=e.z*r,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],r=t[4],s=t[8],o=t[1],a=t[5],u=t[9],l=t[2],h=t[6],f=t[10],d=n+a+f;if(d>0){const m=.5/Math.sqrt(d+1);this._w=.25/m,this._x=(h-u)*m,this._y=(s-l)*m,this._z=(o-r)*m}else if(n>a&&n>f){const m=2*Math.sqrt(1+n-a-f);this._w=(h-u)/m,this._x=.25*m,this._y=(r+o)/m,this._z=(s+l)/m}else if(a>f){const m=2*Math.sqrt(1+a-n-f);this._w=(s-l)/m,this._x=(r+o)/m,this._y=.25*m,this._z=(u+h)/m}else{const m=2*Math.sqrt(1+f-n-a);this._w=(o-r)/m,this._x=(s+l)/m,this._y=(u+h)/m,this._z=.25*m}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<Number.EPSILON?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(he(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const r=Math.min(1,t/n);return this.slerp(e,r),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,r=e._y,s=e._z,o=e._w,a=t._x,u=t._y,l=t._z,h=t._w;return this._x=n*h+o*a+r*l-s*u,this._y=r*h+o*u+s*a-n*l,this._z=s*h+o*l+n*u-r*a,this._w=o*h-n*a-r*u-s*l,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,r=this._y,s=this._z,o=this._w;let a=o*e._w+n*e._x+r*e._y+s*e._z;if(a<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,a=-a):this.copy(e),a>=1)return this._w=o,this._x=n,this._y=r,this._z=s,this;const u=1-a*a;if(u<=Number.EPSILON){const m=1-t;return this._w=m*o+t*this._w,this._x=m*n+t*this._x,this._y=m*r+t*this._y,this._z=m*s+t*this._z,this.normalize(),this._onChangeCallback(),this}const l=Math.sqrt(u),h=Math.atan2(l,a),f=Math.sin((1-t)*h)/l,d=Math.sin(t*h)/l;return this._w=o*f+this._w*d,this._x=n*f+this._x*d,this._y=r*f+this._y*d,this._z=s*f+this._z*d,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=Math.random(),t=Math.sqrt(1-e),n=Math.sqrt(e),r=2*Math.PI*Math.random(),s=2*Math.PI*Math.random();return this.set(t*Math.cos(r),n*Math.sin(s),n*Math.cos(s),t*Math.sin(r))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class D{constructor(e=0,t=0,n=0){D.prototype.isVector3=!0,this.x=e,this.y=t,this.z=n}set(e,t,n){return n===void 0&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(bi.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(bi.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,r=this.z,s=e.elements;return this.x=s[0]*t+s[3]*n+s[6]*r,this.y=s[1]*t+s[4]*n+s[7]*r,this.z=s[2]*t+s[5]*n+s[8]*r,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,r=this.z,s=e.elements,o=1/(s[3]*t+s[7]*n+s[11]*r+s[15]);return this.x=(s[0]*t+s[4]*n+s[8]*r+s[12])*o,this.y=(s[1]*t+s[5]*n+s[9]*r+s[13])*o,this.z=(s[2]*t+s[6]*n+s[10]*r+s[14])*o,this}applyQuaternion(e){const t=this.x,n=this.y,r=this.z,s=e.x,o=e.y,a=e.z,u=e.w,l=u*t+o*r-a*n,h=u*n+a*t-s*r,f=u*r+s*n-o*t,d=-s*t-o*n-a*r;return this.x=l*u+d*-s+h*-a-f*-o,this.y=h*u+d*-o+f*-s-l*-a,this.z=f*u+d*-a+l*-o-h*-s,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,r=this.z,s=e.elements;return this.x=s[0]*t+s[4]*n+s[8]*r,this.y=s[1]*t+s[5]*n+s[9]*r,this.z=s[2]*t+s[6]*n+s[10]*r,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,r=e.y,s=e.z,o=t.x,a=t.y,u=t.z;return this.x=r*u-s*a,this.y=s*o-n*u,this.z=n*a-r*o,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return s1.copy(this).projectOnVector(e),this.sub(s1)}reflect(e){return this.sub(s1.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(he(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,r=this.z-e.z;return t*t+n*n+r*r}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const r=Math.sin(t)*e;return this.x=r*Math.sin(n),this.y=Math.cos(t)*e,this.z=r*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),r=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=r,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=(Math.random()-.5)*2,t=Math.random()*Math.PI*2,n=Math.sqrt(1-e**2);return this.x=n*Math.cos(t),this.y=n*Math.sin(t),this.z=e,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const s1=new D,bi=new Mt;class ln{constructor(e=new D(1/0,1/0,1/0),t=new D(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t+=3)this.expandByPoint(Ge.fromArray(e,t));return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,n=e.count;t<n;t++)this.expandByPoint(Ge.fromBufferAttribute(e,t));return this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=Ge.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){if(e.updateWorldMatrix(!1,!1),e.boundingBox!==void 0)e.boundingBox===null&&e.computeBoundingBox(),At.copy(e.boundingBox),At.applyMatrix4(e.matrixWorld),this.union(At);else{const r=e.geometry;if(r!==void 0)if(t&&r.attributes!==void 0&&r.attributes.position!==void 0){const s=r.attributes.position;for(let o=0,a=s.count;o<a;o++)Ge.fromBufferAttribute(s,o).applyMatrix4(e.matrixWorld),this.expandByPoint(Ge)}else r.boundingBox===null&&r.computeBoundingBox(),At.copy(r.boundingBox),At.applyMatrix4(e.matrixWorld),this.union(At)}const n=e.children;for(let r=0,s=n.length;r<s;r++)this.expandByObject(n[r],t);return this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)}intersectsSphere(e){return this.clampPoint(e.center,Ge),Ge.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(Jt),fn.subVectors(this.max,Jt),wt.subVectors(e.a,Jt),Rt.subVectors(e.b,Jt),Ct.subVectors(e.c,Jt),Ke.subVectors(Rt,wt),Ze.subVectors(Ct,Rt),st.subVectors(wt,Ct);let t=[0,-Ke.z,Ke.y,0,-Ze.z,Ze.y,0,-st.z,st.y,Ke.z,0,-Ke.x,Ze.z,0,-Ze.x,st.z,0,-st.x,-Ke.y,Ke.x,0,-Ze.y,Ze.x,0,-st.y,st.x,0];return!a1(t,wt,Rt,Ct,fn)||(t=[1,0,0,0,1,0,0,0,1],!a1(t,wt,Rt,Ct,fn))?!1:(pn.crossVectors(Ke,Ze),t=[pn.x,pn.y,pn.z],a1(t,wt,Rt,Ct,fn))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,Ge).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=this.getSize(Ge).length()*.5),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(ze[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),ze[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),ze[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),ze[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),ze[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),ze[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),ze[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),ze[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(ze),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const ze=[new D,new D,new D,new D,new D,new D,new D,new D],Ge=new D,At=new ln,wt=new D,Rt=new D,Ct=new D,Ke=new D,Ze=new D,st=new D,Jt=new D,fn=new D,pn=new D,at=new D;function a1(i,e,t,n,r){for(let s=0,o=i.length-3;s<=o;s+=3){at.fromArray(i,s);const a=r.x*Math.abs(at.x)+r.y*Math.abs(at.y)+r.z*Math.abs(at.z),u=e.dot(at),l=t.dot(at),h=n.dot(at);if(Math.max(-Math.max(u,l,h),Math.min(u,l,h))>a)return!1}return!0}const os=new ln,Qt=new D,o1=new D;class Bn{constructor(e=new D,t=-1){this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;t!==void 0?n.copy(t):os.setFromPoints(e).getCenter(n);let r=0;for(let s=0,o=e.length;s<o;s++)r=Math.max(r,n.distanceToSquared(e[s]));return this.radius=Math.sqrt(r),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;Qt.subVectors(e,this.center);const t=Qt.lengthSq();if(t>this.radius*this.radius){const n=Math.sqrt(t),r=(n-this.radius)*.5;this.center.addScaledVector(Qt,r/n),this.radius+=r}return this}union(e){return e.isEmpty()?this:this.isEmpty()?(this.copy(e),this):(this.center.equals(e.center)===!0?this.radius=Math.max(this.radius,e.radius):(o1.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(Qt.copy(e.center).add(o1)),this.expandByPoint(Qt.copy(e.center).sub(o1))),this)}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const He=new D,l1=new D,mn=new D,$e=new D,c1=new D,_n=new D,u1=new D;class L2{constructor(e=new D,t=new D(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,He)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=He.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(He.copy(this.origin).addScaledVector(this.direction,t),He.distanceToSquared(e))}distanceSqToSegment(e,t,n,r){l1.copy(e).add(t).multiplyScalar(.5),mn.copy(t).sub(e).normalize(),$e.copy(this.origin).sub(l1);const s=e.distanceTo(t)*.5,o=-this.direction.dot(mn),a=$e.dot(this.direction),u=-$e.dot(mn),l=$e.lengthSq(),h=Math.abs(1-o*o);let f,d,m,v;if(h>0)if(f=o*u-a,d=o*a-u,v=s*h,f>=0)if(d>=-v)if(d<=v){const x=1/h;f*=x,d*=x,m=f*(f+o*d+2*a)+d*(o*f+d+2*u)+l}else d=s,f=Math.max(0,-(o*d+a)),m=-f*f+d*(d+2*u)+l;else d=-s,f=Math.max(0,-(o*d+a)),m=-f*f+d*(d+2*u)+l;else d<=-v?(f=Math.max(0,-(-o*s+a)),d=f>0?-s:Math.min(Math.max(-s,-u),s),m=-f*f+d*(d+2*u)+l):d<=v?(f=0,d=Math.min(Math.max(-s,-u),s),m=d*(d+2*u)+l):(f=Math.max(0,-(o*s+a)),d=f>0?s:Math.min(Math.max(-s,-u),s),m=-f*f+d*(d+2*u)+l);else d=o>0?-s:s,f=Math.max(0,-(o*d+a)),m=-f*f+d*(d+2*u)+l;return n&&n.copy(this.origin).addScaledVector(this.direction,f),r&&r.copy(l1).addScaledVector(mn,d),m}intersectSphere(e,t){He.subVectors(e.center,this.origin);const n=He.dot(this.direction),r=He.dot(He)-n*n,s=e.radius*e.radius;if(r>s)return null;const o=Math.sqrt(s-r),a=n-o,u=n+o;return u<0?null:a<0?this.at(u,t):this.at(a,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return n===null?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return t===0||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let n,r,s,o,a,u;const l=1/this.direction.x,h=1/this.direction.y,f=1/this.direction.z,d=this.origin;return l>=0?(n=(e.min.x-d.x)*l,r=(e.max.x-d.x)*l):(n=(e.max.x-d.x)*l,r=(e.min.x-d.x)*l),h>=0?(s=(e.min.y-d.y)*h,o=(e.max.y-d.y)*h):(s=(e.max.y-d.y)*h,o=(e.min.y-d.y)*h),n>o||s>r||((s>n||isNaN(n))&&(n=s),(o<r||isNaN(r))&&(r=o),f>=0?(a=(e.min.z-d.z)*f,u=(e.max.z-d.z)*f):(a=(e.max.z-d.z)*f,u=(e.min.z-d.z)*f),n>u||a>r)||((a>n||n!==n)&&(n=a),(u<r||r!==r)&&(r=u),r<0)?null:this.at(n>=0?n:r,t)}intersectsBox(e){return this.intersectBox(e,He)!==null}intersectTriangle(e,t,n,r,s){c1.subVectors(t,e),_n.subVectors(n,e),u1.crossVectors(c1,_n);let o=this.direction.dot(u1),a;if(o>0){if(r)return null;a=1}else if(o<0)a=-1,o=-o;else return null;$e.subVectors(this.origin,e);const u=a*this.direction.dot(_n.crossVectors($e,_n));if(u<0)return null;const l=a*this.direction.dot(c1.cross($e));if(l<0||u+l>o)return null;const h=-a*$e.dot(u1);return h<0?null:this.at(h/o,s)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class te{constructor(){te.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}set(e,t,n,r,s,o,a,u,l,h,f,d,m,v,x,p){const c=this.elements;return c[0]=e,c[4]=t,c[8]=n,c[12]=r,c[1]=s,c[5]=o,c[9]=a,c[13]=u,c[2]=l,c[6]=h,c[10]=f,c[14]=d,c[3]=m,c[7]=v,c[11]=x,c[15]=p,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new te().fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,r=1/Lt.setFromMatrixColumn(e,0).length(),s=1/Lt.setFromMatrixColumn(e,1).length(),o=1/Lt.setFromMatrixColumn(e,2).length();return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=0,t[4]=n[4]*s,t[5]=n[5]*s,t[6]=n[6]*s,t[7]=0,t[8]=n[8]*o,t[9]=n[9]*o,t[10]=n[10]*o,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,n=e.x,r=e.y,s=e.z,o=Math.cos(n),a=Math.sin(n),u=Math.cos(r),l=Math.sin(r),h=Math.cos(s),f=Math.sin(s);if(e.order==="XYZ"){const d=o*h,m=o*f,v=a*h,x=a*f;t[0]=u*h,t[4]=-u*f,t[8]=l,t[1]=m+v*l,t[5]=d-x*l,t[9]=-a*u,t[2]=x-d*l,t[6]=v+m*l,t[10]=o*u}else if(e.order==="YXZ"){const d=u*h,m=u*f,v=l*h,x=l*f;t[0]=d+x*a,t[4]=v*a-m,t[8]=o*l,t[1]=o*f,t[5]=o*h,t[9]=-a,t[2]=m*a-v,t[6]=x+d*a,t[10]=o*u}else if(e.order==="ZXY"){const d=u*h,m=u*f,v=l*h,x=l*f;t[0]=d-x*a,t[4]=-o*f,t[8]=v+m*a,t[1]=m+v*a,t[5]=o*h,t[9]=x-d*a,t[2]=-o*l,t[6]=a,t[10]=o*u}else if(e.order==="ZYX"){const d=o*h,m=o*f,v=a*h,x=a*f;t[0]=u*h,t[4]=v*l-m,t[8]=d*l+x,t[1]=u*f,t[5]=x*l+d,t[9]=m*l-v,t[2]=-l,t[6]=a*u,t[10]=o*u}else if(e.order==="YZX"){const d=o*u,m=o*l,v=a*u,x=a*l;t[0]=u*h,t[4]=x-d*f,t[8]=v*f+m,t[1]=f,t[5]=o*h,t[9]=-a*h,t[2]=-l*h,t[6]=m*f+v,t[10]=d-x*f}else if(e.order==="XZY"){const d=o*u,m=o*l,v=a*u,x=a*l;t[0]=u*h,t[4]=-f,t[8]=l*h,t[1]=d*f+x,t[5]=o*h,t[9]=m*f-v,t[2]=v*f-m,t[6]=a*h,t[10]=x*f+d}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(ls,e,cs)}lookAt(e,t,n){const r=this.elements;return _e.subVectors(e,t),_e.lengthSq()===0&&(_e.z=1),_e.normalize(),Je.crossVectors(n,_e),Je.lengthSq()===0&&(Math.abs(n.z)===1?_e.x+=1e-4:_e.z+=1e-4,_e.normalize(),Je.crossVectors(n,_e)),Je.normalize(),gn.crossVectors(_e,Je),r[0]=Je.x,r[4]=gn.x,r[8]=_e.x,r[1]=Je.y,r[5]=gn.y,r[9]=_e.y,r[2]=Je.z,r[6]=gn.z,r[10]=_e.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,r=t.elements,s=this.elements,o=n[0],a=n[4],u=n[8],l=n[12],h=n[1],f=n[5],d=n[9],m=n[13],v=n[2],x=n[6],p=n[10],c=n[14],y=n[3],M=n[7],L=n[11],T=n[15],R=r[0],U=r[4],k=r[8],_=r[12],b=r[1],j=r[5],$=r[9],I=r[13],B=r[2],V=r[6],n0=r[10],Y=r[14],X=r[3],Z=r[7],e0=r[11],p0=r[15];return s[0]=o*R+a*b+u*B+l*X,s[4]=o*U+a*j+u*V+l*Z,s[8]=o*k+a*$+u*n0+l*e0,s[12]=o*_+a*I+u*Y+l*p0,s[1]=h*R+f*b+d*B+m*X,s[5]=h*U+f*j+d*V+m*Z,s[9]=h*k+f*$+d*n0+m*e0,s[13]=h*_+f*I+d*Y+m*p0,s[2]=v*R+x*b+p*B+c*X,s[6]=v*U+x*j+p*V+c*Z,s[10]=v*k+x*$+p*n0+c*e0,s[14]=v*_+x*I+p*Y+c*p0,s[3]=y*R+M*b+L*B+T*X,s[7]=y*U+M*j+L*V+T*Z,s[11]=y*k+M*$+L*n0+T*e0,s[15]=y*_+M*I+L*Y+T*p0,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],r=e[8],s=e[12],o=e[1],a=e[5],u=e[9],l=e[13],h=e[2],f=e[6],d=e[10],m=e[14],v=e[3],x=e[7],p=e[11],c=e[15];return v*(+s*u*f-r*l*f-s*a*d+n*l*d+r*a*m-n*u*m)+x*(+t*u*m-t*l*d+s*o*d-r*o*m+r*l*h-s*u*h)+p*(+t*l*f-t*a*m-s*o*f+n*o*m+s*a*h-n*l*h)+c*(-r*a*h-t*u*f+t*a*d+r*o*f-n*o*d+n*u*h)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const r=this.elements;return e.isVector3?(r[12]=e.x,r[13]=e.y,r[14]=e.z):(r[12]=e,r[13]=t,r[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],r=e[2],s=e[3],o=e[4],a=e[5],u=e[6],l=e[7],h=e[8],f=e[9],d=e[10],m=e[11],v=e[12],x=e[13],p=e[14],c=e[15],y=f*p*l-x*d*l+x*u*m-a*p*m-f*u*c+a*d*c,M=v*d*l-h*p*l-v*u*m+o*p*m+h*u*c-o*d*c,L=h*x*l-v*f*l+v*a*m-o*x*m-h*a*c+o*f*c,T=v*f*u-h*x*u-v*a*d+o*x*d+h*a*p-o*f*p,R=t*y+n*M+r*L+s*T;if(R===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const U=1/R;return e[0]=y*U,e[1]=(x*d*s-f*p*s-x*r*m+n*p*m+f*r*c-n*d*c)*U,e[2]=(a*p*s-x*u*s+x*r*l-n*p*l-a*r*c+n*u*c)*U,e[3]=(f*u*s-a*d*s-f*r*l+n*d*l+a*r*m-n*u*m)*U,e[4]=M*U,e[5]=(h*p*s-v*d*s+v*r*m-t*p*m-h*r*c+t*d*c)*U,e[6]=(v*u*s-o*p*s-v*r*l+t*p*l+o*r*c-t*u*c)*U,e[7]=(o*d*s-h*u*s+h*r*l-t*d*l-o*r*m+t*u*m)*U,e[8]=L*U,e[9]=(v*f*s-h*x*s-v*n*m+t*x*m+h*n*c-t*f*c)*U,e[10]=(o*x*s-v*a*s+v*n*l-t*x*l-o*n*c+t*a*c)*U,e[11]=(h*a*s-o*f*s-h*n*l+t*f*l+o*n*m-t*a*m)*U,e[12]=T*U,e[13]=(h*x*r-v*f*r+v*n*d-t*x*d-h*n*p+t*f*p)*U,e[14]=(v*a*r-o*x*r-v*n*u+t*x*u+o*n*p-t*a*p)*U,e[15]=(o*f*r-h*a*r+h*n*u-t*f*u-o*n*d+t*a*d)*U,this}scale(e){const t=this.elements,n=e.x,r=e.y,s=e.z;return t[0]*=n,t[4]*=r,t[8]*=s,t[1]*=n,t[5]*=r,t[9]*=s,t[2]*=n,t[6]*=r,t[10]*=s,t[3]*=n,t[7]*=r,t[11]*=s,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],r=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,r))}makeTranslation(e,t,n){return this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),r=Math.sin(t),s=1-n,o=e.x,a=e.y,u=e.z,l=s*o,h=s*a;return this.set(l*o+n,l*a-r*u,l*u+r*a,0,l*a+r*u,h*a+n,h*u-r*o,0,l*u-r*a,h*u+r*o,s*u*u+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,r,s,o){return this.set(1,n,s,0,e,1,o,0,t,r,1,0,0,0,0,1),this}compose(e,t,n){const r=this.elements,s=t._x,o=t._y,a=t._z,u=t._w,l=s+s,h=o+o,f=a+a,d=s*l,m=s*h,v=s*f,x=o*h,p=o*f,c=a*f,y=u*l,M=u*h,L=u*f,T=n.x,R=n.y,U=n.z;return r[0]=(1-(x+c))*T,r[1]=(m+L)*T,r[2]=(v-M)*T,r[3]=0,r[4]=(m-L)*R,r[5]=(1-(d+c))*R,r[6]=(p+y)*R,r[7]=0,r[8]=(v+M)*U,r[9]=(p-y)*U,r[10]=(1-(d+x))*U,r[11]=0,r[12]=e.x,r[13]=e.y,r[14]=e.z,r[15]=1,this}decompose(e,t,n){const r=this.elements;let s=Lt.set(r[0],r[1],r[2]).length();const o=Lt.set(r[4],r[5],r[6]).length(),a=Lt.set(r[8],r[9],r[10]).length();this.determinant()<0&&(s=-s),e.x=r[12],e.y=r[13],e.z=r[14],Ae.copy(this);const l=1/s,h=1/o,f=1/a;return Ae.elements[0]*=l,Ae.elements[1]*=l,Ae.elements[2]*=l,Ae.elements[4]*=h,Ae.elements[5]*=h,Ae.elements[6]*=h,Ae.elements[8]*=f,Ae.elements[9]*=f,Ae.elements[10]*=f,t.setFromRotationMatrix(Ae),n.x=s,n.y=o,n.z=a,this}makePerspective(e,t,n,r,s,o){const a=this.elements,u=2*s/(t-e),l=2*s/(n-r),h=(t+e)/(t-e),f=(n+r)/(n-r),d=-(o+s)/(o-s),m=-2*o*s/(o-s);return a[0]=u,a[4]=0,a[8]=h,a[12]=0,a[1]=0,a[5]=l,a[9]=f,a[13]=0,a[2]=0,a[6]=0,a[10]=d,a[14]=m,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this}makeOrthographic(e,t,n,r,s,o){const a=this.elements,u=1/(t-e),l=1/(n-r),h=1/(o-s),f=(t+e)*u,d=(n+r)*l,m=(o+s)*h;return a[0]=2*u,a[4]=0,a[8]=0,a[12]=-f,a[1]=0,a[5]=2*l,a[9]=0,a[13]=-d,a[2]=0,a[6]=0,a[10]=-2*h,a[14]=-m,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let r=0;r<16;r++)if(t[r]!==n[r])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}const Lt=new D,Ae=new te,ls=new D(0,0,0),cs=new D(1,1,1),Je=new D,gn=new D,_e=new D,Ai=new te,wi=new Mt;class zn{constructor(e=0,t=0,n=0,r=zn.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=t,this._z=n,this._order=r}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,r=this._order){return this._x=e,this._y=t,this._z=n,this._order=r,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const r=e.elements,s=r[0],o=r[4],a=r[8],u=r[1],l=r[5],h=r[9],f=r[2],d=r[6],m=r[10];switch(t){case"XYZ":this._y=Math.asin(he(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-h,m),this._z=Math.atan2(-o,s)):(this._x=Math.atan2(d,l),this._z=0);break;case"YXZ":this._x=Math.asin(-he(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(a,m),this._z=Math.atan2(u,l)):(this._y=Math.atan2(-f,s),this._z=0);break;case"ZXY":this._x=Math.asin(he(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-f,m),this._z=Math.atan2(-o,l)):(this._y=0,this._z=Math.atan2(u,s));break;case"ZYX":this._y=Math.asin(-he(f,-1,1)),Math.abs(f)<.9999999?(this._x=Math.atan2(d,m),this._z=Math.atan2(u,s)):(this._x=0,this._z=Math.atan2(-o,l));break;case"YZX":this._z=Math.asin(he(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(-h,l),this._y=Math.atan2(-f,s)):(this._x=0,this._y=Math.atan2(a,m));break;case"XZY":this._z=Math.asin(-he(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(d,l),this._y=Math.atan2(a,s)):(this._x=Math.atan2(-h,m),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,n===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return Ai.makeRotationFromQuaternion(e),this.setFromRotationMatrix(Ai,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return wi.setFromEuler(this),this.setFromQuaternion(wi,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}zn.DEFAULT_ORDER="XYZ";class P2{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let us=0;const Ri=new D,Pt=new Mt,Ve=new te,vn=new D,en=new D,hs=new D,ds=new Mt,Ci=new D(1,0,0),Li=new D(0,1,0),Pi=new D(0,0,1),fs={type:"added"},Di={type:"removed"};class fe extends Et{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:us++}),this.uuid=on(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=fe.DEFAULT_UP.clone();const e=new D,t=new zn,n=new Mt,r=new D(1,1,1);function s(){n.setFromEuler(t,!1)}function o(){t.setFromQuaternion(n,void 0,!1)}t._onChange(s),n._onChange(o),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:r},modelViewMatrix:{value:new te},normalMatrix:{value:new U0}}),this.matrix=new te,this.matrixWorld=new te,this.matrixAutoUpdate=fe.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.matrixWorldAutoUpdate=fe.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.layers=new P2,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return Pt.setFromAxisAngle(e,t),this.quaternion.multiply(Pt),this}rotateOnWorldAxis(e,t){return Pt.setFromAxisAngle(e,t),this.quaternion.premultiply(Pt),this}rotateX(e){return this.rotateOnAxis(Ci,e)}rotateY(e){return this.rotateOnAxis(Li,e)}rotateZ(e){return this.rotateOnAxis(Pi,e)}translateOnAxis(e,t){return Ri.copy(e).applyQuaternion(this.quaternion),this.position.add(Ri.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(Ci,e)}translateY(e){return this.translateOnAxis(Li,e)}translateZ(e){return this.translateOnAxis(Pi,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(Ve.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?vn.copy(e):vn.set(e,t,n);const r=this.parent;this.updateWorldMatrix(!0,!1),en.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Ve.lookAt(en,vn,this.up):Ve.lookAt(vn,en,this.up),this.quaternion.setFromRotationMatrix(Ve),r&&(Ve.extractRotation(r.matrixWorld),Pt.setFromRotationMatrix(Ve),this.quaternion.premultiply(Pt.invert()))}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.parent!==null&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(fs)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(Di)),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){for(let e=0;e<this.children.length;e++){const t=this.children[e];t.parent=null,t.dispatchEvent(Di)}return this.children.length=0,this}attach(e){return this.updateWorldMatrix(!0,!1),Ve.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),Ve.multiply(e.parent.matrixWorld)),e.applyMatrix4(Ve),this.add(e),e.updateWorldMatrix(!1,!0),this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,r=this.children.length;n<r;n++){const o=this.children[n].getObjectByProperty(e,t);if(o!==void 0)return o}}getObjectsByProperty(e,t){let n=[];this[e]===t&&n.push(this);for(let r=0,s=this.children.length;r<s;r++){const o=this.children[r].getObjectsByProperty(e,t);o.length>0&&(n=n.concat(o))}return n}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(en,e,hs),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(en,ds,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,r=t.length;n<r;n++)t[n].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let n=0,r=t.length;n<r;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,r=t.length;n<r;n++){const s=t[n];(s.matrixWorldAutoUpdate===!0||e===!0)&&s.updateMatrixWorld(e)}}updateWorldMatrix(e,t){const n=this.parent;if(e===!0&&n!==null&&n.matrixWorldAutoUpdate===!0&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),t===!0){const r=this.children;for(let s=0,o=r.length;s<o;s++){const a=r[s];a.matrixWorldAutoUpdate===!0&&a.updateWorldMatrix(!1,!0)}}}toJSON(e){const t=e===void 0||typeof e=="string",n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const r={};r.uuid=this.uuid,r.type=this.type,this.name!==""&&(r.name=this.name),this.castShadow===!0&&(r.castShadow=!0),this.receiveShadow===!0&&(r.receiveShadow=!0),this.visible===!1&&(r.visible=!1),this.frustumCulled===!1&&(r.frustumCulled=!1),this.renderOrder!==0&&(r.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(r.userData=this.userData),r.layers=this.layers.mask,r.matrix=this.matrix.toArray(),r.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(r.matrixAutoUpdate=!1),this.isInstancedMesh&&(r.type="InstancedMesh",r.count=this.count,r.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(r.instanceColor=this.instanceColor.toJSON()));function s(a,u){return a[u.uuid]===void 0&&(a[u.uuid]=u.toJSON(e)),u.uuid}if(this.isScene)this.background&&(this.background.isColor?r.background=this.background.toJSON():this.background.isTexture&&(r.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(r.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){r.geometry=s(e.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const u=a.shapes;if(Array.isArray(u))for(let l=0,h=u.length;l<h;l++){const f=u[l];s(e.shapes,f)}else s(e.shapes,u)}}if(this.isSkinnedMesh&&(r.bindMode=this.bindMode,r.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(e.skeletons,this.skeleton),r.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let u=0,l=this.material.length;u<l;u++)a.push(s(e.materials,this.material[u]));r.material=a}else r.material=s(e.materials,this.material);if(this.children.length>0){r.children=[];for(let a=0;a<this.children.length;a++)r.children.push(this.children[a].toJSON(e).object)}if(this.animations.length>0){r.animations=[];for(let a=0;a<this.animations.length;a++){const u=this.animations[a];r.animations.push(s(e.animations,u))}}if(t){const a=o(e.geometries),u=o(e.materials),l=o(e.textures),h=o(e.images),f=o(e.shapes),d=o(e.skeletons),m=o(e.animations),v=o(e.nodes);a.length>0&&(n.geometries=a),u.length>0&&(n.materials=u),l.length>0&&(n.textures=l),h.length>0&&(n.images=h),f.length>0&&(n.shapes=f),d.length>0&&(n.skeletons=d),m.length>0&&(n.animations=m),v.length>0&&(n.nodes=v)}return n.object=r,n;function o(a){const u=[];for(const l in a){const h=a[l];delete h.metadata,u.push(h)}return u}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.animations=e.animations,this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let n=0;n<e.children.length;n++){const r=e.children[n];this.add(r.clone())}return this}}fe.DEFAULT_UP=new D(0,1,0);fe.DEFAULT_MATRIX_AUTO_UPDATE=!0;fe.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const we=new D,ke=new D,h1=new D,We=new D,Dt=new D,Ut=new D,Ui=new D,d1=new D,f1=new D,p1=new D;let xn=!1;class Ce{constructor(e=new D,t=new D,n=new D){this.a=e,this.b=t,this.c=n}static getNormal(e,t,n,r){r.subVectors(n,t),we.subVectors(e,t),r.cross(we);const s=r.lengthSq();return s>0?r.multiplyScalar(1/Math.sqrt(s)):r.set(0,0,0)}static getBarycoord(e,t,n,r,s){we.subVectors(r,t),ke.subVectors(n,t),h1.subVectors(e,t);const o=we.dot(we),a=we.dot(ke),u=we.dot(h1),l=ke.dot(ke),h=ke.dot(h1),f=o*l-a*a;if(f===0)return s.set(-2,-1,-1);const d=1/f,m=(l*u-a*h)*d,v=(o*h-a*u)*d;return s.set(1-m-v,v,m)}static containsPoint(e,t,n,r){return this.getBarycoord(e,t,n,r,We),We.x>=0&&We.y>=0&&We.x+We.y<=1}static getUV(e,t,n,r,s,o,a,u){return xn===!1&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),xn=!0),this.getInterpolation(e,t,n,r,s,o,a,u)}static getInterpolation(e,t,n,r,s,o,a,u){return this.getBarycoord(e,t,n,r,We),u.setScalar(0),u.addScaledVector(s,We.x),u.addScaledVector(o,We.y),u.addScaledVector(a,We.z),u}static isFrontFacing(e,t,n,r){return we.subVectors(n,t),ke.subVectors(e,t),we.cross(ke).dot(r)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,r){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[r]),this}setFromAttributeAndIndices(e,t,n,r){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,r),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return we.subVectors(this.c,this.b),ke.subVectors(this.a,this.b),we.cross(ke).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return Ce.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return Ce.getBarycoord(e,this.a,this.b,this.c,t)}getUV(e,t,n,r,s){return xn===!1&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),xn=!0),Ce.getInterpolation(e,this.a,this.b,this.c,t,n,r,s)}getInterpolation(e,t,n,r,s){return Ce.getInterpolation(e,this.a,this.b,this.c,t,n,r,s)}containsPoint(e){return Ce.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return Ce.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,r=this.b,s=this.c;let o,a;Dt.subVectors(r,n),Ut.subVectors(s,n),d1.subVectors(e,n);const u=Dt.dot(d1),l=Ut.dot(d1);if(u<=0&&l<=0)return t.copy(n);f1.subVectors(e,r);const h=Dt.dot(f1),f=Ut.dot(f1);if(h>=0&&f<=h)return t.copy(r);const d=u*f-h*l;if(d<=0&&u>=0&&h<=0)return o=u/(u-h),t.copy(n).addScaledVector(Dt,o);p1.subVectors(e,s);const m=Dt.dot(p1),v=Ut.dot(p1);if(v>=0&&m<=v)return t.copy(s);const x=m*l-u*v;if(x<=0&&l>=0&&v<=0)return a=l/(l-v),t.copy(n).addScaledVector(Ut,a);const p=h*v-m*f;if(p<=0&&f-h>=0&&m-v>=0)return Ui.subVectors(s,r),a=(f-h)/(f-h+(m-v)),t.copy(r).addScaledVector(Ui,a);const c=1/(p+x+d);return o=x*c,a=d*c,t.copy(n).addScaledVector(Dt,o).addScaledVector(Ut,a)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}let ps=0;class cn extends Et{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:ps++}),this.uuid=on(),this.name="",this.type="Material",this.blending=kt,this.side=tt,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=x2,this.blendDst=M2,this.blendEquation=Ht,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=b1,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=Zr,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Qn,this.stencilZFail=Qn,this.stencilZPass=Qn,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e!==void 0)for(const t in e){const n=e[t];if(n===void 0){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}const r=this[t];if(r===void 0){console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);continue}r&&r.isColor?r.set(n):r&&r.isVector3&&n&&n.isVector3?r.copy(n):this[t]=n}}toJSON(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{}});const n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==kt&&(n.blending=this.blending),this.side!==tt&&(n.side=this.side),this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.colorWrite=this.colorWrite,n.stencilWrite=this.stencilWrite,n.stencilWriteMask=this.stencilWriteMask,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilFuncMask=this.stencilFuncMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaToCoverage===!0&&(n.alphaToCoverage=this.alphaToCoverage),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=this.premultipliedAlpha),this.forceSinglePass===!0&&(n.forceSinglePass=this.forceSinglePass),this.wireframe===!0&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=this.flatShading),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData);function r(s){const o=[];for(const a in s){const u=s[a];delete u.metadata,o.push(u)}return o}if(t){const s=r(e.textures),o=r(e.images);s.length>0&&(n.textures=s),o.length>0&&(n.images=o)}return n}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const r=t.length;n=new Array(r);for(let s=0;s!==r;++s)n[s]=t[s].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}}const D2={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Re={h:0,s:0,l:0},Mn={h:0,s:0,l:0};function m1(i,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?i+(e-i)*6*t:t<1/2?e:t<2/3?i+(e-i)*6*(2/3-t):i}class H0{constructor(e,t,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,t===void 0&&n===void 0?this.set(e):this.setRGB(e,t,n)}set(e){return e&&e.isColor?this.copy(e):typeof e=="number"?this.setHex(e):typeof e=="string"&&this.setStyle(e),this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=b0){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,be.toWorkingColorSpace(this,t),this}setRGB(e,t,n,r=be.workingColorSpace){return this.r=e,this.g=t,this.b=n,be.toWorkingColorSpace(this,r),this}setHSL(e,t,n,r=be.workingColorSpace){if(e=$r(e,1),t=he(t,0,1),n=he(n,0,1),t===0)this.r=this.g=this.b=n;else{const s=n<=.5?n*(1+t):n+t-n*t,o=2*n-s;this.r=m1(o,s,e+1/3),this.g=m1(o,s,e),this.b=m1(o,s,e-1/3)}return be.toWorkingColorSpace(this,r),this}setStyle(e,t=b0){function n(s){s!==void 0&&parseFloat(s)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let r;if(r=/^(\w+)\(([^\)]*)\)/.exec(e)){let s;const o=r[1],a=r[2];switch(o){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setRGB(Math.min(255,parseInt(s[1],10))/255,Math.min(255,parseInt(s[2],10))/255,Math.min(255,parseInt(s[3],10))/255,t);if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setRGB(Math.min(100,parseInt(s[1],10))/100,Math.min(100,parseInt(s[2],10))/100,Math.min(100,parseInt(s[3],10))/100,t);break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setHSL(parseFloat(s[1])/360,parseFloat(s[2])/100,parseFloat(s[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(r=/^\#([A-Fa-f\d]+)$/.exec(e)){const s=r[1],o=s.length;if(o===3)return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,t);if(o===6)return this.setHex(parseInt(s,16),t);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,t);return this}setColorName(e,t=b0){const n=D2[e.toLowerCase()];return n!==void 0?this.setHex(n,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=Xt(e.r),this.g=Xt(e.g),this.b=Xt(e.b),this}copyLinearToSRGB(e){return this.r=i1(e.r),this.g=i1(e.g),this.b=i1(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=b0){return be.fromWorkingColorSpace(ae.copy(this),e),Math.round(he(ae.r*255,0,255))*65536+Math.round(he(ae.g*255,0,255))*256+Math.round(he(ae.b*255,0,255))}getHexString(e=b0){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=be.workingColorSpace){be.fromWorkingColorSpace(ae.copy(this),t);const n=ae.r,r=ae.g,s=ae.b,o=Math.max(n,r,s),a=Math.min(n,r,s);let u,l;const h=(a+o)/2;if(a===o)u=0,l=0;else{const f=o-a;switch(l=h<=.5?f/(o+a):f/(2-o-a),o){case n:u=(r-s)/f+(r<s?6:0);break;case r:u=(s-n)/f+2;break;case s:u=(n-r)/f+4;break}u/=6}return e.h=u,e.s=l,e.l=h,e}getRGB(e,t=be.workingColorSpace){return be.fromWorkingColorSpace(ae.copy(this),t),e.r=ae.r,e.g=ae.g,e.b=ae.b,e}getStyle(e=b0){be.fromWorkingColorSpace(ae.copy(this),e);const t=ae.r,n=ae.g,r=ae.b;return e!==b0?`color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${r.toFixed(3)})`:`rgb(${Math.round(t*255)},${Math.round(n*255)},${Math.round(r*255)})`}offsetHSL(e,t,n){return this.getHSL(Re),Re.h+=e,Re.s+=t,Re.l+=n,this.setHSL(Re.h,Re.s,Re.l),this}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(Re),e.getHSL(Mn);const n=t1(Re.h,Mn.h,t),r=t1(Re.s,Mn.s,t),s=t1(Re.l,Mn.l,t);return this.setHSL(n,r,s),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){const t=this.r,n=this.g,r=this.b,s=e.elements;return this.r=s[0]*t+s[3]*n+s[6]*r,this.g=s[1]*t+s[4]*n+s[7]*r,this.b=s[2]*t+s[5]*n+s[8]*r,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const ae=new H0;H0.NAMES=D2;class N1 extends cn{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new H0(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=S2,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const Z0=new D,Sn=new I0;class Te{constructor(e,t,n=!1){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=n,this.usage=Si,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let r=0,s=this.itemSize;r<s;r++)this.array[e+r]=t.array[n+r];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,n=this.count;t<n;t++)Sn.fromBufferAttribute(this,t),Sn.applyMatrix3(e),this.setXY(t,Sn.x,Sn.y);else if(this.itemSize===3)for(let t=0,n=this.count;t<n;t++)Z0.fromBufferAttribute(this,t),Z0.applyMatrix3(e),this.setXYZ(t,Z0.x,Z0.y,Z0.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)Z0.fromBufferAttribute(this,t),Z0.applyMatrix4(e),this.setXYZ(t,Z0.x,Z0.y,Z0.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)Z0.fromBufferAttribute(this,t),Z0.applyNormalMatrix(e),this.setXYZ(t,Z0.x,Z0.y,Z0.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)Z0.fromBufferAttribute(this,t),Z0.transformDirection(e),this.setXYZ(t,Z0.x,Z0.y,Z0.z);return this}set(e,t=0){return this.array.set(e,t),this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=dn(t,this.array)),t}setX(e,t){return this.normalized&&(t=me(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=dn(t,this.array)),t}setY(e,t){return this.normalized&&(t=me(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=dn(t,this.array)),t}setZ(e,t){return this.normalized&&(t=me(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=dn(t,this.array)),t}setW(e,t){return this.normalized&&(t=me(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=me(t,this.array),n=me(n,this.array)),this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,r){return e*=this.itemSize,this.normalized&&(t=me(t,this.array),n=me(n,this.array),r=me(r,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=r,this}setXYZW(e,t,n,r,s){return e*=this.itemSize,this.normalized&&(t=me(t,this.array),n=me(n,this.array),r=me(r,this.array),s=me(s,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=r,this.array[e+3]=s,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==Si&&(e.usage=this.usage),(this.updateRange.offset!==0||this.updateRange.count!==-1)&&(e.updateRange=this.updateRange),e}copyColorsArray(){console.error("THREE.BufferAttribute: copyColorsArray() was removed in r144.")}copyVector2sArray(){console.error("THREE.BufferAttribute: copyVector2sArray() was removed in r144.")}copyVector3sArray(){console.error("THREE.BufferAttribute: copyVector3sArray() was removed in r144.")}copyVector4sArray(){console.error("THREE.BufferAttribute: copyVector4sArray() was removed in r144.")}}class U2 extends Te{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class I2 extends Te{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class De extends Te{constructor(e,t,n){super(new Float32Array(e),t,n)}}let ms=0;const Me=new te,_1=new fe,It=new D,ge=new ln,tn=new ln,ee=new D;class Be extends Et{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:ms++}),this.uuid=on(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(A2(e)?I2:U2)(e,1):this.index=e,this}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const s=new U0().getNormalMatrix(e);n.applyNormalMatrix(s),n.needsUpdate=!0}const r=this.attributes.tangent;return r!==void 0&&(r.transformDirection(e),r.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return Me.makeRotationFromQuaternion(e),this.applyMatrix4(Me),this}rotateX(e){return Me.makeRotationX(e),this.applyMatrix4(Me),this}rotateY(e){return Me.makeRotationY(e),this.applyMatrix4(Me),this}rotateZ(e){return Me.makeRotationZ(e),this.applyMatrix4(Me),this}translate(e,t,n){return Me.makeTranslation(e,t,n),this.applyMatrix4(Me),this}scale(e,t,n){return Me.makeScale(e,t,n),this.applyMatrix4(Me),this}lookAt(e){return _1.lookAt(e),_1.updateMatrix(),this.applyMatrix4(_1.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(It).negate(),this.translate(It.x,It.y,It.z),this}setFromPoints(e){const t=[];for(let n=0,r=e.length;n<r;n++){const s=e[n];t.push(s.x,s.y,s.z||0)}return this.setAttribute("position",new De(t,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new ln);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new D(-1/0,-1/0,-1/0),new D(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),t)for(let n=0,r=t.length;n<r;n++){const s=t[n];ge.setFromBufferAttribute(s),this.morphTargetsRelative?(ee.addVectors(this.boundingBox.min,ge.min),this.boundingBox.expandByPoint(ee),ee.addVectors(this.boundingBox.max,ge.max),this.boundingBox.expandByPoint(ee)):(this.boundingBox.expandByPoint(ge.min),this.boundingBox.expandByPoint(ge.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Bn);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new D,1/0);return}if(e){const n=this.boundingSphere.center;if(ge.setFromBufferAttribute(e),t)for(let s=0,o=t.length;s<o;s++){const a=t[s];tn.setFromBufferAttribute(a),this.morphTargetsRelative?(ee.addVectors(ge.min,tn.min),ge.expandByPoint(ee),ee.addVectors(ge.max,tn.max),ge.expandByPoint(ee)):(ge.expandByPoint(tn.min),ge.expandByPoint(tn.max))}ge.getCenter(n);let r=0;for(let s=0,o=e.count;s<o;s++)ee.fromBufferAttribute(e,s),r=Math.max(r,n.distanceToSquared(ee));if(t)for(let s=0,o=t.length;s<o;s++){const a=t[s],u=this.morphTargetsRelative;for(let l=0,h=a.count;l<h;l++)ee.fromBufferAttribute(a,l),u&&(It.fromBufferAttribute(e,l),ee.add(It)),r=Math.max(r,n.distanceToSquared(ee))}this.boundingSphere.radius=Math.sqrt(r),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=e.array,r=t.position.array,s=t.normal.array,o=t.uv.array,a=r.length/3;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new Te(new Float32Array(4*a),4));const u=this.getAttribute("tangent").array,l=[],h=[];for(let b=0;b<a;b++)l[b]=new D,h[b]=new D;const f=new D,d=new D,m=new D,v=new I0,x=new I0,p=new I0,c=new D,y=new D;function M(b,j,$){f.fromArray(r,b*3),d.fromArray(r,j*3),m.fromArray(r,$*3),v.fromArray(o,b*2),x.fromArray(o,j*2),p.fromArray(o,$*2),d.sub(f),m.sub(f),x.sub(v),p.sub(v);const I=1/(x.x*p.y-p.x*x.y);isFinite(I)&&(c.copy(d).multiplyScalar(p.y).addScaledVector(m,-x.y).multiplyScalar(I),y.copy(m).multiplyScalar(x.x).addScaledVector(d,-p.x).multiplyScalar(I),l[b].add(c),l[j].add(c),l[$].add(c),h[b].add(y),h[j].add(y),h[$].add(y))}let L=this.groups;L.length===0&&(L=[{start:0,count:n.length}]);for(let b=0,j=L.length;b<j;++b){const $=L[b],I=$.start,B=$.count;for(let V=I,n0=I+B;V<n0;V+=3)M(n[V+0],n[V+1],n[V+2])}const T=new D,R=new D,U=new D,k=new D;function _(b){U.fromArray(s,b*3),k.copy(U);const j=l[b];T.copy(j),T.sub(U.multiplyScalar(U.dot(j))).normalize(),R.crossVectors(k,j);const I=R.dot(h[b])<0?-1:1;u[b*4]=T.x,u[b*4+1]=T.y,u[b*4+2]=T.z,u[b*4+3]=I}for(let b=0,j=L.length;b<j;++b){const $=L[b],I=$.start,B=$.count;for(let V=I,n0=I+B;V<n0;V+=3)_(n[V+0]),_(n[V+1]),_(n[V+2])}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(t!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new Te(new Float32Array(t.count*3),3),this.setAttribute("normal",n);else for(let d=0,m=n.count;d<m;d++)n.setXYZ(d,0,0,0);const r=new D,s=new D,o=new D,a=new D,u=new D,l=new D,h=new D,f=new D;if(e)for(let d=0,m=e.count;d<m;d+=3){const v=e.getX(d+0),x=e.getX(d+1),p=e.getX(d+2);r.fromBufferAttribute(t,v),s.fromBufferAttribute(t,x),o.fromBufferAttribute(t,p),h.subVectors(o,s),f.subVectors(r,s),h.cross(f),a.fromBufferAttribute(n,v),u.fromBufferAttribute(n,x),l.fromBufferAttribute(n,p),a.add(h),u.add(h),l.add(h),n.setXYZ(v,a.x,a.y,a.z),n.setXYZ(x,u.x,u.y,u.z),n.setXYZ(p,l.x,l.y,l.z)}else for(let d=0,m=t.count;d<m;d+=3)r.fromBufferAttribute(t,d+0),s.fromBufferAttribute(t,d+1),o.fromBufferAttribute(t,d+2),h.subVectors(o,s),f.subVectors(r,s),h.cross(f),n.setXYZ(d+0,h.x,h.y,h.z),n.setXYZ(d+1,h.x,h.y,h.z),n.setXYZ(d+2,h.x,h.y,h.z);this.normalizeNormals(),n.needsUpdate=!0}}merge(){return console.error("THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeGeometries() instead."),this}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)ee.fromBufferAttribute(e,t),ee.normalize(),e.setXYZ(t,ee.x,ee.y,ee.z)}toNonIndexed(){function e(a,u){const l=a.array,h=a.itemSize,f=a.normalized,d=new l.constructor(u.length*h);let m=0,v=0;for(let x=0,p=u.length;x<p;x++){a.isInterleavedBufferAttribute?m=u[x]*a.data.stride+a.offset:m=u[x]*h;for(let c=0;c<h;c++)d[v++]=l[m++]}return new Te(d,h,f)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new Be,n=this.index.array,r=this.attributes;for(const a in r){const u=r[a],l=e(u,n);t.setAttribute(a,l)}const s=this.morphAttributes;for(const a in s){const u=[],l=s[a];for(let h=0,f=l.length;h<f;h++){const d=l[h],m=e(d,n);u.push(m)}t.morphAttributes[a]=u}t.morphTargetsRelative=this.morphTargetsRelative;const o=this.groups;for(let a=0,u=o.length;a<u;a++){const l=o[a];t.addGroup(l.start,l.count,l.materialIndex)}return t}toJSON(){const e={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const u=this.parameters;for(const l in u)u[l]!==void 0&&(e[l]=u[l]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const u in n){const l=n[u];e.data.attributes[u]=l.toJSON(e.data)}const r={};let s=!1;for(const u in this.morphAttributes){const l=this.morphAttributes[u],h=[];for(let f=0,d=l.length;f<d;f++){const m=l[f];h.push(m.toJSON(e.data))}h.length>0&&(r[u]=h,s=!0)}s&&(e.data.morphAttributes=r,e.data.morphTargetsRelative=this.morphTargetsRelative);const o=this.groups;o.length>0&&(e.data.groups=JSON.parse(JSON.stringify(o)));const a=this.boundingSphere;return a!==null&&(e.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;n!==null&&this.setIndex(n.clone(t));const r=e.attributes;for(const l in r){const h=r[l];this.setAttribute(l,h.clone(t))}const s=e.morphAttributes;for(const l in s){const h=[],f=s[l];for(let d=0,m=f.length;d<m;d++)h.push(f[d].clone(t));this.morphAttributes[l]=h}this.morphTargetsRelative=e.morphTargetsRelative;const o=e.groups;for(let l=0,h=o.length;l<h;l++){const f=o[l];this.addGroup(f.start,f.count,f.materialIndex)}const a=e.boundingBox;a!==null&&(this.boundingBox=a.clone());const u=e.boundingSphere;return u!==null&&(this.boundingSphere=u.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const Ii=new te,Ie=new L2,En=new Bn,Ni=new D,Nt=new D,Ft=new D,Ot=new D,g1=new D,Tn=new D,yn=new I0,bn=new I0,An=new I0,Fi=new D,Oi=new D,Bi=new D,wn=new D,Rn=new D;class qe extends fe{constructor(e=new Be,t=new N1){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=e.material,this.geometry=e.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const r=t[n[0]];if(r!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=r.length;s<o;s++){const a=r[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}getVertexPosition(e,t){const n=this.geometry,r=n.attributes.position,s=n.morphAttributes.position,o=n.morphTargetsRelative;t.fromBufferAttribute(r,e);const a=this.morphTargetInfluences;if(s&&a){Tn.set(0,0,0);for(let u=0,l=s.length;u<l;u++){const h=a[u],f=s[u];h!==0&&(g1.fromBufferAttribute(f,e),o?Tn.addScaledVector(g1,h):Tn.addScaledVector(g1.sub(t),h))}t.add(Tn)}return t}raycast(e,t){const n=this.geometry,r=this.material,s=this.matrixWorld;r!==void 0&&(n.boundingSphere===null&&n.computeBoundingSphere(),En.copy(n.boundingSphere),En.applyMatrix4(s),Ie.copy(e.ray).recast(e.near),!(En.containsPoint(Ie.origin)===!1&&(Ie.intersectSphere(En,Ni)===null||Ie.origin.distanceToSquared(Ni)>(e.far-e.near)**2))&&(Ii.copy(s).invert(),Ie.copy(e.ray).applyMatrix4(Ii),!(n.boundingBox!==null&&Ie.intersectsBox(n.boundingBox)===!1)&&this._computeIntersections(e,t)))}_computeIntersections(e,t){let n;const r=this.geometry,s=this.material,o=r.index,a=r.attributes.position,u=r.attributes.uv,l=r.attributes.uv1,h=r.attributes.normal,f=r.groups,d=r.drawRange;if(o!==null)if(Array.isArray(s))for(let m=0,v=f.length;m<v;m++){const x=f[m],p=s[x.materialIndex],c=Math.max(x.start,d.start),y=Math.min(o.count,Math.min(x.start+x.count,d.start+d.count));for(let M=c,L=y;M<L;M+=3){const T=o.getX(M),R=o.getX(M+1),U=o.getX(M+2);n=Cn(this,p,e,Ie,u,l,h,T,R,U),n&&(n.faceIndex=Math.floor(M/3),n.face.materialIndex=x.materialIndex,t.push(n))}}else{const m=Math.max(0,d.start),v=Math.min(o.count,d.start+d.count);for(let x=m,p=v;x<p;x+=3){const c=o.getX(x),y=o.getX(x+1),M=o.getX(x+2);n=Cn(this,s,e,Ie,u,l,h,c,y,M),n&&(n.faceIndex=Math.floor(x/3),t.push(n))}}else if(a!==void 0)if(Array.isArray(s))for(let m=0,v=f.length;m<v;m++){const x=f[m],p=s[x.materialIndex],c=Math.max(x.start,d.start),y=Math.min(a.count,Math.min(x.start+x.count,d.start+d.count));for(let M=c,L=y;M<L;M+=3){const T=M,R=M+1,U=M+2;n=Cn(this,p,e,Ie,u,l,h,T,R,U),n&&(n.faceIndex=Math.floor(M/3),n.face.materialIndex=x.materialIndex,t.push(n))}}else{const m=Math.max(0,d.start),v=Math.min(a.count,d.start+d.count);for(let x=m,p=v;x<p;x+=3){const c=x,y=x+1,M=x+2;n=Cn(this,s,e,Ie,u,l,h,c,y,M),n&&(n.faceIndex=Math.floor(x/3),t.push(n))}}}}function _s(i,e,t,n,r,s,o,a){let u;if(e.side===de?u=n.intersectTriangle(o,s,r,!0,a):u=n.intersectTriangle(r,s,o,e.side===tt,a),u===null)return null;Rn.copy(a),Rn.applyMatrix4(i.matrixWorld);const l=t.ray.origin.distanceTo(Rn);return l<t.near||l>t.far?null:{distance:l,point:Rn.clone(),object:i}}function Cn(i,e,t,n,r,s,o,a,u,l){i.getVertexPosition(a,Nt),i.getVertexPosition(u,Ft),i.getVertexPosition(l,Ot);const h=_s(i,e,t,n,Nt,Ft,Ot,wn);if(h){r&&(yn.fromBufferAttribute(r,a),bn.fromBufferAttribute(r,u),An.fromBufferAttribute(r,l),h.uv=Ce.getInterpolation(wn,Nt,Ft,Ot,yn,bn,An,new I0)),s&&(yn.fromBufferAttribute(s,a),bn.fromBufferAttribute(s,u),An.fromBufferAttribute(s,l),h.uv1=Ce.getInterpolation(wn,Nt,Ft,Ot,yn,bn,An,new I0),h.uv2=h.uv1),o&&(Fi.fromBufferAttribute(o,a),Oi.fromBufferAttribute(o,u),Bi.fromBufferAttribute(o,l),h.normal=Ce.getInterpolation(wn,Nt,Ft,Ot,Fi,Oi,Bi,new D),h.normal.dot(n.direction)>0&&h.normal.multiplyScalar(-1));const f={a,b:u,c:l,normal:new D,materialIndex:0};Ce.getNormal(Nt,Ft,Ot,f.normal),h.face=f}return h}class un extends Be{constructor(e=1,t=1,n=1,r=1,s=1,o=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:r,heightSegments:s,depthSegments:o};const a=this;r=Math.floor(r),s=Math.floor(s),o=Math.floor(o);const u=[],l=[],h=[],f=[];let d=0,m=0;v("z","y","x",-1,-1,n,t,e,o,s,0),v("z","y","x",1,-1,n,t,-e,o,s,1),v("x","z","y",1,1,e,n,t,r,o,2),v("x","z","y",1,-1,e,n,-t,r,o,3),v("x","y","z",1,-1,e,t,n,r,s,4),v("x","y","z",-1,-1,e,t,-n,r,s,5),this.setIndex(u),this.setAttribute("position",new De(l,3)),this.setAttribute("normal",new De(h,3)),this.setAttribute("uv",new De(f,2));function v(x,p,c,y,M,L,T,R,U,k,_){const b=L/U,j=T/k,$=L/2,I=T/2,B=R/2,V=U+1,n0=k+1;let Y=0,X=0;const Z=new D;for(let e0=0;e0<n0;e0++){const p0=e0*j-I;for(let c0=0;c0<V;c0++){const z=c0*b-$;Z[x]=z*y,Z[p]=p0*M,Z[c]=B,l.push(Z.x,Z.y,Z.z),Z[x]=0,Z[p]=0,Z[c]=R>0?1:-1,h.push(Z.x,Z.y,Z.z),f.push(c0/U),f.push(1-e0/k),Y+=1}}for(let e0=0;e0<k;e0++)for(let p0=0;p0<U;p0++){const c0=d+p0+V*e0,z=d+p0+V*(e0+1),K=d+(p0+1)+V*(e0+1),r0=d+(p0+1)+V*e0;u.push(c0,z,r0),u.push(z,K,r0),X+=6}a.addGroup(m,X,_),m+=X,d+=Y}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new un(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function Kt(i){const e={};for(const t in i){e[t]={};for(const n in i[t]){const r=i[t][n];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?r.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[t][n]=null):e[t][n]=r.clone():Array.isArray(r)?e[t][n]=r.slice():e[t][n]=r}}return e}function ce(i){const e={};for(let t=0;t<i.length;t++){const n=Kt(i[t]);for(const r in n)e[r]=n[r]}return e}function gs(i){const e=[];for(let t=0;t<i.length;t++)e.push(i[t].clone());return e}function N2(i){return i.getRenderTarget()===null?i.outputColorSpace:Oe}const vs={clone:Kt,merge:ce};var xs=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,Ms=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class St extends cn{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=xs,this.fragmentShader=Ms,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=Kt(e.uniforms),this.uniformsGroups=gs(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const r in this.uniforms){const o=this.uniforms[r].value;o&&o.isTexture?t.uniforms[r]={type:"t",value:o.toJSON(e).uuid}:o&&o.isColor?t.uniforms[r]={type:"c",value:o.getHex()}:o&&o.isVector2?t.uniforms[r]={type:"v2",value:o.toArray()}:o&&o.isVector3?t.uniforms[r]={type:"v3",value:o.toArray()}:o&&o.isVector4?t.uniforms[r]={type:"v4",value:o.toArray()}:o&&o.isMatrix3?t.uniforms[r]={type:"m3",value:o.toArray()}:o&&o.isMatrix4?t.uniforms[r]={type:"m4",value:o.toArray()}:t.uniforms[r]={value:o}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t.lights=this.lights,t.clipping=this.clipping;const n={};for(const r in this.extensions)this.extensions[r]===!0&&(n[r]=!0);return Object.keys(n).length>0&&(t.extensions=n),t}}class F2 extends fe{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new te,this.projectionMatrix=new te,this.projectionMatrixInverse=new te}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(-t[8],-t[9],-t[10]).normalize()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}class Ee extends F2{constructor(e=50,t=1,n=.1,r=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=r,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=P1*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(e1*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return P1*2*Math.atan(Math.tan(e1*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(e,t,n,r,s,o){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=r,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(e1*.5*this.fov)/this.zoom,n=2*t,r=this.aspect*n,s=-.5*r;const o=this.view;if(this.view!==null&&this.view.enabled){const u=o.fullWidth,l=o.fullHeight;s+=o.offsetX*r/u,t-=o.offsetY*n/l,r*=o.width/u,n*=o.height/l}const a=this.filmOffset;a!==0&&(s+=e*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+r,t,t-n,e,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}const Bt=-90,zt=1;class Ss extends fe{constructor(e,t,n){super(),this.type="CubeCamera",this.renderTarget=n;const r=new Ee(Bt,zt,e,t);r.layers=this.layers,r.up.set(0,1,0),r.lookAt(1,0,0),this.add(r);const s=new Ee(Bt,zt,e,t);s.layers=this.layers,s.up.set(0,1,0),s.lookAt(-1,0,0),this.add(s);const o=new Ee(Bt,zt,e,t);o.layers=this.layers,o.up.set(0,0,-1),o.lookAt(0,1,0),this.add(o);const a=new Ee(Bt,zt,e,t);a.layers=this.layers,a.up.set(0,0,1),a.lookAt(0,-1,0),this.add(a);const u=new Ee(Bt,zt,e,t);u.layers=this.layers,u.up.set(0,1,0),u.lookAt(0,0,1),this.add(u);const l=new Ee(Bt,zt,e,t);l.layers=this.layers,l.up.set(0,1,0),l.lookAt(0,0,-1),this.add(l)}update(e,t){this.parent===null&&this.updateMatrixWorld();const n=this.renderTarget,[r,s,o,a,u,l]=this.children,h=e.getRenderTarget(),f=e.toneMapping,d=e.xr.enabled;e.toneMapping=Ye,e.xr.enabled=!1;const m=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0),e.render(t,r),e.setRenderTarget(n,1),e.render(t,s),e.setRenderTarget(n,2),e.render(t,o),e.setRenderTarget(n,3),e.render(t,a),e.setRenderTarget(n,4),e.render(t,u),n.texture.generateMipmaps=m,e.setRenderTarget(n,5),e.render(t,l),e.setRenderTarget(h),e.toneMapping=f,e.xr.enabled=d,n.texture.needsPMREMUpdate=!0}}class O2 extends ve{constructor(e,t,n,r,s,o,a,u,l,h){e=e!==void 0?e:[],t=t!==void 0?t:qt,super(e,t,n,r,s,o,a,u,l,h),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class Es extends xt{constructor(e=1,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const n={width:e,height:e,depth:1},r=[n,n,n,n,n,n];t.encoding!==void 0&&(rn("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace."),t.colorSpace=t.encoding===_t?b0:gt),this.texture=new O2(r,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=t.generateMipmaps!==void 0?t.generateMipmaps:!1,this.texture.minFilter=t.minFilter!==void 0?t.minFilter:Se}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},r=new un(5,5,5),s=new St({name:"CubemapFromEquirect",uniforms:Kt(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:de,blending:et});s.uniforms.tEquirect.value=t;const o=new qe(r,s),a=t.minFilter;return t.minFilter===sn&&(t.minFilter=Se),new Ss(1,10,this).update(e,o),t.minFilter=a,o.geometry.dispose(),o.material.dispose(),this}clear(e,t,n,r){const s=e.getRenderTarget();for(let o=0;o<6;o++)e.setRenderTarget(this,o),e.clear(t,n,r);e.setRenderTarget(s)}}const v1=new D,Ts=new D,ys=new U0;class lt{constructor(e=new D(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,r){return this.normal.set(e,t,n),this.constant=r,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const r=v1.subVectors(n,t).cross(Ts.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(r,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const n=e.delta(v1),r=this.normal.dot(n);if(r===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const s=-(e.start.dot(this.normal)+this.constant)/r;return s<0||s>1?null:t.copy(e.start).addScaledVector(n,s)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||ys.getNormalMatrix(e),r=this.coplanarPoint(v1).applyMatrix4(e),s=this.normal.applyMatrix3(n).normalize();return this.constant=-r.dot(s),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const ot=new Bn,Ln=new D;class B2{constructor(e=new lt,t=new lt,n=new lt,r=new lt,s=new lt,o=new lt){this.planes=[e,t,n,r,s,o]}set(e,t,n,r,s,o){const a=this.planes;return a[0].copy(e),a[1].copy(t),a[2].copy(n),a[3].copy(r),a[4].copy(s),a[5].copy(o),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e){const t=this.planes,n=e.elements,r=n[0],s=n[1],o=n[2],a=n[3],u=n[4],l=n[5],h=n[6],f=n[7],d=n[8],m=n[9],v=n[10],x=n[11],p=n[12],c=n[13],y=n[14],M=n[15];return t[0].setComponents(a-r,f-u,x-d,M-p).normalize(),t[1].setComponents(a+r,f+u,x+d,M+p).normalize(),t[2].setComponents(a+s,f+l,x+m,M+c).normalize(),t[3].setComponents(a-s,f-l,x-m,M-c).normalize(),t[4].setComponents(a-o,f-h,x-v,M-y).normalize(),t[5].setComponents(a+o,f+h,x+v,M+y).normalize(),this}intersectsObject(e){if(e.boundingSphere!==void 0)e.boundingSphere===null&&e.computeBoundingSphere(),ot.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const t=e.geometry;t.boundingSphere===null&&t.computeBoundingSphere(),ot.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(ot)}intersectsSprite(e){return ot.center.set(0,0,0),ot.radius=.7071067811865476,ot.applyMatrix4(e.matrixWorld),this.intersectsSphere(ot)}intersectsSphere(e){const t=this.planes,n=e.center,r=-e.radius;for(let s=0;s<6;s++)if(t[s].distanceToPoint(n)<r)return!1;return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const r=t[n];if(Ln.x=r.normal.x>0?e.max.x:e.min.x,Ln.y=r.normal.y>0?e.max.y:e.min.y,Ln.z=r.normal.z>0?e.max.z:e.min.z,r.distanceToPoint(Ln)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function z2(){let i=null,e=!1,t=null,n=null;function r(s,o){t(s,o),n=i.requestAnimationFrame(r)}return{start:function(){e!==!0&&t!==null&&(n=i.requestAnimationFrame(r),e=!0)},stop:function(){i.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(s){t=s},setContext:function(s){i=s}}}function bs(i,e){const t=e.isWebGL2,n=new WeakMap;function r(l,h){const f=l.array,d=l.usage,m=i.createBuffer();i.bindBuffer(h,m),i.bufferData(h,f,d),l.onUploadCallback();let v;if(f instanceof Float32Array)v=i.FLOAT;else if(f instanceof Uint16Array)if(l.isFloat16BufferAttribute)if(t)v=i.HALF_FLOAT;else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");else v=i.UNSIGNED_SHORT;else if(f instanceof Int16Array)v=i.SHORT;else if(f instanceof Uint32Array)v=i.UNSIGNED_INT;else if(f instanceof Int32Array)v=i.INT;else if(f instanceof Int8Array)v=i.BYTE;else if(f instanceof Uint8Array)v=i.UNSIGNED_BYTE;else if(f instanceof Uint8ClampedArray)v=i.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+f);return{buffer:m,type:v,bytesPerElement:f.BYTES_PER_ELEMENT,version:l.version}}function s(l,h,f){const d=h.array,m=h.updateRange;i.bindBuffer(f,l),m.count===-1?i.bufferSubData(f,0,d):(t?i.bufferSubData(f,m.offset*d.BYTES_PER_ELEMENT,d,m.offset,m.count):i.bufferSubData(f,m.offset*d.BYTES_PER_ELEMENT,d.subarray(m.offset,m.offset+m.count)),m.count=-1),h.onUploadCallback()}function o(l){return l.isInterleavedBufferAttribute&&(l=l.data),n.get(l)}function a(l){l.isInterleavedBufferAttribute&&(l=l.data);const h=n.get(l);h&&(i.deleteBuffer(h.buffer),n.delete(l))}function u(l,h){if(l.isGLBufferAttribute){const d=n.get(l);(!d||d.version<l.version)&&n.set(l,{buffer:l.buffer,type:l.type,bytesPerElement:l.elementSize,version:l.version});return}l.isInterleavedBufferAttribute&&(l=l.data);const f=n.get(l);f===void 0?n.set(l,r(l,h)):f.version<l.version&&(s(f.buffer,l,h),f.version=l.version)}return{get:o,remove:a,update:u}}class F1 extends Be{constructor(e=1,t=1,n=1,r=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:r};const s=e/2,o=t/2,a=Math.floor(n),u=Math.floor(r),l=a+1,h=u+1,f=e/a,d=t/u,m=[],v=[],x=[],p=[];for(let c=0;c<h;c++){const y=c*d-o;for(let M=0;M<l;M++){const L=M*f-s;v.push(L,-y,0),x.push(0,0,1),p.push(M/a),p.push(1-c/u)}}for(let c=0;c<u;c++)for(let y=0;y<a;y++){const M=y+l*c,L=y+l*(c+1),T=y+1+l*(c+1),R=y+1+l*c;m.push(M,L,R),m.push(L,T,R)}this.setIndex(m),this.setAttribute("position",new De(v,3)),this.setAttribute("normal",new De(x,3)),this.setAttribute("uv",new De(p,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new F1(e.width,e.height,e.widthSegments,e.heightSegments)}}var As=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,ws=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,Rs=`#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`,Cs=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,Ls=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,Ps=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,Ds="vec3 transformed = vec3( position );",Us=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,Is=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,Ns=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			 return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float R21 = R12;
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,Fs=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = dFdx( surf_pos.xyz );
		vec3 vSigmaY = dFdy( surf_pos.xyz );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,Os=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,Bs=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,zs=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,Gs=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,Hs=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,Vs=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,ks=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,Ws=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,Xs=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,qs=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_v0 0.339
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_v1 0.276
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_v4 0.046
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_v5 0.016
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_v6 0.0038
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,Ys=`vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,js=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,Ks=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,Zs=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,$s=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,Js="gl_FragColor = linearToOutputTexel( gl_FragColor );",Qs=`vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,ea=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,ta=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,na=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,ia=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,ra=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,sa=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,aa=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,oa=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,la=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,ca=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,ua=`#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`,ha=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,da=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,fa=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,pa=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( LEGACY_LIGHTS )
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#else
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometry.position;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometry.position;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,ma=`#if defined( USE_ENVMAP )
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
#endif`,_a=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,ga=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,va=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,xa=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,Ma=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif`,Sa=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec3 sheenSpecular = vec3( 0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,Ea=`
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef USE_CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometry.viewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometry, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,Ta=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometry.normal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,ya=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`,ba=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,Aa=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,wa=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,Ra=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,Ca=`#ifdef USE_MAP
	diffuseColor *= texture2D( map, vMapUv );
#endif`,La=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,Pa=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,Da=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,Ua=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,Ia=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,Na=`#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,Fa=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`,Oa=`#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`,Ba=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`,za=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#ifdef USE_NORMALMAP_TANGENTSPACE
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal, vNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 geometryNormal = normal;`,Ga=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,Ha=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,Va=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,ka=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,Wa=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,Xa=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`,qa=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,Ya=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,ja=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,Ka=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha + 0.1;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,Za=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec2 packDepthToRG( in highp float v ) {
	return packDepthToRGBA( v ).yx;
}
float unpackRGToDepth( const in highp vec2 v ) {
	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,$a=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,Ja=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,Qa=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,eo=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,to=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,no=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,io=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,ro=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,so=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,ao=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,oo=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,lo=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	uniform int boneTextureSize;
	mat4 getBoneMatrix( const in float i ) {
		float j = i * 4.0;
		float x = mod( j, float( boneTextureSize ) );
		float y = floor( j / float( boneTextureSize ) );
		float dx = 1.0 / float( boneTextureSize );
		float dy = 1.0 / float( boneTextureSize );
		y = dy * ( y + 0.5 );
		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
		mat4 bone = mat4( v1, v2, v3, v4 );
		return bone;
	}
#endif`,co=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,uo=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,ho=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,fo=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,po=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,mo=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,_o=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmission = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );
#endif`,go=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return radiance;
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
	}
#endif`,vo=`#ifdef USE_UV
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,xo=`#ifdef USE_UV
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,Mo=`#ifdef USE_UV
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,So=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const Eo=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,To=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,yo=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,bo=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,Ao=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,wo=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,Ro=`#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,Co=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,Lo=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,Po=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,Do=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,Uo=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,Io=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,No=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,Fo=`#include <common>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,Oo=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Bo=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,zo=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Go=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,Ho=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Vo=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,ko=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,Wo=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Xo=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,qo=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,Yo=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;
	#endif
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,jo=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Ko=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Zo=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,$o=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,Jo=`#include <common>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Qo=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,e4=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,t4=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,R0={alphamap_fragment:As,alphamap_pars_fragment:ws,alphatest_fragment:Rs,alphatest_pars_fragment:Cs,aomap_fragment:Ls,aomap_pars_fragment:Ps,begin_vertex:Ds,beginnormal_vertex:Us,bsdfs:Is,iridescence_fragment:Ns,bumpmap_pars_fragment:Fs,clipping_planes_fragment:Os,clipping_planes_pars_fragment:Bs,clipping_planes_pars_vertex:zs,clipping_planes_vertex:Gs,color_fragment:Hs,color_pars_fragment:Vs,color_pars_vertex:ks,color_vertex:Ws,common:Xs,cube_uv_reflection_fragment:qs,defaultnormal_vertex:Ys,displacementmap_pars_vertex:js,displacementmap_vertex:Ks,emissivemap_fragment:Zs,emissivemap_pars_fragment:$s,encodings_fragment:Js,encodings_pars_fragment:Qs,envmap_fragment:ea,envmap_common_pars_fragment:ta,envmap_pars_fragment:na,envmap_pars_vertex:ia,envmap_physical_pars_fragment:ma,envmap_vertex:ra,fog_vertex:sa,fog_pars_vertex:aa,fog_fragment:oa,fog_pars_fragment:la,gradientmap_pars_fragment:ca,lightmap_fragment:ua,lightmap_pars_fragment:ha,lights_lambert_fragment:da,lights_lambert_pars_fragment:fa,lights_pars_begin:pa,lights_toon_fragment:_a,lights_toon_pars_fragment:ga,lights_phong_fragment:va,lights_phong_pars_fragment:xa,lights_physical_fragment:Ma,lights_physical_pars_fragment:Sa,lights_fragment_begin:Ea,lights_fragment_maps:Ta,lights_fragment_end:ya,logdepthbuf_fragment:ba,logdepthbuf_pars_fragment:Aa,logdepthbuf_pars_vertex:wa,logdepthbuf_vertex:Ra,map_fragment:Ca,map_pars_fragment:La,map_particle_fragment:Pa,map_particle_pars_fragment:Da,metalnessmap_fragment:Ua,metalnessmap_pars_fragment:Ia,morphcolor_vertex:Na,morphnormal_vertex:Fa,morphtarget_pars_vertex:Oa,morphtarget_vertex:Ba,normal_fragment_begin:za,normal_fragment_maps:Ga,normal_pars_fragment:Ha,normal_pars_vertex:Va,normal_vertex:ka,normalmap_pars_fragment:Wa,clearcoat_normal_fragment_begin:Xa,clearcoat_normal_fragment_maps:qa,clearcoat_pars_fragment:Ya,iridescence_pars_fragment:ja,output_fragment:Ka,packing:Za,premultiplied_alpha_fragment:$a,project_vertex:Ja,dithering_fragment:Qa,dithering_pars_fragment:eo,roughnessmap_fragment:to,roughnessmap_pars_fragment:no,shadowmap_pars_fragment:io,shadowmap_pars_vertex:ro,shadowmap_vertex:so,shadowmask_pars_fragment:ao,skinbase_vertex:oo,skinning_pars_vertex:lo,skinning_vertex:co,skinnormal_vertex:uo,specularmap_fragment:ho,specularmap_pars_fragment:fo,tonemapping_fragment:po,tonemapping_pars_fragment:mo,transmission_fragment:_o,transmission_pars_fragment:go,uv_pars_fragment:vo,uv_pars_vertex:xo,uv_vertex:Mo,worldpos_vertex:So,background_vert:Eo,background_frag:To,backgroundCube_vert:yo,backgroundCube_frag:bo,cube_vert:Ao,cube_frag:wo,depth_vert:Ro,depth_frag:Co,distanceRGBA_vert:Lo,distanceRGBA_frag:Po,equirect_vert:Do,equirect_frag:Uo,linedashed_vert:Io,linedashed_frag:No,meshbasic_vert:Fo,meshbasic_frag:Oo,meshlambert_vert:Bo,meshlambert_frag:zo,meshmatcap_vert:Go,meshmatcap_frag:Ho,meshnormal_vert:Vo,meshnormal_frag:ko,meshphong_vert:Wo,meshphong_frag:Xo,meshphysical_vert:qo,meshphysical_frag:Yo,meshtoon_vert:jo,meshtoon_frag:Ko,points_vert:Zo,points_frag:$o,shadow_vert:Jo,shadow_frag:Qo,sprite_vert:e4,sprite_frag:t4},s0={common:{diffuse:{value:new H0(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new U0},alphaMap:{value:null},alphaMapTransform:{value:new U0},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new U0}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new U0}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new U0}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new U0},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new U0},normalScale:{value:new I0(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new U0},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new U0}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new U0}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new U0}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new H0(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new H0(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new U0}},sprite:{diffuse:{value:new H0(16777215)},opacity:{value:1},center:{value:new I0(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new U0},alphaMap:{value:null},alphaTest:{value:0}}},Ne={basic:{uniforms:ce([s0.common,s0.specularmap,s0.envmap,s0.aomap,s0.lightmap,s0.fog]),vertexShader:R0.meshbasic_vert,fragmentShader:R0.meshbasic_frag},lambert:{uniforms:ce([s0.common,s0.specularmap,s0.envmap,s0.aomap,s0.lightmap,s0.emissivemap,s0.bumpmap,s0.normalmap,s0.displacementmap,s0.fog,s0.lights,{emissive:{value:new H0(0)}}]),vertexShader:R0.meshlambert_vert,fragmentShader:R0.meshlambert_frag},phong:{uniforms:ce([s0.common,s0.specularmap,s0.envmap,s0.aomap,s0.lightmap,s0.emissivemap,s0.bumpmap,s0.normalmap,s0.displacementmap,s0.fog,s0.lights,{emissive:{value:new H0(0)},specular:{value:new H0(1118481)},shininess:{value:30}}]),vertexShader:R0.meshphong_vert,fragmentShader:R0.meshphong_frag},standard:{uniforms:ce([s0.common,s0.envmap,s0.aomap,s0.lightmap,s0.emissivemap,s0.bumpmap,s0.normalmap,s0.displacementmap,s0.roughnessmap,s0.metalnessmap,s0.fog,s0.lights,{emissive:{value:new H0(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:R0.meshphysical_vert,fragmentShader:R0.meshphysical_frag},toon:{uniforms:ce([s0.common,s0.aomap,s0.lightmap,s0.emissivemap,s0.bumpmap,s0.normalmap,s0.displacementmap,s0.gradientmap,s0.fog,s0.lights,{emissive:{value:new H0(0)}}]),vertexShader:R0.meshtoon_vert,fragmentShader:R0.meshtoon_frag},matcap:{uniforms:ce([s0.common,s0.bumpmap,s0.normalmap,s0.displacementmap,s0.fog,{matcap:{value:null}}]),vertexShader:R0.meshmatcap_vert,fragmentShader:R0.meshmatcap_frag},points:{uniforms:ce([s0.points,s0.fog]),vertexShader:R0.points_vert,fragmentShader:R0.points_frag},dashed:{uniforms:ce([s0.common,s0.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:R0.linedashed_vert,fragmentShader:R0.linedashed_frag},depth:{uniforms:ce([s0.common,s0.displacementmap]),vertexShader:R0.depth_vert,fragmentShader:R0.depth_frag},normal:{uniforms:ce([s0.common,s0.bumpmap,s0.normalmap,s0.displacementmap,{opacity:{value:1}}]),vertexShader:R0.meshnormal_vert,fragmentShader:R0.meshnormal_frag},sprite:{uniforms:ce([s0.sprite,s0.fog]),vertexShader:R0.sprite_vert,fragmentShader:R0.sprite_frag},background:{uniforms:{uvTransform:{value:new U0},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:R0.background_vert,fragmentShader:R0.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1}},vertexShader:R0.backgroundCube_vert,fragmentShader:R0.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:R0.cube_vert,fragmentShader:R0.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:R0.equirect_vert,fragmentShader:R0.equirect_frag},distanceRGBA:{uniforms:ce([s0.common,s0.displacementmap,{referencePosition:{value:new D},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:R0.distanceRGBA_vert,fragmentShader:R0.distanceRGBA_frag},shadow:{uniforms:ce([s0.lights,s0.fog,{color:{value:new H0(0)},opacity:{value:1}}]),vertexShader:R0.shadow_vert,fragmentShader:R0.shadow_frag}};Ne.physical={uniforms:ce([Ne.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new U0},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new U0},clearcoatNormalScale:{value:new I0(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new U0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new U0},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new U0},sheen:{value:0},sheenColor:{value:new H0(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new U0},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new U0},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new U0},transmissionSamplerSize:{value:new I0},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new U0},attenuationDistance:{value:0},attenuationColor:{value:new H0(0)},specularColor:{value:new H0(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new U0},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new U0}}]),vertexShader:R0.meshphysical_vert,fragmentShader:R0.meshphysical_frag};const Pn={r:0,b:0,g:0};function n4(i,e,t,n,r,s,o){const a=new H0(0);let u=s===!0?0:1,l,h,f=null,d=0,m=null;function v(p,c){let y=!1,M=c.isScene===!0?c.background:null;switch(M&&M.isTexture&&(M=(c.backgroundBlurriness>0?t:e).get(M)),M===null?x(a,u):M&&M.isColor&&(x(M,1),y=!0),i.xr.getEnvironmentBlendMode()){case"opaque":y=!0;break;case"additive":n.buffers.color.setClear(0,0,0,1,o),y=!0;break;case"alpha-blend":n.buffers.color.setClear(0,0,0,0,o),y=!0;break}(i.autoClear||y)&&i.clear(i.autoClearColor,i.autoClearDepth,i.autoClearStencil),M&&(M.isCubeTexture||M.mapping===On)?(h===void 0&&(h=new qe(new un(1,1,1),new St({name:"BackgroundCubeMaterial",uniforms:Kt(Ne.backgroundCube.uniforms),vertexShader:Ne.backgroundCube.vertexShader,fragmentShader:Ne.backgroundCube.fragmentShader,side:de,depthTest:!1,depthWrite:!1,fog:!1})),h.geometry.deleteAttribute("normal"),h.geometry.deleteAttribute("uv"),h.onBeforeRender=function(R,U,k){this.matrixWorld.copyPosition(k.matrixWorld)},Object.defineProperty(h.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),r.update(h)),h.material.uniforms.envMap.value=M,h.material.uniforms.flipEnvMap.value=M.isCubeTexture&&M.isRenderTargetTexture===!1?-1:1,h.material.uniforms.backgroundBlurriness.value=c.backgroundBlurriness,h.material.uniforms.backgroundIntensity.value=c.backgroundIntensity,h.material.toneMapped=M.colorSpace!==b0,(f!==M||d!==M.version||m!==i.toneMapping)&&(h.material.needsUpdate=!0,f=M,d=M.version,m=i.toneMapping),h.layers.enableAll(),p.unshift(h,h.geometry,h.material,0,0,null)):M&&M.isTexture&&(l===void 0&&(l=new qe(new F1(2,2),new St({name:"BackgroundMaterial",uniforms:Kt(Ne.background.uniforms),vertexShader:Ne.background.vertexShader,fragmentShader:Ne.background.fragmentShader,side:tt,depthTest:!1,depthWrite:!1,fog:!1})),l.geometry.deleteAttribute("normal"),Object.defineProperty(l.material,"map",{get:function(){return this.uniforms.t2D.value}}),r.update(l)),l.material.uniforms.t2D.value=M,l.material.uniforms.backgroundIntensity.value=c.backgroundIntensity,l.material.toneMapped=M.colorSpace!==b0,M.matrixAutoUpdate===!0&&M.updateMatrix(),l.material.uniforms.uvTransform.value.copy(M.matrix),(f!==M||d!==M.version||m!==i.toneMapping)&&(l.material.needsUpdate=!0,f=M,d=M.version,m=i.toneMapping),l.layers.enableAll(),p.unshift(l,l.geometry,l.material,0,0,null))}function x(p,c){p.getRGB(Pn,N2(i)),n.buffers.color.setClear(Pn.r,Pn.g,Pn.b,c,o)}return{getClearColor:function(){return a},setClearColor:function(p,c=1){a.set(p),u=c,x(a,u)},getClearAlpha:function(){return u},setClearAlpha:function(p){u=p,x(a,u)},render:v}}function i4(i,e,t,n){const r=i.getParameter(i.MAX_VERTEX_ATTRIBS),s=n.isWebGL2?null:e.get("OES_vertex_array_object"),o=n.isWebGL2||s!==null,a={},u=p(null);let l=u,h=!1;function f(B,V,n0,Y,X){let Z=!1;if(o){const e0=x(Y,n0,V);l!==e0&&(l=e0,m(l.object)),Z=c(B,Y,n0,X),Z&&y(B,Y,n0,X)}else{const e0=V.wireframe===!0;(l.geometry!==Y.id||l.program!==n0.id||l.wireframe!==e0)&&(l.geometry=Y.id,l.program=n0.id,l.wireframe=e0,Z=!0)}X!==null&&t.update(X,i.ELEMENT_ARRAY_BUFFER),(Z||h)&&(h=!1,k(B,V,n0,Y),X!==null&&i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,t.get(X).buffer))}function d(){return n.isWebGL2?i.createVertexArray():s.createVertexArrayOES()}function m(B){return n.isWebGL2?i.bindVertexArray(B):s.bindVertexArrayOES(B)}function v(B){return n.isWebGL2?i.deleteVertexArray(B):s.deleteVertexArrayOES(B)}function x(B,V,n0){const Y=n0.wireframe===!0;let X=a[B.id];X===void 0&&(X={},a[B.id]=X);let Z=X[V.id];Z===void 0&&(Z={},X[V.id]=Z);let e0=Z[Y];return e0===void 0&&(e0=p(d()),Z[Y]=e0),e0}function p(B){const V=[],n0=[],Y=[];for(let X=0;X<r;X++)V[X]=0,n0[X]=0,Y[X]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:V,enabledAttributes:n0,attributeDivisors:Y,object:B,attributes:{},index:null}}function c(B,V,n0,Y){const X=l.attributes,Z=V.attributes;let e0=0;const p0=n0.getAttributes();for(const c0 in p0)if(p0[c0].location>=0){const K=X[c0];let r0=Z[c0];if(r0===void 0&&(c0==="instanceMatrix"&&B.instanceMatrix&&(r0=B.instanceMatrix),c0==="instanceColor"&&B.instanceColor&&(r0=B.instanceColor)),K===void 0||K.attribute!==r0||r0&&K.data!==r0.data)return!0;e0++}return l.attributesNum!==e0||l.index!==Y}function y(B,V,n0,Y){const X={},Z=V.attributes;let e0=0;const p0=n0.getAttributes();for(const c0 in p0)if(p0[c0].location>=0){let K=Z[c0];K===void 0&&(c0==="instanceMatrix"&&B.instanceMatrix&&(K=B.instanceMatrix),c0==="instanceColor"&&B.instanceColor&&(K=B.instanceColor));const r0={};r0.attribute=K,K&&K.data&&(r0.data=K.data),X[c0]=r0,e0++}l.attributes=X,l.attributesNum=e0,l.index=Y}function M(){const B=l.newAttributes;for(let V=0,n0=B.length;V<n0;V++)B[V]=0}function L(B){T(B,0)}function T(B,V){const n0=l.newAttributes,Y=l.enabledAttributes,X=l.attributeDivisors;n0[B]=1,Y[B]===0&&(i.enableVertexAttribArray(B),Y[B]=1),X[B]!==V&&((n.isWebGL2?i:e.get("ANGLE_instanced_arrays"))[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](B,V),X[B]=V)}function R(){const B=l.newAttributes,V=l.enabledAttributes;for(let n0=0,Y=V.length;n0<Y;n0++)V[n0]!==B[n0]&&(i.disableVertexAttribArray(n0),V[n0]=0)}function U(B,V,n0,Y,X,Z){n.isWebGL2===!0&&(n0===i.INT||n0===i.UNSIGNED_INT)?i.vertexAttribIPointer(B,V,n0,X,Z):i.vertexAttribPointer(B,V,n0,Y,X,Z)}function k(B,V,n0,Y){if(n.isWebGL2===!1&&(B.isInstancedMesh||Y.isInstancedBufferGeometry)&&e.get("ANGLE_instanced_arrays")===null)return;M();const X=Y.attributes,Z=n0.getAttributes(),e0=V.defaultAttributeValues;for(const p0 in Z){const c0=Z[p0];if(c0.location>=0){let z=X[p0];if(z===void 0&&(p0==="instanceMatrix"&&B.instanceMatrix&&(z=B.instanceMatrix),p0==="instanceColor"&&B.instanceColor&&(z=B.instanceColor)),z!==void 0){const K=z.normalized,r0=z.itemSize,l0=t.get(z);if(l0===void 0)continue;const C=l0.buffer,E0=l0.type,S0=l0.bytesPerElement;if(z.isInterleavedBufferAttribute){const i0=z.data,x0=i0.stride,O0=z.offset;if(i0.isInstancedInterleavedBuffer){for(let g0=0;g0<c0.locationSize;g0++)T(c0.location+g0,i0.meshPerAttribute);B.isInstancedMesh!==!0&&Y._maxInstanceCount===void 0&&(Y._maxInstanceCount=i0.meshPerAttribute*i0.count)}else for(let g0=0;g0<c0.locationSize;g0++)L(c0.location+g0);i.bindBuffer(i.ARRAY_BUFFER,C);for(let g0=0;g0<c0.locationSize;g0++)U(c0.location+g0,r0/c0.locationSize,E0,K,x0*S0,(O0+r0/c0.locationSize*g0)*S0)}else{if(z.isInstancedBufferAttribute){for(let i0=0;i0<c0.locationSize;i0++)T(c0.location+i0,z.meshPerAttribute);B.isInstancedMesh!==!0&&Y._maxInstanceCount===void 0&&(Y._maxInstanceCount=z.meshPerAttribute*z.count)}else for(let i0=0;i0<c0.locationSize;i0++)L(c0.location+i0);i.bindBuffer(i.ARRAY_BUFFER,C);for(let i0=0;i0<c0.locationSize;i0++)U(c0.location+i0,r0/c0.locationSize,E0,K,r0*S0,r0/c0.locationSize*i0*S0)}}else if(e0!==void 0){const K=e0[p0];if(K!==void 0)switch(K.length){case 2:i.vertexAttrib2fv(c0.location,K);break;case 3:i.vertexAttrib3fv(c0.location,K);break;case 4:i.vertexAttrib4fv(c0.location,K);break;default:i.vertexAttrib1fv(c0.location,K)}}}}R()}function _(){$();for(const B in a){const V=a[B];for(const n0 in V){const Y=V[n0];for(const X in Y)v(Y[X].object),delete Y[X];delete V[n0]}delete a[B]}}function b(B){if(a[B.id]===void 0)return;const V=a[B.id];for(const n0 in V){const Y=V[n0];for(const X in Y)v(Y[X].object),delete Y[X];delete V[n0]}delete a[B.id]}function j(B){for(const V in a){const n0=a[V];if(n0[B.id]===void 0)continue;const Y=n0[B.id];for(const X in Y)v(Y[X].object),delete Y[X];delete n0[B.id]}}function $(){I(),h=!0,l!==u&&(l=u,m(l.object))}function I(){u.geometry=null,u.program=null,u.wireframe=!1}return{setup:f,reset:$,resetDefaultState:I,dispose:_,releaseStatesOfGeometry:b,releaseStatesOfProgram:j,initAttributes:M,enableAttribute:L,disableUnusedAttributes:R}}function r4(i,e,t,n){const r=n.isWebGL2;let s;function o(l){s=l}function a(l,h){i.drawArrays(s,l,h),t.update(h,s,1)}function u(l,h,f){if(f===0)return;let d,m;if(r)d=i,m="drawArraysInstanced";else if(d=e.get("ANGLE_instanced_arrays"),m="drawArraysInstancedANGLE",d===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}d[m](s,l,h,f),t.update(h,s,f)}this.setMode=o,this.render=a,this.renderInstances=u}function s4(i,e,t){let n;function r(){if(n!==void 0)return n;if(e.has("EXT_texture_filter_anisotropic")===!0){const U=e.get("EXT_texture_filter_anisotropic");n=i.getParameter(U.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else n=0;return n}function s(U){if(U==="highp"){if(i.getShaderPrecisionFormat(i.VERTEX_SHADER,i.HIGH_FLOAT).precision>0&&i.getShaderPrecisionFormat(i.FRAGMENT_SHADER,i.HIGH_FLOAT).precision>0)return"highp";U="mediump"}return U==="mediump"&&i.getShaderPrecisionFormat(i.VERTEX_SHADER,i.MEDIUM_FLOAT).precision>0&&i.getShaderPrecisionFormat(i.FRAGMENT_SHADER,i.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}const o=typeof WebGL2RenderingContext<"u"&&i.constructor.name==="WebGL2RenderingContext";let a=t.precision!==void 0?t.precision:"highp";const u=s(a);u!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",u,"instead."),a=u);const l=o||e.has("WEBGL_draw_buffers"),h=t.logarithmicDepthBuffer===!0,f=i.getParameter(i.MAX_TEXTURE_IMAGE_UNITS),d=i.getParameter(i.MAX_VERTEX_TEXTURE_IMAGE_UNITS),m=i.getParameter(i.MAX_TEXTURE_SIZE),v=i.getParameter(i.MAX_CUBE_MAP_TEXTURE_SIZE),x=i.getParameter(i.MAX_VERTEX_ATTRIBS),p=i.getParameter(i.MAX_VERTEX_UNIFORM_VECTORS),c=i.getParameter(i.MAX_VARYING_VECTORS),y=i.getParameter(i.MAX_FRAGMENT_UNIFORM_VECTORS),M=d>0,L=o||e.has("OES_texture_float"),T=M&&L,R=o?i.getParameter(i.MAX_SAMPLES):0;return{isWebGL2:o,drawBuffers:l,getMaxAnisotropy:r,getMaxPrecision:s,precision:a,logarithmicDepthBuffer:h,maxTextures:f,maxVertexTextures:d,maxTextureSize:m,maxCubemapSize:v,maxAttributes:x,maxVertexUniforms:p,maxVaryings:c,maxFragmentUniforms:y,vertexTextures:M,floatFragmentTextures:L,floatVertexTextures:T,maxSamples:R}}function a4(i){const e=this;let t=null,n=0,r=!1,s=!1;const o=new lt,a=new U0,u={value:null,needsUpdate:!1};this.uniform=u,this.numPlanes=0,this.numIntersection=0,this.init=function(f,d){const m=f.length!==0||d||n!==0||r;return r=d,n=f.length,m},this.beginShadows=function(){s=!0,h(null)},this.endShadows=function(){s=!1},this.setGlobalState=function(f,d){t=h(f,d,0)},this.setState=function(f,d,m){const v=f.clippingPlanes,x=f.clipIntersection,p=f.clipShadows,c=i.get(f);if(!r||v===null||v.length===0||s&&!p)s?h(null):l();else{const y=s?0:n,M=y*4;let L=c.clippingState||null;u.value=L,L=h(v,d,M,m);for(let T=0;T!==M;++T)L[T]=t[T];c.clippingState=L,this.numIntersection=x?this.numPlanes:0,this.numPlanes+=y}};function l(){u.value!==t&&(u.value=t,u.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function h(f,d,m,v){const x=f!==null?f.length:0;let p=null;if(x!==0){if(p=u.value,v!==!0||p===null){const c=m+x*4,y=d.matrixWorldInverse;a.getNormalMatrix(y),(p===null||p.length<c)&&(p=new Float32Array(c));for(let M=0,L=m;M!==x;++M,L+=4)o.copy(f[M]).applyMatrix4(y,a),o.normal.toArray(p,L),p[L+3]=o.constant}u.value=p,u.needsUpdate=!0}return e.numPlanes=x,e.numIntersection=0,p}}function o4(i){let e=new WeakMap;function t(o,a){return a===A1?o.mapping=qt:a===w1&&(o.mapping=Yt),o}function n(o){if(o&&o.isTexture&&o.isRenderTargetTexture===!1){const a=o.mapping;if(a===A1||a===w1)if(e.has(o)){const u=e.get(o).texture;return t(u,o.mapping)}else{const u=o.image;if(u&&u.height>0){const l=new Es(u.height/2);return l.fromEquirectangularTexture(i,o),e.set(o,l),o.addEventListener("dispose",r),t(l.texture,o.mapping)}else return null}}return o}function r(o){const a=o.target;a.removeEventListener("dispose",r);const u=e.get(a);u!==void 0&&(e.delete(a),u.dispose())}function s(){e=new WeakMap}return{get:n,dispose:s}}class l4 extends F2{constructor(e=-1,t=1,n=1,r=-1,s=.1,o=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=r,this.near=s,this.far=o,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,n,r,s,o){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=r,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,r=(this.top+this.bottom)/2;let s=n-e,o=n+e,a=r+t,u=r-t;if(this.view!==null&&this.view.enabled){const l=(this.right-this.left)/this.view.fullWidth/this.zoom,h=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=l*this.view.offsetX,o=s+l*this.view.width,a-=h*this.view.offsetY,u=a-h*this.view.height}this.projectionMatrix.makeOrthographic(s,o,a,u,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}}const Vt=4,zi=[.125,.215,.35,.446,.526,.582],dt=20,x1=new l4,Gi=new H0;let M1=null;const ct=(1+Math.sqrt(5))/2,Gt=1/ct,Hi=[new D(1,1,1),new D(-1,1,1),new D(1,1,-1),new D(-1,1,-1),new D(0,ct,Gt),new D(0,ct,-Gt),new D(Gt,0,ct),new D(-Gt,0,ct),new D(ct,Gt,0),new D(-ct,Gt,0)];class Vi{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,r=100){M1=this._renderer.getRenderTarget(),this._setSize(256);const s=this._allocateTargets();return s.depthBuffer=!0,this._sceneToCubeUV(e,n,r,s),t>0&&this._blur(s,0,0,t),this._applyPMREM(s),this._cleanup(s),s}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=Xi(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=Wi(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(M1),e.scissorTest=!1,Dn(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===qt||e.mapping===Yt?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),M1=this._renderer.getRenderTarget();const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:Se,minFilter:Se,generateMipmaps:!1,type:an,format:Pe,colorSpace:Oe,depthBuffer:!1},r=ki(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=ki(e,t,n);const{_lodMax:s}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=c4(s)),this._blurMaterial=u4(s,e,t)}return r}_compileMaterial(e){const t=new qe(this._lodPlanes[0],e);this._renderer.compile(t,x1)}_sceneToCubeUV(e,t,n,r){const a=new Ee(90,1,t,n),u=[1,-1,1,1,1,1],l=[1,1,1,-1,-1,-1],h=this._renderer,f=h.autoClear,d=h.toneMapping;h.getClearColor(Gi),h.toneMapping=Ye,h.autoClear=!1;const m=new N1({name:"PMREM.Background",side:de,depthWrite:!1,depthTest:!1}),v=new qe(new un,m);let x=!1;const p=e.background;p?p.isColor&&(m.color.copy(p),e.background=null,x=!0):(m.color.copy(Gi),x=!0);for(let c=0;c<6;c++){const y=c%3;y===0?(a.up.set(0,u[c],0),a.lookAt(l[c],0,0)):y===1?(a.up.set(0,0,u[c]),a.lookAt(0,l[c],0)):(a.up.set(0,u[c],0),a.lookAt(0,0,l[c]));const M=this._cubeSize;Dn(r,y*M,c>2?M:0,M,M),h.setRenderTarget(r),x&&h.render(v,a),h.render(e,a)}v.geometry.dispose(),v.material.dispose(),h.toneMapping=d,h.autoClear=f,e.background=p}_textureToCubeUV(e,t){const n=this._renderer,r=e.mapping===qt||e.mapping===Yt;r?(this._cubemapMaterial===null&&(this._cubemapMaterial=Xi()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=Wi());const s=r?this._cubemapMaterial:this._equirectMaterial,o=new qe(this._lodPlanes[0],s),a=s.uniforms;a.envMap.value=e;const u=this._cubeSize;Dn(t,0,0,3*u,2*u),n.setRenderTarget(t),n.render(o,x1)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;for(let r=1;r<this._lodPlanes.length;r++){const s=Math.sqrt(this._sigmas[r]*this._sigmas[r]-this._sigmas[r-1]*this._sigmas[r-1]),o=Hi[(r-1)%Hi.length];this._blur(e,r-1,r,s,o)}t.autoClear=n}_blur(e,t,n,r,s){const o=this._pingPongRenderTarget;this._halfBlur(e,o,t,n,r,"latitudinal",s),this._halfBlur(o,e,n,n,r,"longitudinal",s)}_halfBlur(e,t,n,r,s,o,a){const u=this._renderer,l=this._blurMaterial;o!=="latitudinal"&&o!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const h=3,f=new qe(this._lodPlanes[r],l),d=l.uniforms,m=this._sizeLods[n]-1,v=isFinite(s)?Math.PI/(2*m):2*Math.PI/(2*dt-1),x=s/v,p=isFinite(s)?1+Math.floor(h*x):dt;p>dt&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${p} samples when the maximum is set to ${dt}`);const c=[];let y=0;for(let U=0;U<dt;++U){const k=U/x,_=Math.exp(-k*k/2);c.push(_),U===0?y+=_:U<p&&(y+=2*_)}for(let U=0;U<c.length;U++)c[U]=c[U]/y;d.envMap.value=e.texture,d.samples.value=p,d.weights.value=c,d.latitudinal.value=o==="latitudinal",a&&(d.poleAxis.value=a);const{_lodMax:M}=this;d.dTheta.value=v,d.mipInt.value=M-n;const L=this._sizeLods[r],T=3*L*(r>M-Vt?r-M+Vt:0),R=4*(this._cubeSize-L);Dn(t,T,R,3*L,2*L),u.setRenderTarget(t),u.render(f,x1)}}function c4(i){const e=[],t=[],n=[];let r=i;const s=i-Vt+1+zi.length;for(let o=0;o<s;o++){const a=Math.pow(2,r);t.push(a);let u=1/a;o>i-Vt?u=zi[o-i+Vt-1]:o===0&&(u=0),n.push(u);const l=1/(a-2),h=-l,f=1+l,d=[h,h,f,h,f,f,h,h,f,f,h,f],m=6,v=6,x=3,p=2,c=1,y=new Float32Array(x*v*m),M=new Float32Array(p*v*m),L=new Float32Array(c*v*m);for(let R=0;R<m;R++){const U=R%3*2/3-1,k=R>2?0:-1,_=[U,k,0,U+2/3,k,0,U+2/3,k+1,0,U,k,0,U+2/3,k+1,0,U,k+1,0];y.set(_,x*v*R),M.set(d,p*v*R);const b=[R,R,R,R,R,R];L.set(b,c*v*R)}const T=new Be;T.setAttribute("position",new Te(y,x)),T.setAttribute("uv",new Te(M,p)),T.setAttribute("faceIndex",new Te(L,c)),e.push(T),r>Vt&&r--}return{lodPlanes:e,sizeLods:t,sigmas:n}}function ki(i,e,t){const n=new xt(i,e,t);return n.texture.mapping=On,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function Dn(i,e,t,n,r){i.viewport.set(e,t,n,r),i.scissor.set(e,t,n,r)}function u4(i,e,t){const n=new Float32Array(dt),r=new D(0,1,0);return new St({name:"SphericalGaussianBlur",defines:{n:dt,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/t,CUBEUV_MAX_MIP:`${i}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:O1(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:et,depthTest:!1,depthWrite:!1})}function Wi(){return new St({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:O1(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:et,depthTest:!1,depthWrite:!1})}function Xi(){return new St({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:O1(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:et,depthTest:!1,depthWrite:!1})}function O1(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function h4(i){let e=new WeakMap,t=null;function n(a){if(a&&a.isTexture){const u=a.mapping,l=u===A1||u===w1,h=u===qt||u===Yt;if(l||h)if(a.isRenderTargetTexture&&a.needsPMREMUpdate===!0){a.needsPMREMUpdate=!1;let f=e.get(a);return t===null&&(t=new Vi(i)),f=l?t.fromEquirectangular(a,f):t.fromCubemap(a,f),e.set(a,f),f.texture}else{if(e.has(a))return e.get(a).texture;{const f=a.image;if(l&&f&&f.height>0||h&&f&&r(f)){t===null&&(t=new Vi(i));const d=l?t.fromEquirectangular(a):t.fromCubemap(a);return e.set(a,d),a.addEventListener("dispose",s),d.texture}else return null}}}return a}function r(a){let u=0;const l=6;for(let h=0;h<l;h++)a[h]!==void 0&&u++;return u===l}function s(a){const u=a.target;u.removeEventListener("dispose",s);const l=e.get(u);l!==void 0&&(e.delete(u),l.dispose())}function o(){e=new WeakMap,t!==null&&(t.dispose(),t=null)}return{get:n,dispose:o}}function d4(i){const e={};function t(n){if(e[n]!==void 0)return e[n];let r;switch(n){case"WEBGL_depth_texture":r=i.getExtension("WEBGL_depth_texture")||i.getExtension("MOZ_WEBGL_depth_texture")||i.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":r=i.getExtension("EXT_texture_filter_anisotropic")||i.getExtension("MOZ_EXT_texture_filter_anisotropic")||i.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":r=i.getExtension("WEBGL_compressed_texture_s3tc")||i.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||i.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":r=i.getExtension("WEBGL_compressed_texture_pvrtc")||i.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:r=i.getExtension(n)}return e[n]=r,r}return{has:function(n){return t(n)!==null},init:function(n){n.isWebGL2?t("EXT_color_buffer_float"):(t("WEBGL_depth_texture"),t("OES_texture_float"),t("OES_texture_half_float"),t("OES_texture_half_float_linear"),t("OES_standard_derivatives"),t("OES_element_index_uint"),t("OES_vertex_array_object"),t("ANGLE_instanced_arrays")),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float"),t("WEBGL_multisampled_render_to_texture")},get:function(n){const r=t(n);return r===null&&console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),r}}}function f4(i,e,t,n){const r={},s=new WeakMap;function o(f){const d=f.target;d.index!==null&&e.remove(d.index);for(const v in d.attributes)e.remove(d.attributes[v]);d.removeEventListener("dispose",o),delete r[d.id];const m=s.get(d);m&&(e.remove(m),s.delete(d)),n.releaseStatesOfGeometry(d),d.isInstancedBufferGeometry===!0&&delete d._maxInstanceCount,t.memory.geometries--}function a(f,d){return r[d.id]===!0||(d.addEventListener("dispose",o),r[d.id]=!0,t.memory.geometries++),d}function u(f){const d=f.attributes;for(const v in d)e.update(d[v],i.ARRAY_BUFFER);const m=f.morphAttributes;for(const v in m){const x=m[v];for(let p=0,c=x.length;p<c;p++)e.update(x[p],i.ARRAY_BUFFER)}}function l(f){const d=[],m=f.index,v=f.attributes.position;let x=0;if(m!==null){const y=m.array;x=m.version;for(let M=0,L=y.length;M<L;M+=3){const T=y[M+0],R=y[M+1],U=y[M+2];d.push(T,R,R,U,U,T)}}else{const y=v.array;x=v.version;for(let M=0,L=y.length/3-1;M<L;M+=3){const T=M+0,R=M+1,U=M+2;d.push(T,R,R,U,U,T)}}const p=new(A2(d)?I2:U2)(d,1);p.version=x;const c=s.get(f);c&&e.remove(c),s.set(f,p)}function h(f){const d=s.get(f);if(d){const m=f.index;m!==null&&d.version<m.version&&l(f)}else l(f);return s.get(f)}return{get:a,update:u,getWireframeAttribute:h}}function p4(i,e,t,n){const r=n.isWebGL2;let s;function o(d){s=d}let a,u;function l(d){a=d.type,u=d.bytesPerElement}function h(d,m){i.drawElements(s,m,a,d*u),t.update(m,s,1)}function f(d,m,v){if(v===0)return;let x,p;if(r)x=i,p="drawElementsInstanced";else if(x=e.get("ANGLE_instanced_arrays"),p="drawElementsInstancedANGLE",x===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}x[p](s,m,a,d*u,v),t.update(m,s,v)}this.setMode=o,this.setIndex=l,this.render=h,this.renderInstances=f}function m4(i){const e={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function n(s,o,a){switch(t.calls++,o){case i.TRIANGLES:t.triangles+=a*(s/3);break;case i.LINES:t.lines+=a*(s/2);break;case i.LINE_STRIP:t.lines+=a*(s-1);break;case i.LINE_LOOP:t.lines+=a*s;break;case i.POINTS:t.points+=a*s;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",o);break}}function r(){t.frame++,t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:e,render:t,programs:null,autoReset:!0,reset:r,update:n}}function _4(i,e){return i[0]-e[0]}function g4(i,e){return Math.abs(e[1])-Math.abs(i[1])}function v4(i,e,t){const n={},r=new Float32Array(8),s=new WeakMap,o=new ne,a=[];for(let l=0;l<8;l++)a[l]=[l,0];function u(l,h,f){const d=l.morphTargetInfluences;if(e.isWebGL2===!0){const m=h.morphAttributes.position||h.morphAttributes.normal||h.morphAttributes.color,v=m!==void 0?m.length:0;let x=s.get(h);if(x===void 0||x.count!==v){let B=function(){$.dispose(),s.delete(h),h.removeEventListener("dispose",B)};x!==void 0&&x.texture.dispose();const y=h.morphAttributes.position!==void 0,M=h.morphAttributes.normal!==void 0,L=h.morphAttributes.color!==void 0,T=h.morphAttributes.position||[],R=h.morphAttributes.normal||[],U=h.morphAttributes.color||[];let k=0;y===!0&&(k=1),M===!0&&(k=2),L===!0&&(k=3);let _=h.attributes.position.count*k,b=1;_>e.maxTextureSize&&(b=Math.ceil(_/e.maxTextureSize),_=e.maxTextureSize);const j=new Float32Array(_*b*4*v),$=new C2(j,_,b,v);$.type=pt,$.needsUpdate=!0;const I=k*4;for(let V=0;V<v;V++){const n0=T[V],Y=R[V],X=U[V],Z=_*b*4*V;for(let e0=0;e0<n0.count;e0++){const p0=e0*I;y===!0&&(o.fromBufferAttribute(n0,e0),j[Z+p0+0]=o.x,j[Z+p0+1]=o.y,j[Z+p0+2]=o.z,j[Z+p0+3]=0),M===!0&&(o.fromBufferAttribute(Y,e0),j[Z+p0+4]=o.x,j[Z+p0+5]=o.y,j[Z+p0+6]=o.z,j[Z+p0+7]=0),L===!0&&(o.fromBufferAttribute(X,e0),j[Z+p0+8]=o.x,j[Z+p0+9]=o.y,j[Z+p0+10]=o.z,j[Z+p0+11]=X.itemSize===4?o.w:1)}}x={count:v,texture:$,size:new I0(_,b)},s.set(h,x),h.addEventListener("dispose",B)}let p=0;for(let y=0;y<d.length;y++)p+=d[y];const c=h.morphTargetsRelative?1:1-p;f.getUniforms().setValue(i,"morphTargetBaseInfluence",c),f.getUniforms().setValue(i,"morphTargetInfluences",d),f.getUniforms().setValue(i,"morphTargetsTexture",x.texture,t),f.getUniforms().setValue(i,"morphTargetsTextureSize",x.size)}else{const m=d===void 0?0:d.length;let v=n[h.id];if(v===void 0||v.length!==m){v=[];for(let M=0;M<m;M++)v[M]=[M,0];n[h.id]=v}for(let M=0;M<m;M++){const L=v[M];L[0]=M,L[1]=d[M]}v.sort(g4);for(let M=0;M<8;M++)M<m&&v[M][1]?(a[M][0]=v[M][0],a[M][1]=v[M][1]):(a[M][0]=Number.MAX_SAFE_INTEGER,a[M][1]=0);a.sort(_4);const x=h.morphAttributes.position,p=h.morphAttributes.normal;let c=0;for(let M=0;M<8;M++){const L=a[M],T=L[0],R=L[1];T!==Number.MAX_SAFE_INTEGER&&R?(x&&h.getAttribute("morphTarget"+M)!==x[T]&&h.setAttribute("morphTarget"+M,x[T]),p&&h.getAttribute("morphNormal"+M)!==p[T]&&h.setAttribute("morphNormal"+M,p[T]),r[M]=R,c+=R):(x&&h.hasAttribute("morphTarget"+M)===!0&&h.deleteAttribute("morphTarget"+M),p&&h.hasAttribute("morphNormal"+M)===!0&&h.deleteAttribute("morphNormal"+M),r[M]=0)}const y=h.morphTargetsRelative?1:1-c;f.getUniforms().setValue(i,"morphTargetBaseInfluence",y),f.getUniforms().setValue(i,"morphTargetInfluences",r)}}return{update:u}}function x4(i,e,t,n){let r=new WeakMap;function s(u){const l=n.render.frame,h=u.geometry,f=e.get(u,h);return r.get(f)!==l&&(e.update(f),r.set(f,l)),u.isInstancedMesh&&(u.hasEventListener("dispose",a)===!1&&u.addEventListener("dispose",a),t.update(u.instanceMatrix,i.ARRAY_BUFFER),u.instanceColor!==null&&t.update(u.instanceColor,i.ARRAY_BUFFER)),f}function o(){r=new WeakMap}function a(u){const l=u.target;l.removeEventListener("dispose",a),t.remove(l.instanceMatrix),l.instanceColor!==null&&t.remove(l.instanceColor)}return{update:s,dispose:o}}const G2=new ve,H2=new C2,V2=new as,k2=new O2,qi=[],Yi=[],ji=new Float32Array(16),Ki=new Float32Array(9),Zi=new Float32Array(4);function Zt(i,e,t){const n=i[0];if(n<=0||n>0)return i;const r=e*t;let s=qi[r];if(s===void 0&&(s=new Float32Array(r),qi[r]=s),e!==0){n.toArray(s,0);for(let o=1,a=0;o!==e;++o)a+=t,i[o].toArray(s,a)}return s}function $0(i,e){if(i.length!==e.length)return!1;for(let t=0,n=i.length;t<n;t++)if(i[t]!==e[t])return!1;return!0}function J0(i,e){for(let t=0,n=e.length;t<n;t++)i[t]=e[t]}function Gn(i,e){let t=Yi[e];t===void 0&&(t=new Int32Array(e),Yi[e]=t);for(let n=0;n!==e;++n)t[n]=i.allocateTextureUnit();return t}function M4(i,e){const t=this.cache;t[0]!==e&&(i.uniform1f(this.addr,e),t[0]=e)}function S4(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(i.uniform2f(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if($0(t,e))return;i.uniform2fv(this.addr,e),J0(t,e)}}function E4(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(i.uniform3f(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else if(e.r!==void 0)(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b)&&(i.uniform3f(this.addr,e.r,e.g,e.b),t[0]=e.r,t[1]=e.g,t[2]=e.b);else{if($0(t,e))return;i.uniform3fv(this.addr,e),J0(t,e)}}function T4(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(i.uniform4f(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if($0(t,e))return;i.uniform4fv(this.addr,e),J0(t,e)}}function y4(i,e){const t=this.cache,n=e.elements;if(n===void 0){if($0(t,e))return;i.uniformMatrix2fv(this.addr,!1,e),J0(t,e)}else{if($0(t,n))return;Zi.set(n),i.uniformMatrix2fv(this.addr,!1,Zi),J0(t,n)}}function b4(i,e){const t=this.cache,n=e.elements;if(n===void 0){if($0(t,e))return;i.uniformMatrix3fv(this.addr,!1,e),J0(t,e)}else{if($0(t,n))return;Ki.set(n),i.uniformMatrix3fv(this.addr,!1,Ki),J0(t,n)}}function A4(i,e){const t=this.cache,n=e.elements;if(n===void 0){if($0(t,e))return;i.uniformMatrix4fv(this.addr,!1,e),J0(t,e)}else{if($0(t,n))return;ji.set(n),i.uniformMatrix4fv(this.addr,!1,ji),J0(t,n)}}function w4(i,e){const t=this.cache;t[0]!==e&&(i.uniform1i(this.addr,e),t[0]=e)}function R4(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(i.uniform2i(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if($0(t,e))return;i.uniform2iv(this.addr,e),J0(t,e)}}function C4(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(i.uniform3i(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if($0(t,e))return;i.uniform3iv(this.addr,e),J0(t,e)}}function L4(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(i.uniform4i(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if($0(t,e))return;i.uniform4iv(this.addr,e),J0(t,e)}}function P4(i,e){const t=this.cache;t[0]!==e&&(i.uniform1ui(this.addr,e),t[0]=e)}function D4(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(i.uniform2ui(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if($0(t,e))return;i.uniform2uiv(this.addr,e),J0(t,e)}}function U4(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(i.uniform3ui(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if($0(t,e))return;i.uniform3uiv(this.addr,e),J0(t,e)}}function I4(i,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(i.uniform4ui(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if($0(t,e))return;i.uniform4uiv(this.addr,e),J0(t,e)}}function N4(i,e,t){const n=this.cache,r=t.allocateTextureUnit();n[0]!==r&&(i.uniform1i(this.addr,r),n[0]=r),t.setTexture2D(e||G2,r)}function F4(i,e,t){const n=this.cache,r=t.allocateTextureUnit();n[0]!==r&&(i.uniform1i(this.addr,r),n[0]=r),t.setTexture3D(e||V2,r)}function O4(i,e,t){const n=this.cache,r=t.allocateTextureUnit();n[0]!==r&&(i.uniform1i(this.addr,r),n[0]=r),t.setTextureCube(e||k2,r)}function B4(i,e,t){const n=this.cache,r=t.allocateTextureUnit();n[0]!==r&&(i.uniform1i(this.addr,r),n[0]=r),t.setTexture2DArray(e||H2,r)}function z4(i){switch(i){case 5126:return M4;case 35664:return S4;case 35665:return E4;case 35666:return T4;case 35674:return y4;case 35675:return b4;case 35676:return A4;case 5124:case 35670:return w4;case 35667:case 35671:return R4;case 35668:case 35672:return C4;case 35669:case 35673:return L4;case 5125:return P4;case 36294:return D4;case 36295:return U4;case 36296:return I4;case 35678:case 36198:case 36298:case 36306:case 35682:return N4;case 35679:case 36299:case 36307:return F4;case 35680:case 36300:case 36308:case 36293:return O4;case 36289:case 36303:case 36311:case 36292:return B4}}function G4(i,e){i.uniform1fv(this.addr,e)}function H4(i,e){const t=Zt(e,this.size,2);i.uniform2fv(this.addr,t)}function V4(i,e){const t=Zt(e,this.size,3);i.uniform3fv(this.addr,t)}function k4(i,e){const t=Zt(e,this.size,4);i.uniform4fv(this.addr,t)}function W4(i,e){const t=Zt(e,this.size,4);i.uniformMatrix2fv(this.addr,!1,t)}function X4(i,e){const t=Zt(e,this.size,9);i.uniformMatrix3fv(this.addr,!1,t)}function q4(i,e){const t=Zt(e,this.size,16);i.uniformMatrix4fv(this.addr,!1,t)}function Y4(i,e){i.uniform1iv(this.addr,e)}function j4(i,e){i.uniform2iv(this.addr,e)}function K4(i,e){i.uniform3iv(this.addr,e)}function Z4(i,e){i.uniform4iv(this.addr,e)}function $4(i,e){i.uniform1uiv(this.addr,e)}function J4(i,e){i.uniform2uiv(this.addr,e)}function Q4(i,e){i.uniform3uiv(this.addr,e)}function e5(i,e){i.uniform4uiv(this.addr,e)}function t5(i,e,t){const n=this.cache,r=e.length,s=Gn(t,r);$0(n,s)||(i.uniform1iv(this.addr,s),J0(n,s));for(let o=0;o!==r;++o)t.setTexture2D(e[o]||G2,s[o])}function n5(i,e,t){const n=this.cache,r=e.length,s=Gn(t,r);$0(n,s)||(i.uniform1iv(this.addr,s),J0(n,s));for(let o=0;o!==r;++o)t.setTexture3D(e[o]||V2,s[o])}function i5(i,e,t){const n=this.cache,r=e.length,s=Gn(t,r);$0(n,s)||(i.uniform1iv(this.addr,s),J0(n,s));for(let o=0;o!==r;++o)t.setTextureCube(e[o]||k2,s[o])}function r5(i,e,t){const n=this.cache,r=e.length,s=Gn(t,r);$0(n,s)||(i.uniform1iv(this.addr,s),J0(n,s));for(let o=0;o!==r;++o)t.setTexture2DArray(e[o]||H2,s[o])}function s5(i){switch(i){case 5126:return G4;case 35664:return H4;case 35665:return V4;case 35666:return k4;case 35674:return W4;case 35675:return X4;case 35676:return q4;case 5124:case 35670:return Y4;case 35667:case 35671:return j4;case 35668:case 35672:return K4;case 35669:case 35673:return Z4;case 5125:return $4;case 36294:return J4;case 36295:return Q4;case 36296:return e5;case 35678:case 36198:case 36298:case 36306:case 35682:return t5;case 35679:case 36299:case 36307:return n5;case 35680:case 36300:case 36308:case 36293:return i5;case 36289:case 36303:case 36311:case 36292:return r5}}class a5{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.setValue=z4(t.type)}}class o5{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.size=t.size,this.setValue=s5(t.type)}}class l5{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,n){const r=this.seq;for(let s=0,o=r.length;s!==o;++s){const a=r[s];a.setValue(e,t[a.id],n)}}}const S1=/(\w+)(\])?(\[|\.)?/g;function $i(i,e){i.seq.push(e),i.map[e.id]=e}function c5(i,e,t){const n=i.name,r=n.length;for(S1.lastIndex=0;;){const s=S1.exec(n),o=S1.lastIndex;let a=s[1];const u=s[2]==="]",l=s[3];if(u&&(a=a|0),l===void 0||l==="["&&o+2===r){$i(t,l===void 0?new a5(a,i,e):new o5(a,i,e));break}else{let f=t.map[a];f===void 0&&(f=new l5(a),$i(t,f)),t=f}}}class Nn{constructor(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let r=0;r<n;++r){const s=e.getActiveUniform(t,r),o=e.getUniformLocation(t,s.name);c5(s,o,this)}}setValue(e,t,n,r){const s=this.map[t];s!==void 0&&s.setValue(e,n,r)}setOptional(e,t,n){const r=t[n];r!==void 0&&this.setValue(e,n,r)}static upload(e,t,n,r){for(let s=0,o=t.length;s!==o;++s){const a=t[s],u=n[a.id];u.needsUpdate!==!1&&a.setValue(e,u.value,r)}}static seqWithValue(e,t){const n=[];for(let r=0,s=e.length;r!==s;++r){const o=e[r];o.id in t&&n.push(o)}return n}}function Ji(i,e,t){const n=i.createShader(e);return i.shaderSource(n,t),i.compileShader(n),n}let u5=0;function h5(i,e){const t=i.split(`
`),n=[],r=Math.max(e-6,0),s=Math.min(e+6,t.length);for(let o=r;o<s;o++){const a=o+1;n.push(`${a===e?">":" "} ${a}: ${t[o]}`)}return n.join(`
`)}function d5(i){switch(i){case Oe:return["Linear","( value )"];case b0:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported color space:",i),["Linear","( value )"]}}function Qi(i,e,t){const n=i.getShaderParameter(e,i.COMPILE_STATUS),r=i.getShaderInfoLog(e).trim();if(n&&r==="")return"";const s=/ERROR: 0:(\d+)/.exec(r);if(s){const o=parseInt(s[1]);return t.toUpperCase()+`

`+r+`

`+h5(i.getShaderSource(e),o)}else return r}function f5(i,e){const t=d5(e);return"vec4 "+i+"( vec4 value ) { return LinearTo"+t[0]+t[1]+"; }"}function p5(i,e){let t;switch(e){case br:t="Linear";break;case Ar:t="Reinhard";break;case wr:t="OptimizedCineon";break;case Rr:t="ACESFilmic";break;case Cr:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),t="Linear"}return"vec3 "+i+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}function m5(i){return[i.extensionDerivatives||i.envMapCubeUVHeight||i.bumpMap||i.normalMapTangentSpace||i.clearcoatNormalMap||i.flatShading||i.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(i.extensionFragDepth||i.logarithmicDepthBuffer)&&i.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",i.extensionDrawBuffers&&i.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(i.extensionShaderTextureLOD||i.envMap||i.transmission)&&i.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(nn).join(`
`)}function _5(i){const e=[];for(const t in i){const n=i[t];n!==!1&&e.push("#define "+t+" "+n)}return e.join(`
`)}function g5(i,e){const t={},n=i.getProgramParameter(e,i.ACTIVE_ATTRIBUTES);for(let r=0;r<n;r++){const s=i.getActiveAttrib(e,r),o=s.name;let a=1;s.type===i.FLOAT_MAT2&&(a=2),s.type===i.FLOAT_MAT3&&(a=3),s.type===i.FLOAT_MAT4&&(a=4),t[o]={type:s.type,location:i.getAttribLocation(e,o),locationSize:a}}return t}function nn(i){return i!==""}function e2(i,e){const t=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return i.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,t).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function t2(i,e){return i.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const v5=/^[ \t]*#include +<([\w\d./]+)>/gm;function D1(i){return i.replace(v5,x5)}function x5(i,e){const t=R0[e];if(t===void 0)throw new Error("Can not resolve #include <"+e+">");return D1(t)}const M5=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function n2(i){return i.replace(M5,S5)}function S5(i,e,t,n){let r="";for(let s=parseInt(e);s<parseInt(t);s++)r+=n.replace(/\[\s*i\s*\]/g,"[ "+s+" ]").replace(/UNROLLED_LOOP_INDEX/g,s);return r}function i2(i){let e="precision "+i.precision+` float;
precision `+i.precision+" int;";return i.precision==="highp"?e+=`
#define HIGH_PRECISION`:i.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:i.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function E5(i){let e="SHADOWMAP_TYPE_BASIC";return i.shadowMapType===v2?e="SHADOWMAP_TYPE_PCF":i.shadowMapType===ir?e="SHADOWMAP_TYPE_PCF_SOFT":i.shadowMapType===Xe&&(e="SHADOWMAP_TYPE_VSM"),e}function T5(i){let e="ENVMAP_TYPE_CUBE";if(i.envMap)switch(i.envMapMode){case qt:case Yt:e="ENVMAP_TYPE_CUBE";break;case On:e="ENVMAP_TYPE_CUBE_UV";break}return e}function y5(i){let e="ENVMAP_MODE_REFLECTION";if(i.envMap)switch(i.envMapMode){case Yt:e="ENVMAP_MODE_REFRACTION";break}return e}function b5(i){let e="ENVMAP_BLENDING_NONE";if(i.envMap)switch(i.combine){case S2:e="ENVMAP_BLENDING_MULTIPLY";break;case Tr:e="ENVMAP_BLENDING_MIX";break;case yr:e="ENVMAP_BLENDING_ADD";break}return e}function A5(i){const e=i.envMapCubeUVHeight;if(e===null)return null;const t=Math.log2(e)-2,n=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),7*16)),texelHeight:n,maxMip:t}}function w5(i,e,t,n){const r=i.getContext(),s=t.defines;let o=t.vertexShader,a=t.fragmentShader;const u=E5(t),l=T5(t),h=y5(t),f=b5(t),d=A5(t),m=t.isWebGL2?"":m5(t),v=_5(s),x=r.createProgram();let p,c,y=t.glslVersion?"#version "+t.glslVersion+`
`:"";t.isRawShaderMaterial?(p=[v].filter(nn).join(`
`),p.length>0&&(p+=`
`),c=[m,v].filter(nn).join(`
`),c.length>0&&(c+=`
`)):(p=[i2(t),"#define SHADER_NAME "+t.shaderName,v,t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+h:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.displacementMap?"#define USE_DISPLACEMENTMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.mapUv?"#define MAP_UV "+t.mapUv:"",t.alphaMapUv?"#define ALPHAMAP_UV "+t.alphaMapUv:"",t.lightMapUv?"#define LIGHTMAP_UV "+t.lightMapUv:"",t.aoMapUv?"#define AOMAP_UV "+t.aoMapUv:"",t.emissiveMapUv?"#define EMISSIVEMAP_UV "+t.emissiveMapUv:"",t.bumpMapUv?"#define BUMPMAP_UV "+t.bumpMapUv:"",t.normalMapUv?"#define NORMALMAP_UV "+t.normalMapUv:"",t.displacementMapUv?"#define DISPLACEMENTMAP_UV "+t.displacementMapUv:"",t.metalnessMapUv?"#define METALNESSMAP_UV "+t.metalnessMapUv:"",t.roughnessMapUv?"#define ROUGHNESSMAP_UV "+t.roughnessMapUv:"",t.clearcoatMapUv?"#define CLEARCOATMAP_UV "+t.clearcoatMapUv:"",t.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+t.clearcoatNormalMapUv:"",t.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+t.clearcoatRoughnessMapUv:"",t.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+t.iridescenceMapUv:"",t.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+t.iridescenceThicknessMapUv:"",t.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+t.sheenColorMapUv:"",t.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+t.sheenRoughnessMapUv:"",t.specularMapUv?"#define SPECULARMAP_UV "+t.specularMapUv:"",t.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+t.specularColorMapUv:"",t.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+t.specularIntensityMapUv:"",t.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+t.transmissionMapUv:"",t.thicknessMapUv?"#define THICKNESSMAP_UV "+t.thicknessMapUv:"",t.vertexTangents?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===!1?"#define USE_MORPHNORMALS":"",t.morphColors&&t.isWebGL2?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+u:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(nn).join(`
`),c=[m,i2(t),"#define SHADER_NAME "+t.shaderName,v,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+l:"",t.envMap?"#define "+h:"",t.envMap?"#define "+f:"",d?"#define CUBEUV_TEXEL_WIDTH "+d.texelWidth:"",d?"#define CUBEUV_TEXEL_HEIGHT "+d.texelHeight:"",d?"#define CUBEUV_MAX_MIP "+d.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescence?"#define USE_IRIDESCENCE":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.vertexTangents?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+u:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.useLegacyLights?"#define LEGACY_LIGHTS":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==Ye?"#define TONE_MAPPING":"",t.toneMapping!==Ye?R0.tonemapping_pars_fragment:"",t.toneMapping!==Ye?p5("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",R0.encodings_pars_fragment,f5("linearToOutputTexel",t.outputColorSpace),t.useDepthPacking?"#define DEPTH_PACKING "+t.depthPacking:"",`
`].filter(nn).join(`
`)),o=D1(o),o=e2(o,t),o=t2(o,t),a=D1(a),a=e2(a,t),a=t2(a,t),o=n2(o),a=n2(a),t.isWebGL2&&t.isRawShaderMaterial!==!0&&(y=`#version 300 es
`,p=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+p,c=["#define varying in",t.glslVersion===Ei?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===Ei?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+c);const M=y+p+o,L=y+c+a,T=Ji(r,r.VERTEX_SHADER,M),R=Ji(r,r.FRAGMENT_SHADER,L);if(r.attachShader(x,T),r.attachShader(x,R),t.index0AttributeName!==void 0?r.bindAttribLocation(x,0,t.index0AttributeName):t.morphTargets===!0&&r.bindAttribLocation(x,0,"position"),r.linkProgram(x),i.debug.checkShaderErrors){const _=r.getProgramInfoLog(x).trim(),b=r.getShaderInfoLog(T).trim(),j=r.getShaderInfoLog(R).trim();let $=!0,I=!0;if(r.getProgramParameter(x,r.LINK_STATUS)===!1)if($=!1,typeof i.debug.onShaderError=="function")i.debug.onShaderError(r,x,T,R);else{const B=Qi(r,T,"vertex"),V=Qi(r,R,"fragment");console.error("THREE.WebGLProgram: Shader Error "+r.getError()+" - VALIDATE_STATUS "+r.getProgramParameter(x,r.VALIDATE_STATUS)+`

Program Info Log: `+_+`
`+B+`
`+V)}else _!==""?console.warn("THREE.WebGLProgram: Program Info Log:",_):(b===""||j==="")&&(I=!1);I&&(this.diagnostics={runnable:$,programLog:_,vertexShader:{log:b,prefix:p},fragmentShader:{log:j,prefix:c}})}r.deleteShader(T),r.deleteShader(R);let U;this.getUniforms=function(){return U===void 0&&(U=new Nn(r,x)),U};let k;return this.getAttributes=function(){return k===void 0&&(k=g5(r,x)),k},this.destroy=function(){n.releaseStatesOfProgram(this),r.deleteProgram(x),this.program=void 0},this.name=t.shaderName,this.id=u5++,this.cacheKey=e,this.usedTimes=1,this.program=x,this.vertexShader=T,this.fragmentShader=R,this}let R5=0;class C5{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,n=e.fragmentShader,r=this._getShaderStage(t),s=this._getShaderStage(n),o=this._getShaderCacheForMaterial(e);return o.has(r)===!1&&(o.add(r),r.usedTimes++),o.has(s)===!1&&(o.add(s),s.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const n of t)n.usedTimes--,n.usedTimes===0&&this.shaderCache.delete(n.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);return n===void 0&&(n=new Set,t.set(e,n)),n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);return n===void 0&&(n=new L5(e),t.set(e,n)),n}}class L5{constructor(e){this.id=R5++,this.code=e,this.usedTimes=0}}function P5(i,e,t,n,r,s,o){const a=new P2,u=new C5,l=[],h=r.isWebGL2,f=r.logarithmicDepthBuffer,d=r.vertexTextures;let m=r.precision;const v={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function x(_){return _===1?"uv1":_===2?"uv2":_===3?"uv3":"uv"}function p(_,b,j,$,I){const B=$.fog,V=I.geometry,n0=_.isMeshStandardMaterial?$.environment:null,Y=(_.isMeshStandardMaterial?t:e).get(_.envMap||n0),X=Y&&Y.mapping===On?Y.image.height:null,Z=v[_.type];_.precision!==null&&(m=r.getMaxPrecision(_.precision),m!==_.precision&&console.warn("THREE.WebGLProgram.getParameters:",_.precision,"not supported, using",m,"instead."));const e0=V.morphAttributes.position||V.morphAttributes.normal||V.morphAttributes.color,p0=e0!==void 0?e0.length:0;let c0=0;V.morphAttributes.position!==void 0&&(c0=1),V.morphAttributes.normal!==void 0&&(c0=2),V.morphAttributes.color!==void 0&&(c0=3);let z,K,r0,l0;if(Z){const z0=Ne[Z];z=z0.vertexShader,K=z0.fragmentShader}else z=_.vertexShader,K=_.fragmentShader,u.update(_),r0=u.getVertexShaderID(_),l0=u.getFragmentShaderID(_);const C=i.getRenderTarget(),E0=I.isInstancedMesh===!0,S0=!!_.map,i0=!!_.matcap,x0=!!Y,O0=!!_.aoMap,g0=!!_.lightMap,A0=!!_.bumpMap,W0=!!_.normalMap,k0=!!_.displacementMap,j0=!!_.emissiveMap,X0=!!_.metalnessMap,F0=!!_.roughnessMap,V0=_.clearcoat>0,ie=_.iridescence>0,E=_.sheen>0,g=_.transmission>0,O=V0&&!!_.clearcoatMap,J=V0&&!!_.clearcoatNormalMap,t0=V0&&!!_.clearcoatRoughnessMap,a0=ie&&!!_.iridescenceMap,A=ie&&!!_.iridescenceThicknessMap,q=E&&!!_.sheenColorMap,F=E&&!!_.sheenRoughnessMap,o0=!!_.specularMap,d0=!!_.specularColorMap,m0=!!_.specularIntensityMap,u0=g&&!!_.transmissionMap,f0=g&&!!_.thicknessMap,T0=!!_.gradientMap,C0=!!_.alphaMap,q0=_.alphaTest>0,w=!!_.extensions,G=!!V.attributes.uv1,Q=!!V.attributes.uv2,h0=!!V.attributes.uv3;return{isWebGL2:h,shaderID:Z,shaderName:_.type,vertexShader:z,fragmentShader:K,defines:_.defines,customVertexShaderID:r0,customFragmentShaderID:l0,isRawShaderMaterial:_.isRawShaderMaterial===!0,glslVersion:_.glslVersion,precision:m,instancing:E0,instancingColor:E0&&I.instanceColor!==null,supportsVertexTextures:d,outputColorSpace:C===null?i.outputColorSpace:C.isXRRenderTarget===!0?C.texture.colorSpace:Oe,map:S0,matcap:i0,envMap:x0,envMapMode:x0&&Y.mapping,envMapCubeUVHeight:X,aoMap:O0,lightMap:g0,bumpMap:A0,normalMap:W0,displacementMap:d&&k0,emissiveMap:j0,normalMapObjectSpace:W0&&_.normalMapType===Kr,normalMapTangentSpace:W0&&_.normalMapType===jr,metalnessMap:X0,roughnessMap:F0,clearcoat:V0,clearcoatMap:O,clearcoatNormalMap:J,clearcoatRoughnessMap:t0,iridescence:ie,iridescenceMap:a0,iridescenceThicknessMap:A,sheen:E,sheenColorMap:q,sheenRoughnessMap:F,specularMap:o0,specularColorMap:d0,specularIntensityMap:m0,transmission:g,transmissionMap:u0,thicknessMap:f0,gradientMap:T0,opaque:_.transparent===!1&&_.blending===kt,alphaMap:C0,alphaTest:q0,combine:_.combine,mapUv:S0&&x(_.map.channel),aoMapUv:O0&&x(_.aoMap.channel),lightMapUv:g0&&x(_.lightMap.channel),bumpMapUv:A0&&x(_.bumpMap.channel),normalMapUv:W0&&x(_.normalMap.channel),displacementMapUv:k0&&x(_.displacementMap.channel),emissiveMapUv:j0&&x(_.emissiveMap.channel),metalnessMapUv:X0&&x(_.metalnessMap.channel),roughnessMapUv:F0&&x(_.roughnessMap.channel),clearcoatMapUv:O&&x(_.clearcoatMap.channel),clearcoatNormalMapUv:J&&x(_.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:t0&&x(_.clearcoatRoughnessMap.channel),iridescenceMapUv:a0&&x(_.iridescenceMap.channel),iridescenceThicknessMapUv:A&&x(_.iridescenceThicknessMap.channel),sheenColorMapUv:q&&x(_.sheenColorMap.channel),sheenRoughnessMapUv:F&&x(_.sheenRoughnessMap.channel),specularMapUv:o0&&x(_.specularMap.channel),specularColorMapUv:d0&&x(_.specularColorMap.channel),specularIntensityMapUv:m0&&x(_.specularIntensityMap.channel),transmissionMapUv:u0&&x(_.transmissionMap.channel),thicknessMapUv:f0&&x(_.thicknessMap.channel),alphaMapUv:C0&&x(_.alphaMap.channel),vertexTangents:W0&&!!V.attributes.tangent,vertexColors:_.vertexColors,vertexAlphas:_.vertexColors===!0&&!!V.attributes.color&&V.attributes.color.itemSize===4,vertexUv1s:G,vertexUv2s:Q,vertexUv3s:h0,pointsUvs:I.isPoints===!0&&!!V.attributes.uv&&(S0||C0),fog:!!B,useFog:_.fog===!0,fogExp2:B&&B.isFogExp2,flatShading:_.flatShading===!0,sizeAttenuation:_.sizeAttenuation===!0,logarithmicDepthBuffer:f,skinning:I.isSkinnedMesh===!0,morphTargets:V.morphAttributes.position!==void 0,morphNormals:V.morphAttributes.normal!==void 0,morphColors:V.morphAttributes.color!==void 0,morphTargetsCount:p0,morphTextureStride:c0,numDirLights:b.directional.length,numPointLights:b.point.length,numSpotLights:b.spot.length,numSpotLightMaps:b.spotLightMap.length,numRectAreaLights:b.rectArea.length,numHemiLights:b.hemi.length,numDirLightShadows:b.directionalShadowMap.length,numPointLightShadows:b.pointShadowMap.length,numSpotLightShadows:b.spotShadowMap.length,numSpotLightShadowsWithMaps:b.numSpotLightShadowsWithMaps,numClippingPlanes:o.numPlanes,numClipIntersection:o.numIntersection,dithering:_.dithering,shadowMapEnabled:i.shadowMap.enabled&&j.length>0,shadowMapType:i.shadowMap.type,toneMapping:_.toneMapped?i.toneMapping:Ye,useLegacyLights:i.useLegacyLights,premultipliedAlpha:_.premultipliedAlpha,doubleSided:_.side===Fe,flipSided:_.side===de,useDepthPacking:_.depthPacking>=0,depthPacking:_.depthPacking||0,index0AttributeName:_.index0AttributeName,extensionDerivatives:w&&_.extensions.derivatives===!0,extensionFragDepth:w&&_.extensions.fragDepth===!0,extensionDrawBuffers:w&&_.extensions.drawBuffers===!0,extensionShaderTextureLOD:w&&_.extensions.shaderTextureLOD===!0,rendererExtensionFragDepth:h||n.has("EXT_frag_depth"),rendererExtensionDrawBuffers:h||n.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:h||n.has("EXT_shader_texture_lod"),customProgramCacheKey:_.customProgramCacheKey()}}function c(_){const b=[];if(_.shaderID?b.push(_.shaderID):(b.push(_.customVertexShaderID),b.push(_.customFragmentShaderID)),_.defines!==void 0)for(const j in _.defines)b.push(j),b.push(_.defines[j]);return _.isRawShaderMaterial===!1&&(y(b,_),M(b,_),b.push(i.outputColorSpace)),b.push(_.customProgramCacheKey),b.join()}function y(_,b){_.push(b.precision),_.push(b.outputColorSpace),_.push(b.envMapMode),_.push(b.envMapCubeUVHeight),_.push(b.mapUv),_.push(b.alphaMapUv),_.push(b.lightMapUv),_.push(b.aoMapUv),_.push(b.bumpMapUv),_.push(b.normalMapUv),_.push(b.displacementMapUv),_.push(b.emissiveMapUv),_.push(b.metalnessMapUv),_.push(b.roughnessMapUv),_.push(b.clearcoatMapUv),_.push(b.clearcoatNormalMapUv),_.push(b.clearcoatRoughnessMapUv),_.push(b.iridescenceMapUv),_.push(b.iridescenceThicknessMapUv),_.push(b.sheenColorMapUv),_.push(b.sheenRoughnessMapUv),_.push(b.specularMapUv),_.push(b.specularColorMapUv),_.push(b.specularIntensityMapUv),_.push(b.transmissionMapUv),_.push(b.thicknessMapUv),_.push(b.combine),_.push(b.fogExp2),_.push(b.sizeAttenuation),_.push(b.morphTargetsCount),_.push(b.morphAttributeCount),_.push(b.numDirLights),_.push(b.numPointLights),_.push(b.numSpotLights),_.push(b.numSpotLightMaps),_.push(b.numHemiLights),_.push(b.numRectAreaLights),_.push(b.numDirLightShadows),_.push(b.numPointLightShadows),_.push(b.numSpotLightShadows),_.push(b.numSpotLightShadowsWithMaps),_.push(b.shadowMapType),_.push(b.toneMapping),_.push(b.numClippingPlanes),_.push(b.numClipIntersection),_.push(b.depthPacking)}function M(_,b){a.disableAll(),b.isWebGL2&&a.enable(0),b.supportsVertexTextures&&a.enable(1),b.instancing&&a.enable(2),b.instancingColor&&a.enable(3),b.matcap&&a.enable(4),b.envMap&&a.enable(5),b.normalMapObjectSpace&&a.enable(6),b.normalMapTangentSpace&&a.enable(7),b.clearcoat&&a.enable(8),b.iridescence&&a.enable(9),b.alphaTest&&a.enable(10),b.vertexColors&&a.enable(11),b.vertexAlphas&&a.enable(12),b.vertexUv1s&&a.enable(13),b.vertexUv2s&&a.enable(14),b.vertexUv3s&&a.enable(15),b.vertexTangents&&a.enable(16),_.push(a.mask),a.disableAll(),b.fog&&a.enable(0),b.useFog&&a.enable(1),b.flatShading&&a.enable(2),b.logarithmicDepthBuffer&&a.enable(3),b.skinning&&a.enable(4),b.morphTargets&&a.enable(5),b.morphNormals&&a.enable(6),b.morphColors&&a.enable(7),b.premultipliedAlpha&&a.enable(8),b.shadowMapEnabled&&a.enable(9),b.useLegacyLights&&a.enable(10),b.doubleSided&&a.enable(11),b.flipSided&&a.enable(12),b.useDepthPacking&&a.enable(13),b.dithering&&a.enable(14),b.transmission&&a.enable(15),b.sheen&&a.enable(16),b.opaque&&a.enable(17),b.pointsUvs&&a.enable(18),_.push(a.mask)}function L(_){const b=v[_.type];let j;if(b){const $=Ne[b];j=vs.clone($.uniforms)}else j=_.uniforms;return j}function T(_,b){let j;for(let $=0,I=l.length;$<I;$++){const B=l[$];if(B.cacheKey===b){j=B,++j.usedTimes;break}}return j===void 0&&(j=new w5(i,b,_,s),l.push(j)),j}function R(_){if(--_.usedTimes===0){const b=l.indexOf(_);l[b]=l[l.length-1],l.pop(),_.destroy()}}function U(_){u.remove(_)}function k(){u.dispose()}return{getParameters:p,getProgramCacheKey:c,getUniforms:L,acquireProgram:T,releaseProgram:R,releaseShaderCache:U,programs:l,dispose:k}}function D5(){let i=new WeakMap;function e(s){let o=i.get(s);return o===void 0&&(o={},i.set(s,o)),o}function t(s){i.delete(s)}function n(s,o,a){i.get(s)[o]=a}function r(){i=new WeakMap}return{get:e,remove:t,update:n,dispose:r}}function U5(i,e){return i.groupOrder!==e.groupOrder?i.groupOrder-e.groupOrder:i.renderOrder!==e.renderOrder?i.renderOrder-e.renderOrder:i.material.id!==e.material.id?i.material.id-e.material.id:i.z!==e.z?i.z-e.z:i.id-e.id}function r2(i,e){return i.groupOrder!==e.groupOrder?i.groupOrder-e.groupOrder:i.renderOrder!==e.renderOrder?i.renderOrder-e.renderOrder:i.z!==e.z?e.z-i.z:i.id-e.id}function s2(){const i=[];let e=0;const t=[],n=[],r=[];function s(){e=0,t.length=0,n.length=0,r.length=0}function o(f,d,m,v,x,p){let c=i[e];return c===void 0?(c={id:f.id,object:f,geometry:d,material:m,groupOrder:v,renderOrder:f.renderOrder,z:x,group:p},i[e]=c):(c.id=f.id,c.object=f,c.geometry=d,c.material=m,c.groupOrder=v,c.renderOrder=f.renderOrder,c.z=x,c.group=p),e++,c}function a(f,d,m,v,x,p){const c=o(f,d,m,v,x,p);m.transmission>0?n.push(c):m.transparent===!0?r.push(c):t.push(c)}function u(f,d,m,v,x,p){const c=o(f,d,m,v,x,p);m.transmission>0?n.unshift(c):m.transparent===!0?r.unshift(c):t.unshift(c)}function l(f,d){t.length>1&&t.sort(f||U5),n.length>1&&n.sort(d||r2),r.length>1&&r.sort(d||r2)}function h(){for(let f=e,d=i.length;f<d;f++){const m=i[f];if(m.id===null)break;m.id=null,m.object=null,m.geometry=null,m.material=null,m.group=null}}return{opaque:t,transmissive:n,transparent:r,init:s,push:a,unshift:u,finish:h,sort:l}}function I5(){let i=new WeakMap;function e(n,r){const s=i.get(n);let o;return s===void 0?(o=new s2,i.set(n,[o])):r>=s.length?(o=new s2,s.push(o)):o=s[r],o}function t(){i=new WeakMap}return{get:e,dispose:t}}function N5(){const i={};return{get:function(e){if(i[e.id]!==void 0)return i[e.id];let t;switch(e.type){case"DirectionalLight":t={direction:new D,color:new H0};break;case"SpotLight":t={position:new D,direction:new D,color:new H0,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new D,color:new H0,distance:0,decay:0};break;case"HemisphereLight":t={direction:new D,skyColor:new H0,groundColor:new H0};break;case"RectAreaLight":t={color:new H0,position:new D,halfWidth:new D,halfHeight:new D};break}return i[e.id]=t,t}}}function F5(){const i={};return{get:function(e){if(i[e.id]!==void 0)return i[e.id];let t;switch(e.type){case"DirectionalLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new I0};break;case"SpotLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new I0};break;case"PointLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new I0,shadowCameraNear:1,shadowCameraFar:1e3};break}return i[e.id]=t,t}}}let O5=0;function B5(i,e){return(e.castShadow?2:0)-(i.castShadow?2:0)+(e.map?1:0)-(i.map?1:0)}function z5(i,e){const t=new N5,n=F5(),r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0};for(let h=0;h<9;h++)r.probe.push(new D);const s=new D,o=new te,a=new te;function u(h,f){let d=0,m=0,v=0;for(let j=0;j<9;j++)r.probe[j].set(0,0,0);let x=0,p=0,c=0,y=0,M=0,L=0,T=0,R=0,U=0,k=0;h.sort(B5);const _=f===!0?Math.PI:1;for(let j=0,$=h.length;j<$;j++){const I=h[j],B=I.color,V=I.intensity,n0=I.distance,Y=I.shadow&&I.shadow.map?I.shadow.map.texture:null;if(I.isAmbientLight)d+=B.r*V*_,m+=B.g*V*_,v+=B.b*V*_;else if(I.isLightProbe)for(let X=0;X<9;X++)r.probe[X].addScaledVector(I.sh.coefficients[X],V);else if(I.isDirectionalLight){const X=t.get(I);if(X.color.copy(I.color).multiplyScalar(I.intensity*_),I.castShadow){const Z=I.shadow,e0=n.get(I);e0.shadowBias=Z.bias,e0.shadowNormalBias=Z.normalBias,e0.shadowRadius=Z.radius,e0.shadowMapSize=Z.mapSize,r.directionalShadow[x]=e0,r.directionalShadowMap[x]=Y,r.directionalShadowMatrix[x]=I.shadow.matrix,L++}r.directional[x]=X,x++}else if(I.isSpotLight){const X=t.get(I);X.position.setFromMatrixPosition(I.matrixWorld),X.color.copy(B).multiplyScalar(V*_),X.distance=n0,X.coneCos=Math.cos(I.angle),X.penumbraCos=Math.cos(I.angle*(1-I.penumbra)),X.decay=I.decay,r.spot[c]=X;const Z=I.shadow;if(I.map&&(r.spotLightMap[U]=I.map,U++,Z.updateMatrices(I),I.castShadow&&k++),r.spotLightMatrix[c]=Z.matrix,I.castShadow){const e0=n.get(I);e0.shadowBias=Z.bias,e0.shadowNormalBias=Z.normalBias,e0.shadowRadius=Z.radius,e0.shadowMapSize=Z.mapSize,r.spotShadow[c]=e0,r.spotShadowMap[c]=Y,R++}c++}else if(I.isRectAreaLight){const X=t.get(I);X.color.copy(B).multiplyScalar(V),X.halfWidth.set(I.width*.5,0,0),X.halfHeight.set(0,I.height*.5,0),r.rectArea[y]=X,y++}else if(I.isPointLight){const X=t.get(I);if(X.color.copy(I.color).multiplyScalar(I.intensity*_),X.distance=I.distance,X.decay=I.decay,I.castShadow){const Z=I.shadow,e0=n.get(I);e0.shadowBias=Z.bias,e0.shadowNormalBias=Z.normalBias,e0.shadowRadius=Z.radius,e0.shadowMapSize=Z.mapSize,e0.shadowCameraNear=Z.camera.near,e0.shadowCameraFar=Z.camera.far,r.pointShadow[p]=e0,r.pointShadowMap[p]=Y,r.pointShadowMatrix[p]=I.shadow.matrix,T++}r.point[p]=X,p++}else if(I.isHemisphereLight){const X=t.get(I);X.skyColor.copy(I.color).multiplyScalar(V*_),X.groundColor.copy(I.groundColor).multiplyScalar(V*_),r.hemi[M]=X,M++}}y>0&&(e.isWebGL2||i.has("OES_texture_float_linear")===!0?(r.rectAreaLTC1=s0.LTC_FLOAT_1,r.rectAreaLTC2=s0.LTC_FLOAT_2):i.has("OES_texture_half_float_linear")===!0?(r.rectAreaLTC1=s0.LTC_HALF_1,r.rectAreaLTC2=s0.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),r.ambient[0]=d,r.ambient[1]=m,r.ambient[2]=v;const b=r.hash;(b.directionalLength!==x||b.pointLength!==p||b.spotLength!==c||b.rectAreaLength!==y||b.hemiLength!==M||b.numDirectionalShadows!==L||b.numPointShadows!==T||b.numSpotShadows!==R||b.numSpotMaps!==U)&&(r.directional.length=x,r.spot.length=c,r.rectArea.length=y,r.point.length=p,r.hemi.length=M,r.directionalShadow.length=L,r.directionalShadowMap.length=L,r.pointShadow.length=T,r.pointShadowMap.length=T,r.spotShadow.length=R,r.spotShadowMap.length=R,r.directionalShadowMatrix.length=L,r.pointShadowMatrix.length=T,r.spotLightMatrix.length=R+U-k,r.spotLightMap.length=U,r.numSpotLightShadowsWithMaps=k,b.directionalLength=x,b.pointLength=p,b.spotLength=c,b.rectAreaLength=y,b.hemiLength=M,b.numDirectionalShadows=L,b.numPointShadows=T,b.numSpotShadows=R,b.numSpotMaps=U,r.version=O5++)}function l(h,f){let d=0,m=0,v=0,x=0,p=0;const c=f.matrixWorldInverse;for(let y=0,M=h.length;y<M;y++){const L=h[y];if(L.isDirectionalLight){const T=r.directional[d];T.direction.setFromMatrixPosition(L.matrixWorld),s.setFromMatrixPosition(L.target.matrixWorld),T.direction.sub(s),T.direction.transformDirection(c),d++}else if(L.isSpotLight){const T=r.spot[v];T.position.setFromMatrixPosition(L.matrixWorld),T.position.applyMatrix4(c),T.direction.setFromMatrixPosition(L.matrixWorld),s.setFromMatrixPosition(L.target.matrixWorld),T.direction.sub(s),T.direction.transformDirection(c),v++}else if(L.isRectAreaLight){const T=r.rectArea[x];T.position.setFromMatrixPosition(L.matrixWorld),T.position.applyMatrix4(c),a.identity(),o.copy(L.matrixWorld),o.premultiply(c),a.extractRotation(o),T.halfWidth.set(L.width*.5,0,0),T.halfHeight.set(0,L.height*.5,0),T.halfWidth.applyMatrix4(a),T.halfHeight.applyMatrix4(a),x++}else if(L.isPointLight){const T=r.point[m];T.position.setFromMatrixPosition(L.matrixWorld),T.position.applyMatrix4(c),m++}else if(L.isHemisphereLight){const T=r.hemi[p];T.direction.setFromMatrixPosition(L.matrixWorld),T.direction.transformDirection(c),p++}}}return{setup:u,setupView:l,state:r}}function a2(i,e){const t=new z5(i,e),n=[],r=[];function s(){n.length=0,r.length=0}function o(f){n.push(f)}function a(f){r.push(f)}function u(f){t.setup(n,f)}function l(f){t.setupView(n,f)}return{init:s,state:{lightsArray:n,shadowsArray:r,lights:t},setupLights:u,setupLightsView:l,pushLight:o,pushShadow:a}}function G5(i,e){let t=new WeakMap;function n(s,o=0){const a=t.get(s);let u;return a===void 0?(u=new a2(i,e),t.set(s,[u])):o>=a.length?(u=new a2(i,e),a.push(u)):u=a[o],u}function r(){t=new WeakMap}return{get:n,dispose:r}}class H5 extends cn{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=qr,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class V5 extends cn{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}const k5=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,W5=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function X5(i,e,t){let n=new B2;const r=new I0,s=new I0,o=new ne,a=new H5({depthPacking:Yr}),u=new V5,l={},h=t.maxTextureSize,f={[tt]:de,[de]:tt,[Fe]:Fe},d=new St({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new I0},radius:{value:4}},vertexShader:k5,fragmentShader:W5}),m=d.clone();m.defines.HORIZONTAL_PASS=1;const v=new Be;v.setAttribute("position",new Te(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const x=new qe(v,d),p=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=v2;let c=this.type;this.render=function(T,R,U){if(p.enabled===!1||p.autoUpdate===!1&&p.needsUpdate===!1||T.length===0)return;const k=i.getRenderTarget(),_=i.getActiveCubeFace(),b=i.getActiveMipmapLevel(),j=i.state;j.setBlending(et),j.buffers.color.setClear(1,1,1,1),j.buffers.depth.setTest(!0),j.setScissorTest(!1);const $=c!==Xe&&this.type===Xe,I=c===Xe&&this.type!==Xe;for(let B=0,V=T.length;B<V;B++){const n0=T[B],Y=n0.shadow;if(Y===void 0){console.warn("THREE.WebGLShadowMap:",n0,"has no shadow.");continue}if(Y.autoUpdate===!1&&Y.needsUpdate===!1)continue;r.copy(Y.mapSize);const X=Y.getFrameExtents();if(r.multiply(X),s.copy(Y.mapSize),(r.x>h||r.y>h)&&(r.x>h&&(s.x=Math.floor(h/X.x),r.x=s.x*X.x,Y.mapSize.x=s.x),r.y>h&&(s.y=Math.floor(h/X.y),r.y=s.y*X.y,Y.mapSize.y=s.y)),Y.map===null||$===!0||I===!0){const e0=this.type!==Xe?{minFilter:ue,magFilter:ue}:{};Y.map!==null&&Y.map.dispose(),Y.map=new xt(r.x,r.y,e0),Y.map.texture.name=n0.name+".shadowMap",Y.camera.updateProjectionMatrix()}i.setRenderTarget(Y.map),i.clear();const Z=Y.getViewportCount();for(let e0=0;e0<Z;e0++){const p0=Y.getViewport(e0);o.set(s.x*p0.x,s.y*p0.y,s.x*p0.z,s.y*p0.w),j.viewport(o),Y.updateMatrices(n0,e0),n=Y.getFrustum(),L(R,U,Y.camera,n0,this.type)}Y.isPointLightShadow!==!0&&this.type===Xe&&y(Y,U),Y.needsUpdate=!1}c=this.type,p.needsUpdate=!1,i.setRenderTarget(k,_,b)};function y(T,R){const U=e.update(x);d.defines.VSM_SAMPLES!==T.blurSamples&&(d.defines.VSM_SAMPLES=T.blurSamples,m.defines.VSM_SAMPLES=T.blurSamples,d.needsUpdate=!0,m.needsUpdate=!0),T.mapPass===null&&(T.mapPass=new xt(r.x,r.y)),d.uniforms.shadow_pass.value=T.map.texture,d.uniforms.resolution.value=T.mapSize,d.uniforms.radius.value=T.radius,i.setRenderTarget(T.mapPass),i.clear(),i.renderBufferDirect(R,null,U,d,x,null),m.uniforms.shadow_pass.value=T.mapPass.texture,m.uniforms.resolution.value=T.mapSize,m.uniforms.radius.value=T.radius,i.setRenderTarget(T.map),i.clear(),i.renderBufferDirect(R,null,U,m,x,null)}function M(T,R,U,k){let _=null;const b=U.isPointLight===!0?T.customDistanceMaterial:T.customDepthMaterial;if(b!==void 0)_=b;else if(_=U.isPointLight===!0?u:a,i.localClippingEnabled&&R.clipShadows===!0&&Array.isArray(R.clippingPlanes)&&R.clippingPlanes.length!==0||R.displacementMap&&R.displacementScale!==0||R.alphaMap&&R.alphaTest>0||R.map&&R.alphaTest>0){const j=_.uuid,$=R.uuid;let I=l[j];I===void 0&&(I={},l[j]=I);let B=I[$];B===void 0&&(B=_.clone(),I[$]=B),_=B}if(_.visible=R.visible,_.wireframe=R.wireframe,k===Xe?_.side=R.shadowSide!==null?R.shadowSide:R.side:_.side=R.shadowSide!==null?R.shadowSide:f[R.side],_.alphaMap=R.alphaMap,_.alphaTest=R.alphaTest,_.map=R.map,_.clipShadows=R.clipShadows,_.clippingPlanes=R.clippingPlanes,_.clipIntersection=R.clipIntersection,_.displacementMap=R.displacementMap,_.displacementScale=R.displacementScale,_.displacementBias=R.displacementBias,_.wireframeLinewidth=R.wireframeLinewidth,_.linewidth=R.linewidth,U.isPointLight===!0&&_.isMeshDistanceMaterial===!0){const j=i.properties.get(_);j.light=U}return _}function L(T,R,U,k,_){if(T.visible===!1)return;if(T.layers.test(R.layers)&&(T.isMesh||T.isLine||T.isPoints)&&(T.castShadow||T.receiveShadow&&_===Xe)&&(!T.frustumCulled||n.intersectsObject(T))){T.modelViewMatrix.multiplyMatrices(U.matrixWorldInverse,T.matrixWorld);const $=e.update(T),I=T.material;if(Array.isArray(I)){const B=$.groups;for(let V=0,n0=B.length;V<n0;V++){const Y=B[V],X=I[Y.materialIndex];if(X&&X.visible){const Z=M(T,X,k,_);i.renderBufferDirect(U,null,$,Z,T,Y)}}}else if(I.visible){const B=M(T,I,k,_);i.renderBufferDirect(U,null,$,B,T,null)}}const j=T.children;for(let $=0,I=j.length;$<I;$++)L(j[$],R,U,k,_)}}function q5(i,e,t){const n=t.isWebGL2;function r(){let w=!1;const G=new ne;let Q=null;const h0=new ne(0,0,0,0);return{setMask:function(_0){Q!==_0&&!w&&(i.colorMask(_0,_0,_0,_0),Q=_0)},setLocked:function(_0){w=_0},setClear:function(_0,z0,G0,re,je){je===!0&&(_0*=re,z0*=re,G0*=re),G.set(_0,z0,G0,re),h0.equals(G)===!1&&(i.clearColor(_0,z0,G0,re),h0.copy(G))},reset:function(){w=!1,Q=null,h0.set(-1,0,0,0)}}}function s(){let w=!1,G=null,Q=null,h0=null;return{setTest:function(_0){_0?C(i.DEPTH_TEST):E0(i.DEPTH_TEST)},setMask:function(_0){G!==_0&&!w&&(i.depthMask(_0),G=_0)},setFunc:function(_0){if(Q!==_0){switch(_0){case _r:i.depthFunc(i.NEVER);break;case gr:i.depthFunc(i.ALWAYS);break;case vr:i.depthFunc(i.LESS);break;case b1:i.depthFunc(i.LEQUAL);break;case xr:i.depthFunc(i.EQUAL);break;case Mr:i.depthFunc(i.GEQUAL);break;case Sr:i.depthFunc(i.GREATER);break;case Er:i.depthFunc(i.NOTEQUAL);break;default:i.depthFunc(i.LEQUAL)}Q=_0}},setLocked:function(_0){w=_0},setClear:function(_0){h0!==_0&&(i.clearDepth(_0),h0=_0)},reset:function(){w=!1,G=null,Q=null,h0=null}}}function o(){let w=!1,G=null,Q=null,h0=null,_0=null,z0=null,G0=null,re=null,je=null;return{setTest:function(Y0){w||(Y0?C(i.STENCIL_TEST):E0(i.STENCIL_TEST))},setMask:function(Y0){G!==Y0&&!w&&(i.stencilMask(Y0),G=Y0)},setFunc:function(Y0,xe,Ue){(Q!==Y0||h0!==xe||_0!==Ue)&&(i.stencilFunc(Y0,xe,Ue),Q=Y0,h0=xe,_0=Ue)},setOp:function(Y0,xe,Ue){(z0!==Y0||G0!==xe||re!==Ue)&&(i.stencilOp(Y0,xe,Ue),z0=Y0,G0=xe,re=Ue)},setLocked:function(Y0){w=Y0},setClear:function(Y0){je!==Y0&&(i.clearStencil(Y0),je=Y0)},reset:function(){w=!1,G=null,Q=null,h0=null,_0=null,z0=null,G0=null,re=null,je=null}}}const a=new r,u=new s,l=new o,h=new WeakMap,f=new WeakMap;let d={},m={},v=new WeakMap,x=[],p=null,c=!1,y=null,M=null,L=null,T=null,R=null,U=null,k=null,_=!1,b=null,j=null,$=null,I=null,B=null;const V=i.getParameter(i.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let n0=!1,Y=0;const X=i.getParameter(i.VERSION);X.indexOf("WebGL")!==-1?(Y=parseFloat(/^WebGL (\d)/.exec(X)[1]),n0=Y>=1):X.indexOf("OpenGL ES")!==-1&&(Y=parseFloat(/^OpenGL ES (\d)/.exec(X)[1]),n0=Y>=2);let Z=null,e0={};const p0=i.getParameter(i.SCISSOR_BOX),c0=i.getParameter(i.VIEWPORT),z=new ne().fromArray(p0),K=new ne().fromArray(c0);function r0(w,G,Q,h0){const _0=new Uint8Array(4),z0=i.createTexture();i.bindTexture(w,z0),i.texParameteri(w,i.TEXTURE_MIN_FILTER,i.NEAREST),i.texParameteri(w,i.TEXTURE_MAG_FILTER,i.NEAREST);for(let G0=0;G0<Q;G0++)n&&(w===i.TEXTURE_3D||w===i.TEXTURE_2D_ARRAY)?i.texImage3D(G,0,i.RGBA,1,1,h0,0,i.RGBA,i.UNSIGNED_BYTE,_0):i.texImage2D(G+G0,0,i.RGBA,1,1,0,i.RGBA,i.UNSIGNED_BYTE,_0);return z0}const l0={};l0[i.TEXTURE_2D]=r0(i.TEXTURE_2D,i.TEXTURE_2D,1),l0[i.TEXTURE_CUBE_MAP]=r0(i.TEXTURE_CUBE_MAP,i.TEXTURE_CUBE_MAP_POSITIVE_X,6),n&&(l0[i.TEXTURE_2D_ARRAY]=r0(i.TEXTURE_2D_ARRAY,i.TEXTURE_2D_ARRAY,1,1),l0[i.TEXTURE_3D]=r0(i.TEXTURE_3D,i.TEXTURE_3D,1,1)),a.setClear(0,0,0,1),u.setClear(1),l.setClear(0),C(i.DEPTH_TEST),u.setFunc(b1),k0(!1),j0(X1),C(i.CULL_FACE),A0(et);function C(w){d[w]!==!0&&(i.enable(w),d[w]=!0)}function E0(w){d[w]!==!1&&(i.disable(w),d[w]=!1)}function S0(w,G){return m[w]!==G?(i.bindFramebuffer(w,G),m[w]=G,n&&(w===i.DRAW_FRAMEBUFFER&&(m[i.FRAMEBUFFER]=G),w===i.FRAMEBUFFER&&(m[i.DRAW_FRAMEBUFFER]=G)),!0):!1}function i0(w,G){let Q=x,h0=!1;if(w)if(Q=v.get(G),Q===void 0&&(Q=[],v.set(G,Q)),w.isWebGLMultipleRenderTargets){const _0=w.texture;if(Q.length!==_0.length||Q[0]!==i.COLOR_ATTACHMENT0){for(let z0=0,G0=_0.length;z0<G0;z0++)Q[z0]=i.COLOR_ATTACHMENT0+z0;Q.length=_0.length,h0=!0}}else Q[0]!==i.COLOR_ATTACHMENT0&&(Q[0]=i.COLOR_ATTACHMENT0,h0=!0);else Q[0]!==i.BACK&&(Q[0]=i.BACK,h0=!0);h0&&(t.isWebGL2?i.drawBuffers(Q):e.get("WEBGL_draw_buffers").drawBuffersWEBGL(Q))}function x0(w){return p!==w?(i.useProgram(w),p=w,!0):!1}const O0={[Ht]:i.FUNC_ADD,[sr]:i.FUNC_SUBTRACT,[ar]:i.FUNC_REVERSE_SUBTRACT};if(n)O0[K1]=i.MIN,O0[Z1]=i.MAX;else{const w=e.get("EXT_blend_minmax");w!==null&&(O0[K1]=w.MIN_EXT,O0[Z1]=w.MAX_EXT)}const g0={[or]:i.ZERO,[lr]:i.ONE,[cr]:i.SRC_COLOR,[x2]:i.SRC_ALPHA,[mr]:i.SRC_ALPHA_SATURATE,[fr]:i.DST_COLOR,[hr]:i.DST_ALPHA,[ur]:i.ONE_MINUS_SRC_COLOR,[M2]:i.ONE_MINUS_SRC_ALPHA,[pr]:i.ONE_MINUS_DST_COLOR,[dr]:i.ONE_MINUS_DST_ALPHA};function A0(w,G,Q,h0,_0,z0,G0,re){if(w===et){c===!0&&(E0(i.BLEND),c=!1);return}if(c===!1&&(C(i.BLEND),c=!0),w!==rr){if(w!==y||re!==_){if((M!==Ht||R!==Ht)&&(i.blendEquation(i.FUNC_ADD),M=Ht,R=Ht),re)switch(w){case kt:i.blendFuncSeparate(i.ONE,i.ONE_MINUS_SRC_ALPHA,i.ONE,i.ONE_MINUS_SRC_ALPHA);break;case q1:i.blendFunc(i.ONE,i.ONE);break;case Y1:i.blendFuncSeparate(i.ZERO,i.ONE_MINUS_SRC_COLOR,i.ZERO,i.ONE);break;case j1:i.blendFuncSeparate(i.ZERO,i.SRC_COLOR,i.ZERO,i.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",w);break}else switch(w){case kt:i.blendFuncSeparate(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA,i.ONE,i.ONE_MINUS_SRC_ALPHA);break;case q1:i.blendFunc(i.SRC_ALPHA,i.ONE);break;case Y1:i.blendFuncSeparate(i.ZERO,i.ONE_MINUS_SRC_COLOR,i.ZERO,i.ONE);break;case j1:i.blendFunc(i.ZERO,i.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",w);break}L=null,T=null,U=null,k=null,y=w,_=re}return}_0=_0||G,z0=z0||Q,G0=G0||h0,(G!==M||_0!==R)&&(i.blendEquationSeparate(O0[G],O0[_0]),M=G,R=_0),(Q!==L||h0!==T||z0!==U||G0!==k)&&(i.blendFuncSeparate(g0[Q],g0[h0],g0[z0],g0[G0]),L=Q,T=h0,U=z0,k=G0),y=w,_=!1}function W0(w,G){w.side===Fe?E0(i.CULL_FACE):C(i.CULL_FACE);let Q=w.side===de;G&&(Q=!Q),k0(Q),w.blending===kt&&w.transparent===!1?A0(et):A0(w.blending,w.blendEquation,w.blendSrc,w.blendDst,w.blendEquationAlpha,w.blendSrcAlpha,w.blendDstAlpha,w.premultipliedAlpha),u.setFunc(w.depthFunc),u.setTest(w.depthTest),u.setMask(w.depthWrite),a.setMask(w.colorWrite);const h0=w.stencilWrite;l.setTest(h0),h0&&(l.setMask(w.stencilWriteMask),l.setFunc(w.stencilFunc,w.stencilRef,w.stencilFuncMask),l.setOp(w.stencilFail,w.stencilZFail,w.stencilZPass)),F0(w.polygonOffset,w.polygonOffsetFactor,w.polygonOffsetUnits),w.alphaToCoverage===!0?C(i.SAMPLE_ALPHA_TO_COVERAGE):E0(i.SAMPLE_ALPHA_TO_COVERAGE)}function k0(w){b!==w&&(w?i.frontFace(i.CW):i.frontFace(i.CCW),b=w)}function j0(w){w!==tr?(C(i.CULL_FACE),w!==j&&(w===X1?i.cullFace(i.BACK):w===nr?i.cullFace(i.FRONT):i.cullFace(i.FRONT_AND_BACK))):E0(i.CULL_FACE),j=w}function X0(w){w!==$&&(n0&&i.lineWidth(w),$=w)}function F0(w,G,Q){w?(C(i.POLYGON_OFFSET_FILL),(I!==G||B!==Q)&&(i.polygonOffset(G,Q),I=G,B=Q)):E0(i.POLYGON_OFFSET_FILL)}function V0(w){w?C(i.SCISSOR_TEST):E0(i.SCISSOR_TEST)}function ie(w){w===void 0&&(w=i.TEXTURE0+V-1),Z!==w&&(i.activeTexture(w),Z=w)}function E(w,G,Q){Q===void 0&&(Z===null?Q=i.TEXTURE0+V-1:Q=Z);let h0=e0[Q];h0===void 0&&(h0={type:void 0,texture:void 0},e0[Q]=h0),(h0.type!==w||h0.texture!==G)&&(Z!==Q&&(i.activeTexture(Q),Z=Q),i.bindTexture(w,G||l0[w]),h0.type=w,h0.texture=G)}function g(){const w=e0[Z];w!==void 0&&w.type!==void 0&&(i.bindTexture(w.type,null),w.type=void 0,w.texture=void 0)}function O(){try{i.compressedTexImage2D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function J(){try{i.compressedTexImage3D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function t0(){try{i.texSubImage2D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function a0(){try{i.texSubImage3D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function A(){try{i.compressedTexSubImage2D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function q(){try{i.compressedTexSubImage3D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function F(){try{i.texStorage2D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function o0(){try{i.texStorage3D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function d0(){try{i.texImage2D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function m0(){try{i.texImage3D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function u0(w){z.equals(w)===!1&&(i.scissor(w.x,w.y,w.z,w.w),z.copy(w))}function f0(w){K.equals(w)===!1&&(i.viewport(w.x,w.y,w.z,w.w),K.copy(w))}function T0(w,G){let Q=f.get(G);Q===void 0&&(Q=new WeakMap,f.set(G,Q));let h0=Q.get(w);h0===void 0&&(h0=i.getUniformBlockIndex(G,w.name),Q.set(w,h0))}function C0(w,G){const h0=f.get(G).get(w);h.get(G)!==h0&&(i.uniformBlockBinding(G,h0,w.__bindingPointIndex),h.set(G,h0))}function q0(){i.disable(i.BLEND),i.disable(i.CULL_FACE),i.disable(i.DEPTH_TEST),i.disable(i.POLYGON_OFFSET_FILL),i.disable(i.SCISSOR_TEST),i.disable(i.STENCIL_TEST),i.disable(i.SAMPLE_ALPHA_TO_COVERAGE),i.blendEquation(i.FUNC_ADD),i.blendFunc(i.ONE,i.ZERO),i.blendFuncSeparate(i.ONE,i.ZERO,i.ONE,i.ZERO),i.colorMask(!0,!0,!0,!0),i.clearColor(0,0,0,0),i.depthMask(!0),i.depthFunc(i.LESS),i.clearDepth(1),i.stencilMask(4294967295),i.stencilFunc(i.ALWAYS,0,4294967295),i.stencilOp(i.KEEP,i.KEEP,i.KEEP),i.clearStencil(0),i.cullFace(i.BACK),i.frontFace(i.CCW),i.polygonOffset(0,0),i.activeTexture(i.TEXTURE0),i.bindFramebuffer(i.FRAMEBUFFER,null),n===!0&&(i.bindFramebuffer(i.DRAW_FRAMEBUFFER,null),i.bindFramebuffer(i.READ_FRAMEBUFFER,null)),i.useProgram(null),i.lineWidth(1),i.scissor(0,0,i.canvas.width,i.canvas.height),i.viewport(0,0,i.canvas.width,i.canvas.height),d={},Z=null,e0={},m={},v=new WeakMap,x=[],p=null,c=!1,y=null,M=null,L=null,T=null,R=null,U=null,k=null,_=!1,b=null,j=null,$=null,I=null,B=null,z.set(0,0,i.canvas.width,i.canvas.height),K.set(0,0,i.canvas.width,i.canvas.height),a.reset(),u.reset(),l.reset()}return{buffers:{color:a,depth:u,stencil:l},enable:C,disable:E0,bindFramebuffer:S0,drawBuffers:i0,useProgram:x0,setBlending:A0,setMaterial:W0,setFlipSided:k0,setCullFace:j0,setLineWidth:X0,setPolygonOffset:F0,setScissorTest:V0,activeTexture:ie,bindTexture:E,unbindTexture:g,compressedTexImage2D:O,compressedTexImage3D:J,texImage2D:d0,texImage3D:m0,updateUBOMapping:T0,uniformBlockBinding:C0,texStorage2D:F,texStorage3D:o0,texSubImage2D:t0,texSubImage3D:a0,compressedTexSubImage2D:A,compressedTexSubImage3D:q,scissor:u0,viewport:f0,reset:q0}}function Y5(i,e,t,n,r,s,o){const a=r.isWebGL2,u=r.maxTextures,l=r.maxCubemapSize,h=r.maxTextureSize,f=r.maxSamples,d=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,m=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),v=new WeakMap;let x;const p=new WeakMap;let c=!1;try{c=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function y(E,g){return c?new OffscreenCanvas(E,g):Fn("canvas")}function M(E,g,O,J){let t0=1;if((E.width>J||E.height>J)&&(t0=J/Math.max(E.width,E.height)),t0<1||g===!0)if(typeof HTMLImageElement<"u"&&E instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&E instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&E instanceof ImageBitmap){const a0=g?Jr:Math.floor,A=a0(t0*E.width),q=a0(t0*E.height);x===void 0&&(x=y(A,q));const F=O?y(A,q):x;return F.width=A,F.height=q,F.getContext("2d").drawImage(E,0,0,A,q),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+E.width+"x"+E.height+") to ("+A+"x"+q+")."),F}else return"data"in E&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+E.width+"x"+E.height+")."),E;return E}function L(E){return Ti(E.width)&&Ti(E.height)}function T(E){return a?!1:E.wrapS!==Le||E.wrapT!==Le||E.minFilter!==ue&&E.minFilter!==Se}function R(E,g){return E.generateMipmaps&&g&&E.minFilter!==ue&&E.minFilter!==Se}function U(E){i.generateMipmap(E)}function k(E,g,O,J,t0=!1){if(a===!1)return g;if(E!==null){if(i[E]!==void 0)return i[E];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+E+"'")}let a0=g;return g===i.RED&&(O===i.FLOAT&&(a0=i.R32F),O===i.HALF_FLOAT&&(a0=i.R16F),O===i.UNSIGNED_BYTE&&(a0=i.R8)),g===i.RG&&(O===i.FLOAT&&(a0=i.RG32F),O===i.HALF_FLOAT&&(a0=i.RG16F),O===i.UNSIGNED_BYTE&&(a0=i.RG8)),g===i.RGBA&&(O===i.FLOAT&&(a0=i.RGBA32F),O===i.HALF_FLOAT&&(a0=i.RGBA16F),O===i.UNSIGNED_BYTE&&(a0=J===b0&&t0===!1?i.SRGB8_ALPHA8:i.RGBA8),O===i.UNSIGNED_SHORT_4_4_4_4&&(a0=i.RGBA4),O===i.UNSIGNED_SHORT_5_5_5_1&&(a0=i.RGB5_A1)),(a0===i.R16F||a0===i.R32F||a0===i.RG16F||a0===i.RG32F||a0===i.RGBA16F||a0===i.RGBA32F)&&e.get("EXT_color_buffer_float"),a0}function _(E,g,O){return R(E,O)===!0||E.isFramebufferTexture&&E.minFilter!==ue&&E.minFilter!==Se?Math.log2(Math.max(g.width,g.height))+1:E.mipmaps!==void 0&&E.mipmaps.length>0?E.mipmaps.length:E.isCompressedTexture&&Array.isArray(E.image)?g.mipmaps.length:1}function b(E){return E===ue||E===$1||E===Yn?i.NEAREST:i.LINEAR}function j(E){const g=E.target;g.removeEventListener("dispose",j),I(g),g.isVideoTexture&&v.delete(g)}function $(E){const g=E.target;g.removeEventListener("dispose",$),V(g)}function I(E){const g=n.get(E);if(g.__webglInit===void 0)return;const O=E.source,J=p.get(O);if(J){const t0=J[g.__cacheKey];t0.usedTimes--,t0.usedTimes===0&&B(E),Object.keys(J).length===0&&p.delete(O)}n.remove(E)}function B(E){const g=n.get(E);i.deleteTexture(g.__webglTexture);const O=E.source,J=p.get(O);delete J[g.__cacheKey],o.memory.textures--}function V(E){const g=E.texture,O=n.get(E),J=n.get(g);if(J.__webglTexture!==void 0&&(i.deleteTexture(J.__webglTexture),o.memory.textures--),E.depthTexture&&E.depthTexture.dispose(),E.isWebGLCubeRenderTarget)for(let t0=0;t0<6;t0++)i.deleteFramebuffer(O.__webglFramebuffer[t0]),O.__webglDepthbuffer&&i.deleteRenderbuffer(O.__webglDepthbuffer[t0]);else{if(i.deleteFramebuffer(O.__webglFramebuffer),O.__webglDepthbuffer&&i.deleteRenderbuffer(O.__webglDepthbuffer),O.__webglMultisampledFramebuffer&&i.deleteFramebuffer(O.__webglMultisampledFramebuffer),O.__webglColorRenderbuffer)for(let t0=0;t0<O.__webglColorRenderbuffer.length;t0++)O.__webglColorRenderbuffer[t0]&&i.deleteRenderbuffer(O.__webglColorRenderbuffer[t0]);O.__webglDepthRenderbuffer&&i.deleteRenderbuffer(O.__webglDepthRenderbuffer)}if(E.isWebGLMultipleRenderTargets)for(let t0=0,a0=g.length;t0<a0;t0++){const A=n.get(g[t0]);A.__webglTexture&&(i.deleteTexture(A.__webglTexture),o.memory.textures--),n.remove(g[t0])}n.remove(g),n.remove(E)}let n0=0;function Y(){n0=0}function X(){const E=n0;return E>=u&&console.warn("THREE.WebGLTextures: Trying to use "+E+" texture units while this GPU supports only "+u),n0+=1,E}function Z(E){const g=[];return g.push(E.wrapS),g.push(E.wrapT),g.push(E.wrapR||0),g.push(E.magFilter),g.push(E.minFilter),g.push(E.anisotropy),g.push(E.internalFormat),g.push(E.format),g.push(E.type),g.push(E.generateMipmaps),g.push(E.premultiplyAlpha),g.push(E.flipY),g.push(E.unpackAlignment),g.push(E.colorSpace),g.join()}function e0(E,g){const O=n.get(E);if(E.isVideoTexture&&V0(E),E.isRenderTargetTexture===!1&&E.version>0&&O.__version!==E.version){const J=E.image;if(J===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(J.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{E0(O,E,g);return}}t.bindTexture(i.TEXTURE_2D,O.__webglTexture,i.TEXTURE0+g)}function p0(E,g){const O=n.get(E);if(E.version>0&&O.__version!==E.version){E0(O,E,g);return}t.bindTexture(i.TEXTURE_2D_ARRAY,O.__webglTexture,i.TEXTURE0+g)}function c0(E,g){const O=n.get(E);if(E.version>0&&O.__version!==E.version){E0(O,E,g);return}t.bindTexture(i.TEXTURE_3D,O.__webglTexture,i.TEXTURE0+g)}function z(E,g){const O=n.get(E);if(E.version>0&&O.__version!==E.version){S0(O,E,g);return}t.bindTexture(i.TEXTURE_CUBE_MAP,O.__webglTexture,i.TEXTURE0+g)}const K={[R1]:i.REPEAT,[Le]:i.CLAMP_TO_EDGE,[C1]:i.MIRRORED_REPEAT},r0={[ue]:i.NEAREST,[$1]:i.NEAREST_MIPMAP_NEAREST,[Yn]:i.NEAREST_MIPMAP_LINEAR,[Se]:i.LINEAR,[Lr]:i.LINEAR_MIPMAP_NEAREST,[sn]:i.LINEAR_MIPMAP_LINEAR};function l0(E,g,O){if(O?(i.texParameteri(E,i.TEXTURE_WRAP_S,K[g.wrapS]),i.texParameteri(E,i.TEXTURE_WRAP_T,K[g.wrapT]),(E===i.TEXTURE_3D||E===i.TEXTURE_2D_ARRAY)&&i.texParameteri(E,i.TEXTURE_WRAP_R,K[g.wrapR]),i.texParameteri(E,i.TEXTURE_MAG_FILTER,r0[g.magFilter]),i.texParameteri(E,i.TEXTURE_MIN_FILTER,r0[g.minFilter])):(i.texParameteri(E,i.TEXTURE_WRAP_S,i.CLAMP_TO_EDGE),i.texParameteri(E,i.TEXTURE_WRAP_T,i.CLAMP_TO_EDGE),(E===i.TEXTURE_3D||E===i.TEXTURE_2D_ARRAY)&&i.texParameteri(E,i.TEXTURE_WRAP_R,i.CLAMP_TO_EDGE),(g.wrapS!==Le||g.wrapT!==Le)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),i.texParameteri(E,i.TEXTURE_MAG_FILTER,b(g.magFilter)),i.texParameteri(E,i.TEXTURE_MIN_FILTER,b(g.minFilter)),g.minFilter!==ue&&g.minFilter!==Se&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),e.has("EXT_texture_filter_anisotropic")===!0){const J=e.get("EXT_texture_filter_anisotropic");if(g.magFilter===ue||g.minFilter!==Yn&&g.minFilter!==sn||g.type===pt&&e.has("OES_texture_float_linear")===!1||a===!1&&g.type===an&&e.has("OES_texture_half_float_linear")===!1)return;(g.anisotropy>1||n.get(g).__currentAnisotropy)&&(i.texParameterf(E,J.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(g.anisotropy,r.getMaxAnisotropy())),n.get(g).__currentAnisotropy=g.anisotropy)}}function C(E,g){let O=!1;E.__webglInit===void 0&&(E.__webglInit=!0,g.addEventListener("dispose",j));const J=g.source;let t0=p.get(J);t0===void 0&&(t0={},p.set(J,t0));const a0=Z(g);if(a0!==E.__cacheKey){t0[a0]===void 0&&(t0[a0]={texture:i.createTexture(),usedTimes:0},o.memory.textures++,O=!0),t0[a0].usedTimes++;const A=t0[E.__cacheKey];A!==void 0&&(t0[E.__cacheKey].usedTimes--,A.usedTimes===0&&B(g)),E.__cacheKey=a0,E.__webglTexture=t0[a0].texture}return O}function E0(E,g,O){let J=i.TEXTURE_2D;(g.isDataArrayTexture||g.isCompressedArrayTexture)&&(J=i.TEXTURE_2D_ARRAY),g.isData3DTexture&&(J=i.TEXTURE_3D);const t0=C(E,g),a0=g.source;t.bindTexture(J,E.__webglTexture,i.TEXTURE0+O);const A=n.get(a0);if(a0.version!==A.__version||t0===!0){t.activeTexture(i.TEXTURE0+O),i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,g.flipY),i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,g.premultiplyAlpha),i.pixelStorei(i.UNPACK_ALIGNMENT,g.unpackAlignment),i.pixelStorei(i.UNPACK_COLORSPACE_CONVERSION_WEBGL,i.NONE);const q=T(g)&&L(g.image)===!1;let F=M(g.image,q,!1,h);F=ie(g,F);const o0=L(F)||a,d0=s.convert(g.format,g.colorSpace);let m0=s.convert(g.type),u0=k(g.internalFormat,d0,m0,g.colorSpace);l0(J,g,o0);let f0;const T0=g.mipmaps,C0=a&&g.isVideoTexture!==!0,q0=A.__version===void 0||t0===!0,w=_(g,F,o0);if(g.isDepthTexture)u0=i.DEPTH_COMPONENT,a?g.type===pt?u0=i.DEPTH_COMPONENT32F:g.type===ft?u0=i.DEPTH_COMPONENT24:g.type===Wt?u0=i.DEPTH24_STENCIL8:u0=i.DEPTH_COMPONENT16:g.type===pt&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),g.format===mt&&u0===i.DEPTH_COMPONENT&&g.type!==T2&&g.type!==ft&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),g.type=ft,m0=s.convert(g.type)),g.format===jt&&u0===i.DEPTH_COMPONENT&&(u0=i.DEPTH_STENCIL,g.type!==Wt&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),g.type=Wt,m0=s.convert(g.type))),q0&&(C0?t.texStorage2D(i.TEXTURE_2D,1,u0,F.width,F.height):t.texImage2D(i.TEXTURE_2D,0,u0,F.width,F.height,0,d0,m0,null));else if(g.isDataTexture)if(T0.length>0&&o0){C0&&q0&&t.texStorage2D(i.TEXTURE_2D,w,u0,T0[0].width,T0[0].height);for(let G=0,Q=T0.length;G<Q;G++)f0=T0[G],C0?t.texSubImage2D(i.TEXTURE_2D,G,0,0,f0.width,f0.height,d0,m0,f0.data):t.texImage2D(i.TEXTURE_2D,G,u0,f0.width,f0.height,0,d0,m0,f0.data);g.generateMipmaps=!1}else C0?(q0&&t.texStorage2D(i.TEXTURE_2D,w,u0,F.width,F.height),t.texSubImage2D(i.TEXTURE_2D,0,0,0,F.width,F.height,d0,m0,F.data)):t.texImage2D(i.TEXTURE_2D,0,u0,F.width,F.height,0,d0,m0,F.data);else if(g.isCompressedTexture)if(g.isCompressedArrayTexture){C0&&q0&&t.texStorage3D(i.TEXTURE_2D_ARRAY,w,u0,T0[0].width,T0[0].height,F.depth);for(let G=0,Q=T0.length;G<Q;G++)f0=T0[G],g.format!==Pe?d0!==null?C0?t.compressedTexSubImage3D(i.TEXTURE_2D_ARRAY,G,0,0,0,f0.width,f0.height,F.depth,d0,f0.data,0,0):t.compressedTexImage3D(i.TEXTURE_2D_ARRAY,G,u0,f0.width,f0.height,F.depth,0,f0.data,0,0):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):C0?t.texSubImage3D(i.TEXTURE_2D_ARRAY,G,0,0,0,f0.width,f0.height,F.depth,d0,m0,f0.data):t.texImage3D(i.TEXTURE_2D_ARRAY,G,u0,f0.width,f0.height,F.depth,0,d0,m0,f0.data)}else{C0&&q0&&t.texStorage2D(i.TEXTURE_2D,w,u0,T0[0].width,T0[0].height);for(let G=0,Q=T0.length;G<Q;G++)f0=T0[G],g.format!==Pe?d0!==null?C0?t.compressedTexSubImage2D(i.TEXTURE_2D,G,0,0,f0.width,f0.height,d0,f0.data):t.compressedTexImage2D(i.TEXTURE_2D,G,u0,f0.width,f0.height,0,f0.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):C0?t.texSubImage2D(i.TEXTURE_2D,G,0,0,f0.width,f0.height,d0,m0,f0.data):t.texImage2D(i.TEXTURE_2D,G,u0,f0.width,f0.height,0,d0,m0,f0.data)}else if(g.isDataArrayTexture)C0?(q0&&t.texStorage3D(i.TEXTURE_2D_ARRAY,w,u0,F.width,F.height,F.depth),t.texSubImage3D(i.TEXTURE_2D_ARRAY,0,0,0,0,F.width,F.height,F.depth,d0,m0,F.data)):t.texImage3D(i.TEXTURE_2D_ARRAY,0,u0,F.width,F.height,F.depth,0,d0,m0,F.data);else if(g.isData3DTexture)C0?(q0&&t.texStorage3D(i.TEXTURE_3D,w,u0,F.width,F.height,F.depth),t.texSubImage3D(i.TEXTURE_3D,0,0,0,0,F.width,F.height,F.depth,d0,m0,F.data)):t.texImage3D(i.TEXTURE_3D,0,u0,F.width,F.height,F.depth,0,d0,m0,F.data);else if(g.isFramebufferTexture){if(q0)if(C0)t.texStorage2D(i.TEXTURE_2D,w,u0,F.width,F.height);else{let G=F.width,Q=F.height;for(let h0=0;h0<w;h0++)t.texImage2D(i.TEXTURE_2D,h0,u0,G,Q,0,d0,m0,null),G>>=1,Q>>=1}}else if(T0.length>0&&o0){C0&&q0&&t.texStorage2D(i.TEXTURE_2D,w,u0,T0[0].width,T0[0].height);for(let G=0,Q=T0.length;G<Q;G++)f0=T0[G],C0?t.texSubImage2D(i.TEXTURE_2D,G,0,0,d0,m0,f0):t.texImage2D(i.TEXTURE_2D,G,u0,d0,m0,f0);g.generateMipmaps=!1}else C0?(q0&&t.texStorage2D(i.TEXTURE_2D,w,u0,F.width,F.height),t.texSubImage2D(i.TEXTURE_2D,0,0,0,d0,m0,F)):t.texImage2D(i.TEXTURE_2D,0,u0,d0,m0,F);R(g,o0)&&U(J),A.__version=a0.version,g.onUpdate&&g.onUpdate(g)}E.__version=g.version}function S0(E,g,O){if(g.image.length!==6)return;const J=C(E,g),t0=g.source;t.bindTexture(i.TEXTURE_CUBE_MAP,E.__webglTexture,i.TEXTURE0+O);const a0=n.get(t0);if(t0.version!==a0.__version||J===!0){t.activeTexture(i.TEXTURE0+O),i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,g.flipY),i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,g.premultiplyAlpha),i.pixelStorei(i.UNPACK_ALIGNMENT,g.unpackAlignment),i.pixelStorei(i.UNPACK_COLORSPACE_CONVERSION_WEBGL,i.NONE);const A=g.isCompressedTexture||g.image[0].isCompressedTexture,q=g.image[0]&&g.image[0].isDataTexture,F=[];for(let G=0;G<6;G++)!A&&!q?F[G]=M(g.image[G],!1,!0,l):F[G]=q?g.image[G].image:g.image[G],F[G]=ie(g,F[G]);const o0=F[0],d0=L(o0)||a,m0=s.convert(g.format,g.colorSpace),u0=s.convert(g.type),f0=k(g.internalFormat,m0,u0,g.colorSpace),T0=a&&g.isVideoTexture!==!0,C0=a0.__version===void 0||J===!0;let q0=_(g,o0,d0);l0(i.TEXTURE_CUBE_MAP,g,d0);let w;if(A){T0&&C0&&t.texStorage2D(i.TEXTURE_CUBE_MAP,q0,f0,o0.width,o0.height);for(let G=0;G<6;G++){w=F[G].mipmaps;for(let Q=0;Q<w.length;Q++){const h0=w[Q];g.format!==Pe?m0!==null?T0?t.compressedTexSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+G,Q,0,0,h0.width,h0.height,m0,h0.data):t.compressedTexImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+G,Q,f0,h0.width,h0.height,0,h0.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):T0?t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+G,Q,0,0,h0.width,h0.height,m0,u0,h0.data):t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+G,Q,f0,h0.width,h0.height,0,m0,u0,h0.data)}}}else{w=g.mipmaps,T0&&C0&&(w.length>0&&q0++,t.texStorage2D(i.TEXTURE_CUBE_MAP,q0,f0,F[0].width,F[0].height));for(let G=0;G<6;G++)if(q){T0?t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+G,0,0,0,F[G].width,F[G].height,m0,u0,F[G].data):t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+G,0,f0,F[G].width,F[G].height,0,m0,u0,F[G].data);for(let Q=0;Q<w.length;Q++){const _0=w[Q].image[G].image;T0?t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+G,Q+1,0,0,_0.width,_0.height,m0,u0,_0.data):t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+G,Q+1,f0,_0.width,_0.height,0,m0,u0,_0.data)}}else{T0?t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+G,0,0,0,m0,u0,F[G]):t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+G,0,f0,m0,u0,F[G]);for(let Q=0;Q<w.length;Q++){const h0=w[Q];T0?t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+G,Q+1,0,0,m0,u0,h0.image[G]):t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+G,Q+1,f0,m0,u0,h0.image[G])}}}R(g,d0)&&U(i.TEXTURE_CUBE_MAP),a0.__version=t0.version,g.onUpdate&&g.onUpdate(g)}E.__version=g.version}function i0(E,g,O,J,t0){const a0=s.convert(O.format,O.colorSpace),A=s.convert(O.type),q=k(O.internalFormat,a0,A,O.colorSpace);n.get(g).__hasExternalTextures||(t0===i.TEXTURE_3D||t0===i.TEXTURE_2D_ARRAY?t.texImage3D(t0,0,q,g.width,g.height,g.depth,0,a0,A,null):t.texImage2D(t0,0,q,g.width,g.height,0,a0,A,null)),t.bindFramebuffer(i.FRAMEBUFFER,E),F0(g)?d.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,J,t0,n.get(O).__webglTexture,0,X0(g)):(t0===i.TEXTURE_2D||t0>=i.TEXTURE_CUBE_MAP_POSITIVE_X&&t0<=i.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&i.framebufferTexture2D(i.FRAMEBUFFER,J,t0,n.get(O).__webglTexture,0),t.bindFramebuffer(i.FRAMEBUFFER,null)}function x0(E,g,O){if(i.bindRenderbuffer(i.RENDERBUFFER,E),g.depthBuffer&&!g.stencilBuffer){let J=i.DEPTH_COMPONENT16;if(O||F0(g)){const t0=g.depthTexture;t0&&t0.isDepthTexture&&(t0.type===pt?J=i.DEPTH_COMPONENT32F:t0.type===ft&&(J=i.DEPTH_COMPONENT24));const a0=X0(g);F0(g)?d.renderbufferStorageMultisampleEXT(i.RENDERBUFFER,a0,J,g.width,g.height):i.renderbufferStorageMultisample(i.RENDERBUFFER,a0,J,g.width,g.height)}else i.renderbufferStorage(i.RENDERBUFFER,J,g.width,g.height);i.framebufferRenderbuffer(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.RENDERBUFFER,E)}else if(g.depthBuffer&&g.stencilBuffer){const J=X0(g);O&&F0(g)===!1?i.renderbufferStorageMultisample(i.RENDERBUFFER,J,i.DEPTH24_STENCIL8,g.width,g.height):F0(g)?d.renderbufferStorageMultisampleEXT(i.RENDERBUFFER,J,i.DEPTH24_STENCIL8,g.width,g.height):i.renderbufferStorage(i.RENDERBUFFER,i.DEPTH_STENCIL,g.width,g.height),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.RENDERBUFFER,E)}else{const J=g.isWebGLMultipleRenderTargets===!0?g.texture:[g.texture];for(let t0=0;t0<J.length;t0++){const a0=J[t0],A=s.convert(a0.format,a0.colorSpace),q=s.convert(a0.type),F=k(a0.internalFormat,A,q,a0.colorSpace),o0=X0(g);O&&F0(g)===!1?i.renderbufferStorageMultisample(i.RENDERBUFFER,o0,F,g.width,g.height):F0(g)?d.renderbufferStorageMultisampleEXT(i.RENDERBUFFER,o0,F,g.width,g.height):i.renderbufferStorage(i.RENDERBUFFER,F,g.width,g.height)}}i.bindRenderbuffer(i.RENDERBUFFER,null)}function O0(E,g){if(g&&g.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(i.FRAMEBUFFER,E),!(g.depthTexture&&g.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!n.get(g.depthTexture).__webglTexture||g.depthTexture.image.width!==g.width||g.depthTexture.image.height!==g.height)&&(g.depthTexture.image.width=g.width,g.depthTexture.image.height=g.height,g.depthTexture.needsUpdate=!0),e0(g.depthTexture,0);const J=n.get(g.depthTexture).__webglTexture,t0=X0(g);if(g.depthTexture.format===mt)F0(g)?d.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.TEXTURE_2D,J,0,t0):i.framebufferTexture2D(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.TEXTURE_2D,J,0);else if(g.depthTexture.format===jt)F0(g)?d.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.TEXTURE_2D,J,0,t0):i.framebufferTexture2D(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.TEXTURE_2D,J,0);else throw new Error("Unknown depthTexture format")}function g0(E){const g=n.get(E),O=E.isWebGLCubeRenderTarget===!0;if(E.depthTexture&&!g.__autoAllocateDepthBuffer){if(O)throw new Error("target.depthTexture not supported in Cube render targets");O0(g.__webglFramebuffer,E)}else if(O){g.__webglDepthbuffer=[];for(let J=0;J<6;J++)t.bindFramebuffer(i.FRAMEBUFFER,g.__webglFramebuffer[J]),g.__webglDepthbuffer[J]=i.createRenderbuffer(),x0(g.__webglDepthbuffer[J],E,!1)}else t.bindFramebuffer(i.FRAMEBUFFER,g.__webglFramebuffer),g.__webglDepthbuffer=i.createRenderbuffer(),x0(g.__webglDepthbuffer,E,!1);t.bindFramebuffer(i.FRAMEBUFFER,null)}function A0(E,g,O){const J=n.get(E);g!==void 0&&i0(J.__webglFramebuffer,E,E.texture,i.COLOR_ATTACHMENT0,i.TEXTURE_2D),O!==void 0&&g0(E)}function W0(E){const g=E.texture,O=n.get(E),J=n.get(g);E.addEventListener("dispose",$),E.isWebGLMultipleRenderTargets!==!0&&(J.__webglTexture===void 0&&(J.__webglTexture=i.createTexture()),J.__version=g.version,o.memory.textures++);const t0=E.isWebGLCubeRenderTarget===!0,a0=E.isWebGLMultipleRenderTargets===!0,A=L(E)||a;if(t0){O.__webglFramebuffer=[];for(let q=0;q<6;q++)O.__webglFramebuffer[q]=i.createFramebuffer()}else{if(O.__webglFramebuffer=i.createFramebuffer(),a0)if(r.drawBuffers){const q=E.texture;for(let F=0,o0=q.length;F<o0;F++){const d0=n.get(q[F]);d0.__webglTexture===void 0&&(d0.__webglTexture=i.createTexture(),o.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(a&&E.samples>0&&F0(E)===!1){const q=a0?g:[g];O.__webglMultisampledFramebuffer=i.createFramebuffer(),O.__webglColorRenderbuffer=[],t.bindFramebuffer(i.FRAMEBUFFER,O.__webglMultisampledFramebuffer);for(let F=0;F<q.length;F++){const o0=q[F];O.__webglColorRenderbuffer[F]=i.createRenderbuffer(),i.bindRenderbuffer(i.RENDERBUFFER,O.__webglColorRenderbuffer[F]);const d0=s.convert(o0.format,o0.colorSpace),m0=s.convert(o0.type),u0=k(o0.internalFormat,d0,m0,o0.colorSpace,E.isXRRenderTarget===!0),f0=X0(E);i.renderbufferStorageMultisample(i.RENDERBUFFER,f0,u0,E.width,E.height),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+F,i.RENDERBUFFER,O.__webglColorRenderbuffer[F])}i.bindRenderbuffer(i.RENDERBUFFER,null),E.depthBuffer&&(O.__webglDepthRenderbuffer=i.createRenderbuffer(),x0(O.__webglDepthRenderbuffer,E,!0)),t.bindFramebuffer(i.FRAMEBUFFER,null)}}if(t0){t.bindTexture(i.TEXTURE_CUBE_MAP,J.__webglTexture),l0(i.TEXTURE_CUBE_MAP,g,A);for(let q=0;q<6;q++)i0(O.__webglFramebuffer[q],E,g,i.COLOR_ATTACHMENT0,i.TEXTURE_CUBE_MAP_POSITIVE_X+q);R(g,A)&&U(i.TEXTURE_CUBE_MAP),t.unbindTexture()}else if(a0){const q=E.texture;for(let F=0,o0=q.length;F<o0;F++){const d0=q[F],m0=n.get(d0);t.bindTexture(i.TEXTURE_2D,m0.__webglTexture),l0(i.TEXTURE_2D,d0,A),i0(O.__webglFramebuffer,E,d0,i.COLOR_ATTACHMENT0+F,i.TEXTURE_2D),R(d0,A)&&U(i.TEXTURE_2D)}t.unbindTexture()}else{let q=i.TEXTURE_2D;(E.isWebGL3DRenderTarget||E.isWebGLArrayRenderTarget)&&(a?q=E.isWebGL3DRenderTarget?i.TEXTURE_3D:i.TEXTURE_2D_ARRAY:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),t.bindTexture(q,J.__webglTexture),l0(q,g,A),i0(O.__webglFramebuffer,E,g,i.COLOR_ATTACHMENT0,q),R(g,A)&&U(q),t.unbindTexture()}E.depthBuffer&&g0(E)}function k0(E){const g=L(E)||a,O=E.isWebGLMultipleRenderTargets===!0?E.texture:[E.texture];for(let J=0,t0=O.length;J<t0;J++){const a0=O[J];if(R(a0,g)){const A=E.isWebGLCubeRenderTarget?i.TEXTURE_CUBE_MAP:i.TEXTURE_2D,q=n.get(a0).__webglTexture;t.bindTexture(A,q),U(A),t.unbindTexture()}}}function j0(E){if(a&&E.samples>0&&F0(E)===!1){const g=E.isWebGLMultipleRenderTargets?E.texture:[E.texture],O=E.width,J=E.height;let t0=i.COLOR_BUFFER_BIT;const a0=[],A=E.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT,q=n.get(E),F=E.isWebGLMultipleRenderTargets===!0;if(F)for(let o0=0;o0<g.length;o0++)t.bindFramebuffer(i.FRAMEBUFFER,q.__webglMultisampledFramebuffer),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+o0,i.RENDERBUFFER,null),t.bindFramebuffer(i.FRAMEBUFFER,q.__webglFramebuffer),i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0+o0,i.TEXTURE_2D,null,0);t.bindFramebuffer(i.READ_FRAMEBUFFER,q.__webglMultisampledFramebuffer),t.bindFramebuffer(i.DRAW_FRAMEBUFFER,q.__webglFramebuffer);for(let o0=0;o0<g.length;o0++){a0.push(i.COLOR_ATTACHMENT0+o0),E.depthBuffer&&a0.push(A);const d0=q.__ignoreDepthValues!==void 0?q.__ignoreDepthValues:!1;if(d0===!1&&(E.depthBuffer&&(t0|=i.DEPTH_BUFFER_BIT),E.stencilBuffer&&(t0|=i.STENCIL_BUFFER_BIT)),F&&i.framebufferRenderbuffer(i.READ_FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.RENDERBUFFER,q.__webglColorRenderbuffer[o0]),d0===!0&&(i.invalidateFramebuffer(i.READ_FRAMEBUFFER,[A]),i.invalidateFramebuffer(i.DRAW_FRAMEBUFFER,[A])),F){const m0=n.get(g[o0]).__webglTexture;i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,m0,0)}i.blitFramebuffer(0,0,O,J,0,0,O,J,t0,i.NEAREST),m&&i.invalidateFramebuffer(i.READ_FRAMEBUFFER,a0)}if(t.bindFramebuffer(i.READ_FRAMEBUFFER,null),t.bindFramebuffer(i.DRAW_FRAMEBUFFER,null),F)for(let o0=0;o0<g.length;o0++){t.bindFramebuffer(i.FRAMEBUFFER,q.__webglMultisampledFramebuffer),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+o0,i.RENDERBUFFER,q.__webglColorRenderbuffer[o0]);const d0=n.get(g[o0]).__webglTexture;t.bindFramebuffer(i.FRAMEBUFFER,q.__webglFramebuffer),i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0+o0,i.TEXTURE_2D,d0,0)}t.bindFramebuffer(i.DRAW_FRAMEBUFFER,q.__webglMultisampledFramebuffer)}}function X0(E){return Math.min(f,E.samples)}function F0(E){const g=n.get(E);return a&&E.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===!0&&g.__useRenderToTexture!==!1}function V0(E){const g=o.render.frame;v.get(E)!==g&&(v.set(E,g),E.update())}function ie(E,g){const O=E.colorSpace,J=E.format,t0=E.type;return E.isCompressedTexture===!0||E.format===L1||O!==Oe&&O!==gt&&(O===b0?a===!1?e.has("EXT_sRGB")===!0&&J===Pe?(E.format=L1,E.minFilter=Se,E.generateMipmaps=!1):g=w2.sRGBToLinear(g):(J!==Pe||t0!==vt)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",O)),g}this.allocateTextureUnit=X,this.resetTextureUnits=Y,this.setTexture2D=e0,this.setTexture2DArray=p0,this.setTexture3D=c0,this.setTextureCube=z,this.rebindTextures=A0,this.setupRenderTarget=W0,this.updateRenderTargetMipmap=k0,this.updateMultisampleRenderTarget=j0,this.setupDepthRenderbuffer=g0,this.setupFrameBufferTexture=i0,this.useMultisampledRTT=F0}function j5(i,e,t){const n=t.isWebGL2;function r(s,o=gt){let a;if(s===vt)return i.UNSIGNED_BYTE;if(s===Ir)return i.UNSIGNED_SHORT_4_4_4_4;if(s===Nr)return i.UNSIGNED_SHORT_5_5_5_1;if(s===Pr)return i.BYTE;if(s===Dr)return i.SHORT;if(s===T2)return i.UNSIGNED_SHORT;if(s===Ur)return i.INT;if(s===ft)return i.UNSIGNED_INT;if(s===pt)return i.FLOAT;if(s===an)return n?i.HALF_FLOAT:(a=e.get("OES_texture_half_float"),a!==null?a.HALF_FLOAT_OES:null);if(s===Fr)return i.ALPHA;if(s===Pe)return i.RGBA;if(s===Or)return i.LUMINANCE;if(s===Br)return i.LUMINANCE_ALPHA;if(s===mt)return i.DEPTH_COMPONENT;if(s===jt)return i.DEPTH_STENCIL;if(s===L1)return a=e.get("EXT_sRGB"),a!==null?a.SRGB_ALPHA_EXT:null;if(s===zr)return i.RED;if(s===Gr)return i.RED_INTEGER;if(s===Hr)return i.RG;if(s===Vr)return i.RG_INTEGER;if(s===kr)return i.RGBA_INTEGER;if(s===jn||s===Kn||s===Zn||s===$n)if(o===b0)if(a=e.get("WEBGL_compressed_texture_s3tc_srgb"),a!==null){if(s===jn)return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(s===Kn)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(s===Zn)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(s===$n)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(a=e.get("WEBGL_compressed_texture_s3tc"),a!==null){if(s===jn)return a.COMPRESSED_RGB_S3TC_DXT1_EXT;if(s===Kn)return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(s===Zn)return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(s===$n)return a.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(s===J1||s===Q1||s===ei||s===ti)if(a=e.get("WEBGL_compressed_texture_pvrtc"),a!==null){if(s===J1)return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(s===Q1)return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(s===ei)return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(s===ti)return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(s===Wr)return a=e.get("WEBGL_compressed_texture_etc1"),a!==null?a.COMPRESSED_RGB_ETC1_WEBGL:null;if(s===ni||s===ii)if(a=e.get("WEBGL_compressed_texture_etc"),a!==null){if(s===ni)return o===b0?a.COMPRESSED_SRGB8_ETC2:a.COMPRESSED_RGB8_ETC2;if(s===ii)return o===b0?a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:a.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(s===ri||s===si||s===ai||s===oi||s===li||s===ci||s===ui||s===hi||s===di||s===fi||s===pi||s===mi||s===_i||s===gi)if(a=e.get("WEBGL_compressed_texture_astc"),a!==null){if(s===ri)return o===b0?a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:a.COMPRESSED_RGBA_ASTC_4x4_KHR;if(s===si)return o===b0?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:a.COMPRESSED_RGBA_ASTC_5x4_KHR;if(s===ai)return o===b0?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:a.COMPRESSED_RGBA_ASTC_5x5_KHR;if(s===oi)return o===b0?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:a.COMPRESSED_RGBA_ASTC_6x5_KHR;if(s===li)return o===b0?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:a.COMPRESSED_RGBA_ASTC_6x6_KHR;if(s===ci)return o===b0?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:a.COMPRESSED_RGBA_ASTC_8x5_KHR;if(s===ui)return o===b0?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:a.COMPRESSED_RGBA_ASTC_8x6_KHR;if(s===hi)return o===b0?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:a.COMPRESSED_RGBA_ASTC_8x8_KHR;if(s===di)return o===b0?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:a.COMPRESSED_RGBA_ASTC_10x5_KHR;if(s===fi)return o===b0?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:a.COMPRESSED_RGBA_ASTC_10x6_KHR;if(s===pi)return o===b0?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:a.COMPRESSED_RGBA_ASTC_10x8_KHR;if(s===mi)return o===b0?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:a.COMPRESSED_RGBA_ASTC_10x10_KHR;if(s===_i)return o===b0?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:a.COMPRESSED_RGBA_ASTC_12x10_KHR;if(s===gi)return o===b0?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:a.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(s===Jn)if(a=e.get("EXT_texture_compression_bptc"),a!==null){if(s===Jn)return o===b0?a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:a.COMPRESSED_RGBA_BPTC_UNORM_EXT}else return null;if(s===Xr||s===vi||s===xi||s===Mi)if(a=e.get("EXT_texture_compression_rgtc"),a!==null){if(s===Jn)return a.COMPRESSED_RED_RGTC1_EXT;if(s===vi)return a.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(s===xi)return a.COMPRESSED_RED_GREEN_RGTC2_EXT;if(s===Mi)return a.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return s===Wt?n?i.UNSIGNED_INT_24_8:(a=e.get("WEBGL_depth_texture"),a!==null?a.UNSIGNED_INT_24_8_WEBGL:null):i[s]!==void 0?i[s]:null}return{convert:r}}class K5 extends Ee{constructor(e=[]){super(),this.isArrayCamera=!0,this.cameras=e}}class Un extends fe{constructor(){super(),this.isGroup=!0,this.type="Group"}}const Z5={type:"move"};class E1{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new Un,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new Un,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new D,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new D),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new Un,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new D,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new D),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){const t=this._hand;if(t)for(const n of e.hand.values())this._getHandJoint(t,n)}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,n){let r=null,s=null,o=null;const a=this._targetRay,u=this._grip,l=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(l&&e.hand){o=!0;for(const x of e.hand.values()){const p=t.getJointPose(x,n),c=this._getHandJoint(l,x);p!==null&&(c.matrix.fromArray(p.transform.matrix),c.matrix.decompose(c.position,c.rotation,c.scale),c.matrixWorldNeedsUpdate=!0,c.jointRadius=p.radius),c.visible=p!==null}const h=l.joints["index-finger-tip"],f=l.joints["thumb-tip"],d=h.position.distanceTo(f.position),m=.02,v=.005;l.inputState.pinching&&d>m+v?(l.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!l.inputState.pinching&&d<=m-v&&(l.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else u!==null&&e.gripSpace&&(s=t.getPose(e.gripSpace,n),s!==null&&(u.matrix.fromArray(s.transform.matrix),u.matrix.decompose(u.position,u.rotation,u.scale),u.matrixWorldNeedsUpdate=!0,s.linearVelocity?(u.hasLinearVelocity=!0,u.linearVelocity.copy(s.linearVelocity)):u.hasLinearVelocity=!1,s.angularVelocity?(u.hasAngularVelocity=!0,u.angularVelocity.copy(s.angularVelocity)):u.hasAngularVelocity=!1));a!==null&&(r=t.getPose(e.targetRaySpace,n),r===null&&s!==null&&(r=s),r!==null&&(a.matrix.fromArray(r.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),a.matrixWorldNeedsUpdate=!0,r.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(r.linearVelocity)):a.hasLinearVelocity=!1,r.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(r.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(Z5)))}return a!==null&&(a.visible=r!==null),u!==null&&(u.visible=s!==null),l!==null&&(l.visible=o!==null),this}_getHandJoint(e,t){if(e.joints[t.jointName]===void 0){const n=new Un;n.matrixAutoUpdate=!1,n.visible=!1,e.joints[t.jointName]=n,e.add(n)}return e.joints[t.jointName]}}class $5 extends ve{constructor(e,t,n,r,s,o,a,u,l,h){if(h=h!==void 0?h:mt,h!==mt&&h!==jt)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&h===mt&&(n=ft),n===void 0&&h===jt&&(n=Wt),super(null,r,s,o,a,u,h,n,l),this.isDepthTexture=!0,this.image={width:e,height:t},this.magFilter=a!==void 0?a:ue,this.minFilter=u!==void 0?u:ue,this.flipY=!1,this.generateMipmaps=!1}}class J5 extends Et{constructor(e,t){super();const n=this;let r=null,s=1,o=null,a="local-floor",u=1,l=null,h=null,f=null,d=null,m=null,v=null;const x=t.getContextAttributes();let p=null,c=null;const y=[],M=[],L=new Set,T=new Map,R=new Ee;R.layers.enable(1),R.viewport=new ne;const U=new Ee;U.layers.enable(2),U.viewport=new ne;const k=[R,U],_=new K5;_.layers.enable(1),_.layers.enable(2);let b=null,j=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(z){let K=y[z];return K===void 0&&(K=new E1,y[z]=K),K.getTargetRaySpace()},this.getControllerGrip=function(z){let K=y[z];return K===void 0&&(K=new E1,y[z]=K),K.getGripSpace()},this.getHand=function(z){let K=y[z];return K===void 0&&(K=new E1,y[z]=K),K.getHandSpace()};function $(z){const K=M.indexOf(z.inputSource);if(K===-1)return;const r0=y[K];r0!==void 0&&(r0.update(z.inputSource,z.frame,l||o),r0.dispatchEvent({type:z.type,data:z.inputSource}))}function I(){r.removeEventListener("select",$),r.removeEventListener("selectstart",$),r.removeEventListener("selectend",$),r.removeEventListener("squeeze",$),r.removeEventListener("squeezestart",$),r.removeEventListener("squeezeend",$),r.removeEventListener("end",I),r.removeEventListener("inputsourceschange",B);for(let z=0;z<y.length;z++){const K=M[z];K!==null&&(M[z]=null,y[z].disconnect(K))}b=null,j=null,e.setRenderTarget(p),m=null,d=null,f=null,r=null,c=null,c0.stop(),n.isPresenting=!1,n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(z){s=z,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(z){a=z,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return l||o},this.setReferenceSpace=function(z){l=z},this.getBaseLayer=function(){return d!==null?d:m},this.getBinding=function(){return f},this.getFrame=function(){return v},this.getSession=function(){return r},this.setSession=async function(z){if(r=z,r!==null){if(p=e.getRenderTarget(),r.addEventListener("select",$),r.addEventListener("selectstart",$),r.addEventListener("selectend",$),r.addEventListener("squeeze",$),r.addEventListener("squeezestart",$),r.addEventListener("squeezeend",$),r.addEventListener("end",I),r.addEventListener("inputsourceschange",B),x.xrCompatible!==!0&&await t.makeXRCompatible(),r.renderState.layers===void 0||e.capabilities.isWebGL2===!1){const K={antialias:r.renderState.layers===void 0?x.antialias:!0,alpha:!0,depth:x.depth,stencil:x.stencil,framebufferScaleFactor:s};m=new XRWebGLLayer(r,t,K),r.updateRenderState({baseLayer:m}),c=new xt(m.framebufferWidth,m.framebufferHeight,{format:Pe,type:vt,colorSpace:e.outputColorSpace,stencilBuffer:x.stencil})}else{let K=null,r0=null,l0=null;x.depth&&(l0=x.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,K=x.stencil?jt:mt,r0=x.stencil?Wt:ft);const C={colorFormat:t.RGBA8,depthFormat:l0,scaleFactor:s};f=new XRWebGLBinding(r,t),d=f.createProjectionLayer(C),r.updateRenderState({layers:[d]}),c=new xt(d.textureWidth,d.textureHeight,{format:Pe,type:vt,depthTexture:new $5(d.textureWidth,d.textureHeight,r0,void 0,void 0,void 0,void 0,void 0,void 0,K),stencilBuffer:x.stencil,colorSpace:e.outputColorSpace,samples:x.antialias?4:0});const E0=e.properties.get(c);E0.__ignoreDepthValues=d.ignoreDepthValues}c.isXRRenderTarget=!0,this.setFoveation(u),l=null,o=await r.requestReferenceSpace(a),c0.setContext(r),c0.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(r!==null)return r.environmentBlendMode};function B(z){for(let K=0;K<z.removed.length;K++){const r0=z.removed[K],l0=M.indexOf(r0);l0>=0&&(M[l0]=null,y[l0].disconnect(r0))}for(let K=0;K<z.added.length;K++){const r0=z.added[K];let l0=M.indexOf(r0);if(l0===-1){for(let E0=0;E0<y.length;E0++)if(E0>=M.length){M.push(r0),l0=E0;break}else if(M[E0]===null){M[E0]=r0,l0=E0;break}if(l0===-1)break}const C=y[l0];C&&C.connect(r0)}}const V=new D,n0=new D;function Y(z,K,r0){V.setFromMatrixPosition(K.matrixWorld),n0.setFromMatrixPosition(r0.matrixWorld);const l0=V.distanceTo(n0),C=K.projectionMatrix.elements,E0=r0.projectionMatrix.elements,S0=C[14]/(C[10]-1),i0=C[14]/(C[10]+1),x0=(C[9]+1)/C[5],O0=(C[9]-1)/C[5],g0=(C[8]-1)/C[0],A0=(E0[8]+1)/E0[0],W0=S0*g0,k0=S0*A0,j0=l0/(-g0+A0),X0=j0*-g0;K.matrixWorld.decompose(z.position,z.quaternion,z.scale),z.translateX(X0),z.translateZ(j0),z.matrixWorld.compose(z.position,z.quaternion,z.scale),z.matrixWorldInverse.copy(z.matrixWorld).invert();const F0=S0+j0,V0=i0+j0,ie=W0-X0,E=k0+(l0-X0),g=x0*i0/V0*F0,O=O0*i0/V0*F0;z.projectionMatrix.makePerspective(ie,E,g,O,F0,V0),z.projectionMatrixInverse.copy(z.projectionMatrix).invert()}function X(z,K){K===null?z.matrixWorld.copy(z.matrix):z.matrixWorld.multiplyMatrices(K.matrixWorld,z.matrix),z.matrixWorldInverse.copy(z.matrixWorld).invert()}this.updateCamera=function(z){if(r===null)return;_.near=U.near=R.near=z.near,_.far=U.far=R.far=z.far,(b!==_.near||j!==_.far)&&(r.updateRenderState({depthNear:_.near,depthFar:_.far}),b=_.near,j=_.far);const K=z.parent,r0=_.cameras;X(_,K);for(let l0=0;l0<r0.length;l0++)X(r0[l0],K);r0.length===2?Y(_,R,U):_.projectionMatrix.copy(R.projectionMatrix),Z(z,_,K)};function Z(z,K,r0){r0===null?z.matrix.copy(K.matrixWorld):(z.matrix.copy(r0.matrixWorld),z.matrix.invert(),z.matrix.multiply(K.matrixWorld)),z.matrix.decompose(z.position,z.quaternion,z.scale),z.updateMatrixWorld(!0);const l0=z.children;for(let C=0,E0=l0.length;C<E0;C++)l0[C].updateMatrixWorld(!0);z.projectionMatrix.copy(K.projectionMatrix),z.projectionMatrixInverse.copy(K.projectionMatrixInverse),z.isPerspectiveCamera&&(z.fov=P1*2*Math.atan(1/z.projectionMatrix.elements[5]),z.zoom=1)}this.getCamera=function(){return _},this.getFoveation=function(){if(!(d===null&&m===null))return u},this.setFoveation=function(z){u=z,d!==null&&(d.fixedFoveation=z),m!==null&&m.fixedFoveation!==void 0&&(m.fixedFoveation=z)},this.getPlanes=function(){return L};let e0=null;function p0(z,K){if(h=K.getViewerPose(l||o),v=K,h!==null){const r0=h.views;m!==null&&(e.setRenderTargetFramebuffer(c,m.framebuffer),e.setRenderTarget(c));let l0=!1;r0.length!==_.cameras.length&&(_.cameras.length=0,l0=!0);for(let C=0;C<r0.length;C++){const E0=r0[C];let S0=null;if(m!==null)S0=m.getViewport(E0);else{const x0=f.getViewSubImage(d,E0);S0=x0.viewport,C===0&&(e.setRenderTargetTextures(c,x0.colorTexture,d.ignoreDepthValues?void 0:x0.depthStencilTexture),e.setRenderTarget(c))}let i0=k[C];i0===void 0&&(i0=new Ee,i0.layers.enable(C),i0.viewport=new ne,k[C]=i0),i0.matrix.fromArray(E0.transform.matrix),i0.matrix.decompose(i0.position,i0.quaternion,i0.scale),i0.projectionMatrix.fromArray(E0.projectionMatrix),i0.projectionMatrixInverse.copy(i0.projectionMatrix).invert(),i0.viewport.set(S0.x,S0.y,S0.width,S0.height),C===0&&(_.matrix.copy(i0.matrix),_.matrix.decompose(_.position,_.quaternion,_.scale)),l0===!0&&_.cameras.push(i0)}}for(let r0=0;r0<y.length;r0++){const l0=M[r0],C=y[r0];l0!==null&&C!==void 0&&C.update(l0,K,l||o)}if(e0&&e0(z,K),K.detectedPlanes){n.dispatchEvent({type:"planesdetected",data:K.detectedPlanes});let r0=null;for(const l0 of L)K.detectedPlanes.has(l0)||(r0===null&&(r0=[]),r0.push(l0));if(r0!==null)for(const l0 of r0)L.delete(l0),T.delete(l0),n.dispatchEvent({type:"planeremoved",data:l0});for(const l0 of K.detectedPlanes)if(!L.has(l0))L.add(l0),T.set(l0,K.lastChangedTime),n.dispatchEvent({type:"planeadded",data:l0});else{const C=T.get(l0);l0.lastChangedTime>C&&(T.set(l0,l0.lastChangedTime),n.dispatchEvent({type:"planechanged",data:l0}))}}v=null}const c0=new z2;c0.setAnimationLoop(p0),this.setAnimationLoop=function(z){e0=z},this.dispose=function(){}}}function Q5(i,e){function t(p,c){p.matrixAutoUpdate===!0&&p.updateMatrix(),c.value.copy(p.matrix)}function n(p,c){c.color.getRGB(p.fogColor.value,N2(i)),c.isFog?(p.fogNear.value=c.near,p.fogFar.value=c.far):c.isFogExp2&&(p.fogDensity.value=c.density)}function r(p,c,y,M,L){c.isMeshBasicMaterial||c.isMeshLambertMaterial?s(p,c):c.isMeshToonMaterial?(s(p,c),f(p,c)):c.isMeshPhongMaterial?(s(p,c),h(p,c)):c.isMeshStandardMaterial?(s(p,c),d(p,c),c.isMeshPhysicalMaterial&&m(p,c,L)):c.isMeshMatcapMaterial?(s(p,c),v(p,c)):c.isMeshDepthMaterial?s(p,c):c.isMeshDistanceMaterial?(s(p,c),x(p,c)):c.isMeshNormalMaterial?s(p,c):c.isLineBasicMaterial?(o(p,c),c.isLineDashedMaterial&&a(p,c)):c.isPointsMaterial?u(p,c,y,M):c.isSpriteMaterial?l(p,c):c.isShadowMaterial?(p.color.value.copy(c.color),p.opacity.value=c.opacity):c.isShaderMaterial&&(c.uniformsNeedUpdate=!1)}function s(p,c){p.opacity.value=c.opacity,c.color&&p.diffuse.value.copy(c.color),c.emissive&&p.emissive.value.copy(c.emissive).multiplyScalar(c.emissiveIntensity),c.map&&(p.map.value=c.map,t(c.map,p.mapTransform)),c.alphaMap&&(p.alphaMap.value=c.alphaMap,t(c.alphaMap,p.alphaMapTransform)),c.bumpMap&&(p.bumpMap.value=c.bumpMap,t(c.bumpMap,p.bumpMapTransform),p.bumpScale.value=c.bumpScale,c.side===de&&(p.bumpScale.value*=-1)),c.normalMap&&(p.normalMap.value=c.normalMap,t(c.normalMap,p.normalMapTransform),p.normalScale.value.copy(c.normalScale),c.side===de&&p.normalScale.value.negate()),c.displacementMap&&(p.displacementMap.value=c.displacementMap,t(c.displacementMap,p.displacementMapTransform),p.displacementScale.value=c.displacementScale,p.displacementBias.value=c.displacementBias),c.emissiveMap&&(p.emissiveMap.value=c.emissiveMap,t(c.emissiveMap,p.emissiveMapTransform)),c.specularMap&&(p.specularMap.value=c.specularMap,t(c.specularMap,p.specularMapTransform)),c.alphaTest>0&&(p.alphaTest.value=c.alphaTest);const y=e.get(c).envMap;if(y&&(p.envMap.value=y,p.flipEnvMap.value=y.isCubeTexture&&y.isRenderTargetTexture===!1?-1:1,p.reflectivity.value=c.reflectivity,p.ior.value=c.ior,p.refractionRatio.value=c.refractionRatio),c.lightMap){p.lightMap.value=c.lightMap;const M=i.useLegacyLights===!0?Math.PI:1;p.lightMapIntensity.value=c.lightMapIntensity*M,t(c.lightMap,p.lightMapTransform)}c.aoMap&&(p.aoMap.value=c.aoMap,p.aoMapIntensity.value=c.aoMapIntensity,t(c.aoMap,p.aoMapTransform))}function o(p,c){p.diffuse.value.copy(c.color),p.opacity.value=c.opacity,c.map&&(p.map.value=c.map,t(c.map,p.mapTransform))}function a(p,c){p.dashSize.value=c.dashSize,p.totalSize.value=c.dashSize+c.gapSize,p.scale.value=c.scale}function u(p,c,y,M){p.diffuse.value.copy(c.color),p.opacity.value=c.opacity,p.size.value=c.size*y,p.scale.value=M*.5,c.map&&(p.map.value=c.map,t(c.map,p.uvTransform)),c.alphaMap&&(p.alphaMap.value=c.alphaMap),c.alphaTest>0&&(p.alphaTest.value=c.alphaTest)}function l(p,c){p.diffuse.value.copy(c.color),p.opacity.value=c.opacity,p.rotation.value=c.rotation,c.map&&(p.map.value=c.map,t(c.map,p.mapTransform)),c.alphaMap&&(p.alphaMap.value=c.alphaMap),c.alphaTest>0&&(p.alphaTest.value=c.alphaTest)}function h(p,c){p.specular.value.copy(c.specular),p.shininess.value=Math.max(c.shininess,1e-4)}function f(p,c){c.gradientMap&&(p.gradientMap.value=c.gradientMap)}function d(p,c){p.metalness.value=c.metalness,c.metalnessMap&&(p.metalnessMap.value=c.metalnessMap,t(c.metalnessMap,p.metalnessMapTransform)),p.roughness.value=c.roughness,c.roughnessMap&&(p.roughnessMap.value=c.roughnessMap,t(c.roughnessMap,p.roughnessMapTransform)),e.get(c).envMap&&(p.envMapIntensity.value=c.envMapIntensity)}function m(p,c,y){p.ior.value=c.ior,c.sheen>0&&(p.sheenColor.value.copy(c.sheenColor).multiplyScalar(c.sheen),p.sheenRoughness.value=c.sheenRoughness,c.sheenColorMap&&(p.sheenColorMap.value=c.sheenColorMap,t(c.sheenColorMap,p.sheenColorMapTransform)),c.sheenRoughnessMap&&(p.sheenRoughnessMap.value=c.sheenRoughnessMap,t(c.sheenRoughnessMap,p.sheenRoughnessMapTransform))),c.clearcoat>0&&(p.clearcoat.value=c.clearcoat,p.clearcoatRoughness.value=c.clearcoatRoughness,c.clearcoatMap&&(p.clearcoatMap.value=c.clearcoatMap,t(c.clearcoatMap,p.clearcoatMapTransform)),c.clearcoatRoughnessMap&&(p.clearcoatRoughnessMap.value=c.clearcoatRoughnessMap,t(c.clearcoatRoughnessMap,p.clearcoatRoughnessMapTransform)),c.clearcoatNormalMap&&(p.clearcoatNormalMap.value=c.clearcoatNormalMap,t(c.clearcoatNormalMap,p.clearcoatNormalMapTransform),p.clearcoatNormalScale.value.copy(c.clearcoatNormalScale),c.side===de&&p.clearcoatNormalScale.value.negate())),c.iridescence>0&&(p.iridescence.value=c.iridescence,p.iridescenceIOR.value=c.iridescenceIOR,p.iridescenceThicknessMinimum.value=c.iridescenceThicknessRange[0],p.iridescenceThicknessMaximum.value=c.iridescenceThicknessRange[1],c.iridescenceMap&&(p.iridescenceMap.value=c.iridescenceMap,t(c.iridescenceMap,p.iridescenceMapTransform)),c.iridescenceThicknessMap&&(p.iridescenceThicknessMap.value=c.iridescenceThicknessMap,t(c.iridescenceThicknessMap,p.iridescenceThicknessMapTransform))),c.transmission>0&&(p.transmission.value=c.transmission,p.transmissionSamplerMap.value=y.texture,p.transmissionSamplerSize.value.set(y.width,y.height),c.transmissionMap&&(p.transmissionMap.value=c.transmissionMap,t(c.transmissionMap,p.transmissionMapTransform)),p.thickness.value=c.thickness,c.thicknessMap&&(p.thicknessMap.value=c.thicknessMap,t(c.thicknessMap,p.thicknessMapTransform)),p.attenuationDistance.value=c.attenuationDistance,p.attenuationColor.value.copy(c.attenuationColor)),p.specularIntensity.value=c.specularIntensity,p.specularColor.value.copy(c.specularColor),c.specularColorMap&&(p.specularColorMap.value=c.specularColorMap,t(c.specularColorMap,p.specularColorMapTransform)),c.specularIntensityMap&&(p.specularIntensityMap.value=c.specularIntensityMap,t(c.specularIntensityMap,p.specularIntensityMapTransform))}function v(p,c){c.matcap&&(p.matcap.value=c.matcap)}function x(p,c){const y=e.get(c).light;p.referencePosition.value.setFromMatrixPosition(y.matrixWorld),p.nearDistance.value=y.shadow.camera.near,p.farDistance.value=y.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:r}}function e3(i,e,t,n){let r={},s={},o=[];const a=t.isWebGL2?i.getParameter(i.MAX_UNIFORM_BUFFER_BINDINGS):0;function u(y,M){const L=M.program;n.uniformBlockBinding(y,L)}function l(y,M){let L=r[y.id];L===void 0&&(v(y),L=h(y),r[y.id]=L,y.addEventListener("dispose",p));const T=M.program;n.updateUBOMapping(y,T);const R=e.render.frame;s[y.id]!==R&&(d(y),s[y.id]=R)}function h(y){const M=f();y.__bindingPointIndex=M;const L=i.createBuffer(),T=y.__size,R=y.usage;return i.bindBuffer(i.UNIFORM_BUFFER,L),i.bufferData(i.UNIFORM_BUFFER,T,R),i.bindBuffer(i.UNIFORM_BUFFER,null),i.bindBufferBase(i.UNIFORM_BUFFER,M,L),L}function f(){for(let y=0;y<a;y++)if(o.indexOf(y)===-1)return o.push(y),y;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function d(y){const M=r[y.id],L=y.uniforms,T=y.__cache;i.bindBuffer(i.UNIFORM_BUFFER,M);for(let R=0,U=L.length;R<U;R++){const k=L[R];if(m(k,R,T)===!0){const _=k.__offset,b=Array.isArray(k.value)?k.value:[k.value];let j=0;for(let $=0;$<b.length;$++){const I=b[$],B=x(I);typeof I=="number"?(k.__data[0]=I,i.bufferSubData(i.UNIFORM_BUFFER,_+j,k.__data)):I.isMatrix3?(k.__data[0]=I.elements[0],k.__data[1]=I.elements[1],k.__data[2]=I.elements[2],k.__data[3]=I.elements[0],k.__data[4]=I.elements[3],k.__data[5]=I.elements[4],k.__data[6]=I.elements[5],k.__data[7]=I.elements[0],k.__data[8]=I.elements[6],k.__data[9]=I.elements[7],k.__data[10]=I.elements[8],k.__data[11]=I.elements[0]):(I.toArray(k.__data,j),j+=B.storage/Float32Array.BYTES_PER_ELEMENT)}i.bufferSubData(i.UNIFORM_BUFFER,_,k.__data)}}i.bindBuffer(i.UNIFORM_BUFFER,null)}function m(y,M,L){const T=y.value;if(L[M]===void 0){if(typeof T=="number")L[M]=T;else{const R=Array.isArray(T)?T:[T],U=[];for(let k=0;k<R.length;k++)U.push(R[k].clone());L[M]=U}return!0}else if(typeof T=="number"){if(L[M]!==T)return L[M]=T,!0}else{const R=Array.isArray(L[M])?L[M]:[L[M]],U=Array.isArray(T)?T:[T];for(let k=0;k<R.length;k++){const _=R[k];if(_.equals(U[k])===!1)return _.copy(U[k]),!0}}return!1}function v(y){const M=y.uniforms;let L=0;const T=16;let R=0;for(let U=0,k=M.length;U<k;U++){const _=M[U],b={boundary:0,storage:0},j=Array.isArray(_.value)?_.value:[_.value];for(let $=0,I=j.length;$<I;$++){const B=j[$],V=x(B);b.boundary+=V.boundary,b.storage+=V.storage}if(_.__data=new Float32Array(b.storage/Float32Array.BYTES_PER_ELEMENT),_.__offset=L,U>0){R=L%T;const $=T-R;R!==0&&$-b.boundary<0&&(L+=T-R,_.__offset=L)}L+=b.storage}return R=L%T,R>0&&(L+=T-R),y.__size=L,y.__cache={},this}function x(y){const M={boundary:0,storage:0};return typeof y=="number"?(M.boundary=4,M.storage=4):y.isVector2?(M.boundary=8,M.storage=8):y.isVector3||y.isColor?(M.boundary=16,M.storage=12):y.isVector4?(M.boundary=16,M.storage=16):y.isMatrix3?(M.boundary=48,M.storage=48):y.isMatrix4?(M.boundary=64,M.storage=64):y.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",y),M}function p(y){const M=y.target;M.removeEventListener("dispose",p);const L=o.indexOf(M.__bindingPointIndex);o.splice(L,1),i.deleteBuffer(r[M.id]),delete r[M.id],delete s[M.id]}function c(){for(const y in r)i.deleteBuffer(r[y]);o=[],r={},s={}}return{bind:u,update:l,dispose:c}}function t3(){const i=Fn("canvas");return i.style.display="block",i}class W2{constructor(e={}){const{canvas:t=t3(),context:n=null,depth:r=!0,stencil:s=!0,alpha:o=!1,antialias:a=!1,premultipliedAlpha:u=!0,preserveDrawingBuffer:l=!1,powerPreference:h="default",failIfMajorPerformanceCaveat:f=!1}=e;this.isWebGLRenderer=!0;let d;n!==null?d=n.getContextAttributes().alpha:d=o;let m=null,v=null;const x=[],p=[];this.domElement=t,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputColorSpace=b0,this.useLegacyLights=!0,this.toneMapping=Ye,this.toneMappingExposure=1;const c=this;let y=!1,M=0,L=0,T=null,R=-1,U=null;const k=new ne,_=new ne;let b=null,j=t.width,$=t.height,I=1,B=null,V=null;const n0=new ne(0,0,j,$),Y=new ne(0,0,j,$);let X=!1;const Z=new B2;let e0=!1,p0=!1,c0=null;const z=new te,K=new D,r0={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function l0(){return T===null?I:1}let C=n;function E0(S,N){for(let H=0;H<S.length;H++){const P=S[H],W=t.getContext(P,N);if(W!==null)return W}return null}try{const S={alpha:!0,depth:r,stencil:s,antialias:a,premultipliedAlpha:u,preserveDrawingBuffer:l,powerPreference:h,failIfMajorPerformanceCaveat:f};if("setAttribute"in t&&t.setAttribute("data-engine",`three.js r${I1}`),t.addEventListener("webglcontextlost",f0,!1),t.addEventListener("webglcontextrestored",T0,!1),t.addEventListener("webglcontextcreationerror",C0,!1),C===null){const N=["webgl2","webgl","experimental-webgl"];if(c.isWebGL1Renderer===!0&&N.shift(),C=E0(N,S),C===null)throw E0(N)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}C.getShaderPrecisionFormat===void 0&&(C.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(S){throw console.error("THREE.WebGLRenderer: "+S.message),S}let S0,i0,x0,O0,g0,A0,W0,k0,j0,X0,F0,V0,ie,E,g,O,J,t0,a0,A,q,F,o0,d0;function m0(){S0=new d4(C),i0=new s4(C,S0,e),S0.init(i0),F=new j5(C,S0,i0),x0=new q5(C,S0,i0),O0=new m4(C),g0=new D5,A0=new Y5(C,S0,x0,g0,i0,F,O0),W0=new o4(c),k0=new h4(c),j0=new bs(C,i0),o0=new i4(C,S0,j0,i0),X0=new f4(C,j0,O0,o0),F0=new x4(C,X0,j0,O0),a0=new v4(C,i0,A0),O=new a4(g0),V0=new P5(c,W0,k0,S0,i0,o0,O),ie=new Q5(c,g0),E=new I5,g=new G5(S0,i0),t0=new n4(c,W0,k0,x0,F0,d,u),J=new X5(c,F0,i0),d0=new e3(C,O0,i0,x0),A=new r4(C,S0,O0,i0),q=new p4(C,S0,O0,i0),O0.programs=V0.programs,c.capabilities=i0,c.extensions=S0,c.properties=g0,c.renderLists=E,c.shadowMap=J,c.state=x0,c.info=O0}m0();const u0=new J5(c,C);this.xr=u0,this.getContext=function(){return C},this.getContextAttributes=function(){return C.getContextAttributes()},this.forceContextLoss=function(){const S=S0.get("WEBGL_lose_context");S&&S.loseContext()},this.forceContextRestore=function(){const S=S0.get("WEBGL_lose_context");S&&S.restoreContext()},this.getPixelRatio=function(){return I},this.setPixelRatio=function(S){S!==void 0&&(I=S,this.setSize(j,$,!1))},this.getSize=function(S){return S.set(j,$)},this.setSize=function(S,N,H=!0){if(u0.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}j=S,$=N,t.width=Math.floor(S*I),t.height=Math.floor(N*I),H===!0&&(t.style.width=S+"px",t.style.height=N+"px"),this.setViewport(0,0,S,N)},this.getDrawingBufferSize=function(S){return S.set(j*I,$*I).floor()},this.setDrawingBufferSize=function(S,N,H){j=S,$=N,I=H,t.width=Math.floor(S*H),t.height=Math.floor(N*H),this.setViewport(0,0,S,N)},this.getCurrentViewport=function(S){return S.copy(k)},this.getViewport=function(S){return S.copy(n0)},this.setViewport=function(S,N,H,P){S.isVector4?n0.set(S.x,S.y,S.z,S.w):n0.set(S,N,H,P),x0.viewport(k.copy(n0).multiplyScalar(I).floor())},this.getScissor=function(S){return S.copy(Y)},this.setScissor=function(S,N,H,P){S.isVector4?Y.set(S.x,S.y,S.z,S.w):Y.set(S,N,H,P),x0.scissor(_.copy(Y).multiplyScalar(I).floor())},this.getScissorTest=function(){return X},this.setScissorTest=function(S){x0.setScissorTest(X=S)},this.setOpaqueSort=function(S){B=S},this.setTransparentSort=function(S){V=S},this.getClearColor=function(S){return S.copy(t0.getClearColor())},this.setClearColor=function(){t0.setClearColor.apply(t0,arguments)},this.getClearAlpha=function(){return t0.getClearAlpha()},this.setClearAlpha=function(){t0.setClearAlpha.apply(t0,arguments)},this.clear=function(S=!0,N=!0,H=!0){let P=0;S&&(P|=C.COLOR_BUFFER_BIT),N&&(P|=C.DEPTH_BUFFER_BIT),H&&(P|=C.STENCIL_BUFFER_BIT),C.clear(P)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",f0,!1),t.removeEventListener("webglcontextrestored",T0,!1),t.removeEventListener("webglcontextcreationerror",C0,!1),E.dispose(),g.dispose(),g0.dispose(),W0.dispose(),k0.dispose(),F0.dispose(),o0.dispose(),d0.dispose(),V0.dispose(),u0.dispose(),u0.removeEventListener("sessionstart",_0),u0.removeEventListener("sessionend",z0),c0&&(c0.dispose(),c0=null),G0.stop()};function f0(S){S.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),y=!0}function T0(){console.log("THREE.WebGLRenderer: Context Restored."),y=!1;const S=O0.autoReset,N=J.enabled,H=J.autoUpdate,P=J.needsUpdate,W=J.type;m0(),O0.autoReset=S,J.enabled=N,J.autoUpdate=H,J.needsUpdate=P,J.type=W}function C0(S){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",S.statusMessage)}function q0(S){const N=S.target;N.removeEventListener("dispose",q0),w(N)}function w(S){G(S),g0.remove(S)}function G(S){const N=g0.get(S).programs;N!==void 0&&(N.forEach(function(H){V0.releaseProgram(H)}),S.isShaderMaterial&&V0.releaseShaderCache(S))}this.renderBufferDirect=function(S,N,H,P,W,v0){N===null&&(N=r0);const M0=W.isMesh&&W.matrixWorld.determinant()<0,y0=q2(S,N,H,P,W);x0.setMaterial(P,M0);let w0=H.index,L0=1;P.wireframe===!0&&(w0=X0.getWireframeAttribute(H),L0=2);const P0=H.drawRange,D0=H.attributes.position;let B0=P0.start*L0,oe=(P0.start+P0.count)*L0;v0!==null&&(B0=Math.max(B0,v0.start*L0),oe=Math.min(oe,(v0.start+v0.count)*L0)),w0!==null?(B0=Math.max(B0,0),oe=Math.min(oe,w0.count)):D0!=null&&(B0=Math.max(B0,0),oe=Math.min(oe,D0.count));const ye=oe-B0;if(ye<0||ye===1/0)return;o0.setup(W,P,y0,H,w0);let nt,K0=A;if(w0!==null&&(nt=j0.get(w0),K0=q,K0.setIndex(nt)),W.isMesh)P.wireframe===!0?(x0.setLineWidth(P.wireframeLinewidth*l0()),K0.setMode(C.LINES)):K0.setMode(C.TRIANGLES);else if(W.isLine){let N0=P.linewidth;N0===void 0&&(N0=1),x0.setLineWidth(N0*l0()),W.isLineSegments?K0.setMode(C.LINES):W.isLineLoop?K0.setMode(C.LINE_LOOP):K0.setMode(C.LINE_STRIP)}else W.isPoints?K0.setMode(C.POINTS):W.isSprite&&K0.setMode(C.TRIANGLES);if(W.isInstancedMesh)K0.renderInstances(B0,ye,W.count);else if(H.isInstancedBufferGeometry){const N0=H._maxInstanceCount!==void 0?H._maxInstanceCount:1/0,Hn=Math.min(H.instanceCount,N0);K0.renderInstances(B0,ye,Hn)}else K0.render(B0,ye)},this.compile=function(S,N){function H(P,W,v0){P.transparent===!0&&P.side===Fe&&P.forceSinglePass===!1?(P.side=de,P.needsUpdate=!0,hn(P,W,v0),P.side=tt,P.needsUpdate=!0,hn(P,W,v0),P.side=Fe):hn(P,W,v0)}v=g.get(S),v.init(),p.push(v),S.traverseVisible(function(P){P.isLight&&P.layers.test(N.layers)&&(v.pushLight(P),P.castShadow&&v.pushShadow(P))}),v.setupLights(c.useLegacyLights),S.traverse(function(P){const W=P.material;if(W)if(Array.isArray(W))for(let v0=0;v0<W.length;v0++){const M0=W[v0];H(M0,S,P)}else H(W,S,P)}),p.pop(),v=null};let Q=null;function h0(S){Q&&Q(S)}function _0(){G0.stop()}function z0(){G0.start()}const G0=new z2;G0.setAnimationLoop(h0),typeof self<"u"&&G0.setContext(self),this.setAnimationLoop=function(S){Q=S,u0.setAnimationLoop(S),S===null?G0.stop():G0.start()},u0.addEventListener("sessionstart",_0),u0.addEventListener("sessionend",z0),this.render=function(S,N){if(N!==void 0&&N.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(y===!0)return;S.matrixWorldAutoUpdate===!0&&S.updateMatrixWorld(),N.parent===null&&N.matrixWorldAutoUpdate===!0&&N.updateMatrixWorld(),u0.enabled===!0&&u0.isPresenting===!0&&(u0.cameraAutoUpdate===!0&&u0.updateCamera(N),N=u0.getCamera()),S.isScene===!0&&S.onBeforeRender(c,S,N,T),v=g.get(S,p.length),v.init(),p.push(v),z.multiplyMatrices(N.projectionMatrix,N.matrixWorldInverse),Z.setFromProjectionMatrix(z),p0=this.localClippingEnabled,e0=O.init(this.clippingPlanes,p0),m=E.get(S,x.length),m.init(),x.push(m),re(S,N,0,c.sortObjects),m.finish(),c.sortObjects===!0&&m.sort(B,V),e0===!0&&O.beginShadows();const H=v.state.shadowsArray;if(J.render(H,S,N),e0===!0&&O.endShadows(),this.info.autoReset===!0&&this.info.reset(),t0.render(m,S),v.setupLights(c.useLegacyLights),N.isArrayCamera){const P=N.cameras;for(let W=0,v0=P.length;W<v0;W++){const M0=P[W];je(m,S,M0,M0.viewport)}}else je(m,S,N);T!==null&&(A0.updateMultisampleRenderTarget(T),A0.updateRenderTargetMipmap(T)),S.isScene===!0&&S.onAfterRender(c,S,N),o0.resetDefaultState(),R=-1,U=null,p.pop(),p.length>0?v=p[p.length-1]:v=null,x.pop(),x.length>0?m=x[x.length-1]:m=null};function re(S,N,H,P){if(S.visible===!1)return;if(S.layers.test(N.layers)){if(S.isGroup)H=S.renderOrder;else if(S.isLOD)S.autoUpdate===!0&&S.update(N);else if(S.isLight)v.pushLight(S),S.castShadow&&v.pushShadow(S);else if(S.isSprite){if(!S.frustumCulled||Z.intersectsSprite(S)){P&&K.setFromMatrixPosition(S.matrixWorld).applyMatrix4(z);const M0=F0.update(S),y0=S.material;y0.visible&&m.push(S,M0,y0,H,K.z,null)}}else if((S.isMesh||S.isLine||S.isPoints)&&(!S.frustumCulled||Z.intersectsObject(S))){S.isSkinnedMesh&&S.skeleton.frame!==O0.render.frame&&(S.skeleton.update(),S.skeleton.frame=O0.render.frame);const M0=F0.update(S),y0=S.material;if(P&&(M0.boundingSphere===null&&M0.computeBoundingSphere(),K.copy(M0.boundingSphere.center).applyMatrix4(S.matrixWorld).applyMatrix4(z)),Array.isArray(y0)){const w0=M0.groups;for(let L0=0,P0=w0.length;L0<P0;L0++){const D0=w0[L0],B0=y0[D0.materialIndex];B0&&B0.visible&&m.push(S,M0,B0,H,K.z,D0)}}else y0.visible&&m.push(S,M0,y0,H,K.z,null)}}const v0=S.children;for(let M0=0,y0=v0.length;M0<y0;M0++)re(v0[M0],N,H,P)}function je(S,N,H,P){const W=S.opaque,v0=S.transmissive,M0=S.transparent;v.setupLightsView(H),e0===!0&&O.setGlobalState(c.clippingPlanes,H),v0.length>0&&Y0(W,v0,N,H),P&&x0.viewport(k.copy(P)),W.length>0&&xe(W,N,H),v0.length>0&&xe(v0,N,H),M0.length>0&&xe(M0,N,H),x0.buffers.depth.setTest(!0),x0.buffers.depth.setMask(!0),x0.buffers.color.setMask(!0),x0.setPolygonOffset(!1)}function Y0(S,N,H,P){if(c0===null){const y0=i0.isWebGL2;c0=new xt(1024,1024,{generateMipmaps:!0,type:S0.has("EXT_color_buffer_half_float")?an:vt,minFilter:sn,samples:y0&&a===!0?4:0})}const W=c.getRenderTarget();c.setRenderTarget(c0),c.clear();const v0=c.toneMapping;c.toneMapping=Ye,xe(S,H,P),A0.updateMultisampleRenderTarget(c0),A0.updateRenderTargetMipmap(c0);let M0=!1;for(let y0=0,w0=N.length;y0<w0;y0++){const L0=N[y0],P0=L0.object,D0=L0.geometry,B0=L0.material,oe=L0.group;if(B0.side===Fe&&P0.layers.test(P.layers)){const ye=B0.side;B0.side=de,B0.needsUpdate=!0,Ue(P0,H,P,D0,B0,oe),B0.side=ye,B0.needsUpdate=!0,M0=!0}}M0===!0&&(A0.updateMultisampleRenderTarget(c0),A0.updateRenderTargetMipmap(c0)),c.setRenderTarget(W),c.toneMapping=v0}function xe(S,N,H){const P=N.isScene===!0?N.overrideMaterial:null;for(let W=0,v0=S.length;W<v0;W++){const M0=S[W],y0=M0.object,w0=M0.geometry,L0=P===null?M0.material:P,P0=M0.group;y0.layers.test(H.layers)&&Ue(y0,N,H,w0,L0,P0)}}function Ue(S,N,H,P,W,v0){S.onBeforeRender(c,N,H,P,W,v0),S.modelViewMatrix.multiplyMatrices(H.matrixWorldInverse,S.matrixWorld),S.normalMatrix.getNormalMatrix(S.modelViewMatrix),W.onBeforeRender(c,N,H,P,S,v0),W.transparent===!0&&W.side===Fe&&W.forceSinglePass===!1?(W.side=de,W.needsUpdate=!0,c.renderBufferDirect(H,N,P,W,S,v0),W.side=tt,W.needsUpdate=!0,c.renderBufferDirect(H,N,P,W,S,v0),W.side=Fe):c.renderBufferDirect(H,N,P,W,S,v0),S.onAfterRender(c,N,H,P,W,v0)}function hn(S,N,H){N.isScene!==!0&&(N=r0);const P=g0.get(S),W=v.state.lights,v0=v.state.shadowsArray,M0=W.state.version,y0=V0.getParameters(S,W.state,v0,N,H),w0=V0.getProgramCacheKey(y0);let L0=P.programs;P.environment=S.isMeshStandardMaterial?N.environment:null,P.fog=N.fog,P.envMap=(S.isMeshStandardMaterial?k0:W0).get(S.envMap||P.environment),L0===void 0&&(S.addEventListener("dispose",q0),L0=new Map,P.programs=L0);let P0=L0.get(w0);if(P0!==void 0){if(P.currentProgram===P0&&P.lightsStateVersion===M0)return B1(S,y0),P0}else y0.uniforms=V0.getUniforms(S),S.onBuild(H,y0,c),S.onBeforeCompile(y0,c),P0=V0.acquireProgram(y0,w0),L0.set(w0,P0),P.uniforms=y0.uniforms;const D0=P.uniforms;(!S.isShaderMaterial&&!S.isRawShaderMaterial||S.clipping===!0)&&(D0.clippingPlanes=O.uniform),B1(S,y0),P.needsLights=j2(S),P.lightsStateVersion=M0,P.needsLights&&(D0.ambientLightColor.value=W.state.ambient,D0.lightProbe.value=W.state.probe,D0.directionalLights.value=W.state.directional,D0.directionalLightShadows.value=W.state.directionalShadow,D0.spotLights.value=W.state.spot,D0.spotLightShadows.value=W.state.spotShadow,D0.rectAreaLights.value=W.state.rectArea,D0.ltc_1.value=W.state.rectAreaLTC1,D0.ltc_2.value=W.state.rectAreaLTC2,D0.pointLights.value=W.state.point,D0.pointLightShadows.value=W.state.pointShadow,D0.hemisphereLights.value=W.state.hemi,D0.directionalShadowMap.value=W.state.directionalShadowMap,D0.directionalShadowMatrix.value=W.state.directionalShadowMatrix,D0.spotShadowMap.value=W.state.spotShadowMap,D0.spotLightMatrix.value=W.state.spotLightMatrix,D0.spotLightMap.value=W.state.spotLightMap,D0.pointShadowMap.value=W.state.pointShadowMap,D0.pointShadowMatrix.value=W.state.pointShadowMatrix);const B0=P0.getUniforms(),oe=Nn.seqWithValue(B0.seq,D0);return P.currentProgram=P0,P.uniformsList=oe,P0}function B1(S,N){const H=g0.get(S);H.outputColorSpace=N.outputColorSpace,H.instancing=N.instancing,H.skinning=N.skinning,H.morphTargets=N.morphTargets,H.morphNormals=N.morphNormals,H.morphColors=N.morphColors,H.morphTargetsCount=N.morphTargetsCount,H.numClippingPlanes=N.numClippingPlanes,H.numIntersection=N.numClipIntersection,H.vertexAlphas=N.vertexAlphas,H.vertexTangents=N.vertexTangents,H.toneMapping=N.toneMapping}function q2(S,N,H,P,W){N.isScene!==!0&&(N=r0),A0.resetTextureUnits();const v0=N.fog,M0=P.isMeshStandardMaterial?N.environment:null,y0=T===null?c.outputColorSpace:T.isXRRenderTarget===!0?T.texture.colorSpace:Oe,w0=(P.isMeshStandardMaterial?k0:W0).get(P.envMap||M0),L0=P.vertexColors===!0&&!!H.attributes.color&&H.attributes.color.itemSize===4,P0=!!P.normalMap&&!!H.attributes.tangent,D0=!!H.morphAttributes.position,B0=!!H.morphAttributes.normal,oe=!!H.morphAttributes.color,ye=P.toneMapped?c.toneMapping:Ye,nt=H.morphAttributes.position||H.morphAttributes.normal||H.morphAttributes.color,K0=nt!==void 0?nt.length:0,N0=g0.get(P),Hn=v.state.lights;if(e0===!0&&(p0===!0||S!==U)){const pe=S===U&&P.id===R;O.setState(P,S,pe)}let Q0=!1;P.version===N0.__version?(N0.needsLights&&N0.lightsStateVersion!==Hn.state.version||N0.outputColorSpace!==y0||W.isInstancedMesh&&N0.instancing===!1||!W.isInstancedMesh&&N0.instancing===!0||W.isSkinnedMesh&&N0.skinning===!1||!W.isSkinnedMesh&&N0.skinning===!0||N0.envMap!==w0||P.fog===!0&&N0.fog!==v0||N0.numClippingPlanes!==void 0&&(N0.numClippingPlanes!==O.numPlanes||N0.numIntersection!==O.numIntersection)||N0.vertexAlphas!==L0||N0.vertexTangents!==P0||N0.morphTargets!==D0||N0.morphNormals!==B0||N0.morphColors!==oe||N0.toneMapping!==ye||i0.isWebGL2===!0&&N0.morphTargetsCount!==K0)&&(Q0=!0):(Q0=!0,N0.__version=P.version);let it=N0.currentProgram;Q0===!0&&(it=hn(P,N,W));let z1=!1,$t=!1,Vn=!1;const le=it.getUniforms(),rt=N0.uniforms;if(x0.useProgram(it.program)&&(z1=!0,$t=!0,Vn=!0),P.id!==R&&(R=P.id,$t=!0),z1||U!==S){if(le.setValue(C,"projectionMatrix",S.projectionMatrix),i0.logarithmicDepthBuffer&&le.setValue(C,"logDepthBufFC",2/(Math.log(S.far+1)/Math.LN2)),U!==S&&(U=S,$t=!0,Vn=!0),P.isShaderMaterial||P.isMeshPhongMaterial||P.isMeshToonMaterial||P.isMeshStandardMaterial||P.envMap){const pe=le.map.cameraPosition;pe!==void 0&&pe.setValue(C,K.setFromMatrixPosition(S.matrixWorld))}(P.isMeshPhongMaterial||P.isMeshToonMaterial||P.isMeshLambertMaterial||P.isMeshBasicMaterial||P.isMeshStandardMaterial||P.isShaderMaterial)&&le.setValue(C,"isOrthographic",S.isOrthographicCamera===!0),(P.isMeshPhongMaterial||P.isMeshToonMaterial||P.isMeshLambertMaterial||P.isMeshBasicMaterial||P.isMeshStandardMaterial||P.isShaderMaterial||P.isShadowMaterial||W.isSkinnedMesh)&&le.setValue(C,"viewMatrix",S.matrixWorldInverse)}if(W.isSkinnedMesh){le.setOptional(C,W,"bindMatrix"),le.setOptional(C,W,"bindMatrixInverse");const pe=W.skeleton;pe&&(i0.floatVertexTextures?(pe.boneTexture===null&&pe.computeBoneTexture(),le.setValue(C,"boneTexture",pe.boneTexture,A0),le.setValue(C,"boneTextureSize",pe.boneTextureSize)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}const kn=H.morphAttributes;if((kn.position!==void 0||kn.normal!==void 0||kn.color!==void 0&&i0.isWebGL2===!0)&&a0.update(W,H,it),($t||N0.receiveShadow!==W.receiveShadow)&&(N0.receiveShadow=W.receiveShadow,le.setValue(C,"receiveShadow",W.receiveShadow)),P.isMeshGouraudMaterial&&P.envMap!==null&&(rt.envMap.value=w0,rt.flipEnvMap.value=w0.isCubeTexture&&w0.isRenderTargetTexture===!1?-1:1),$t&&(le.setValue(C,"toneMappingExposure",c.toneMappingExposure),N0.needsLights&&Y2(rt,Vn),v0&&P.fog===!0&&ie.refreshFogUniforms(rt,v0),ie.refreshMaterialUniforms(rt,P,I,$,c0),Nn.upload(C,N0.uniformsList,rt,A0)),P.isShaderMaterial&&P.uniformsNeedUpdate===!0&&(Nn.upload(C,N0.uniformsList,rt,A0),P.uniformsNeedUpdate=!1),P.isSpriteMaterial&&le.setValue(C,"center",W.center),le.setValue(C,"modelViewMatrix",W.modelViewMatrix),le.setValue(C,"normalMatrix",W.normalMatrix),le.setValue(C,"modelMatrix",W.matrixWorld),P.isShaderMaterial||P.isRawShaderMaterial){const pe=P.uniformsGroups;for(let Wn=0,K2=pe.length;Wn<K2;Wn++)if(i0.isWebGL2){const G1=pe[Wn];d0.update(G1,it),d0.bind(G1,it)}else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}return it}function Y2(S,N){S.ambientLightColor.needsUpdate=N,S.lightProbe.needsUpdate=N,S.directionalLights.needsUpdate=N,S.directionalLightShadows.needsUpdate=N,S.pointLights.needsUpdate=N,S.pointLightShadows.needsUpdate=N,S.spotLights.needsUpdate=N,S.spotLightShadows.needsUpdate=N,S.rectAreaLights.needsUpdate=N,S.hemisphereLights.needsUpdate=N}function j2(S){return S.isMeshLambertMaterial||S.isMeshToonMaterial||S.isMeshPhongMaterial||S.isMeshStandardMaterial||S.isShadowMaterial||S.isShaderMaterial&&S.lights===!0}this.getActiveCubeFace=function(){return M},this.getActiveMipmapLevel=function(){return L},this.getRenderTarget=function(){return T},this.setRenderTargetTextures=function(S,N,H){g0.get(S.texture).__webglTexture=N,g0.get(S.depthTexture).__webglTexture=H;const P=g0.get(S);P.__hasExternalTextures=!0,P.__hasExternalTextures&&(P.__autoAllocateDepthBuffer=H===void 0,P.__autoAllocateDepthBuffer||S0.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),P.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(S,N){const H=g0.get(S);H.__webglFramebuffer=N,H.__useDefaultFramebuffer=N===void 0},this.setRenderTarget=function(S,N=0,H=0){T=S,M=N,L=H;let P=!0,W=null,v0=!1,M0=!1;if(S){const w0=g0.get(S);w0.__useDefaultFramebuffer!==void 0?(x0.bindFramebuffer(C.FRAMEBUFFER,null),P=!1):w0.__webglFramebuffer===void 0?A0.setupRenderTarget(S):w0.__hasExternalTextures&&A0.rebindTextures(S,g0.get(S.texture).__webglTexture,g0.get(S.depthTexture).__webglTexture);const L0=S.texture;(L0.isData3DTexture||L0.isDataArrayTexture||L0.isCompressedArrayTexture)&&(M0=!0);const P0=g0.get(S).__webglFramebuffer;S.isWebGLCubeRenderTarget?(W=P0[N],v0=!0):i0.isWebGL2&&S.samples>0&&A0.useMultisampledRTT(S)===!1?W=g0.get(S).__webglMultisampledFramebuffer:W=P0,k.copy(S.viewport),_.copy(S.scissor),b=S.scissorTest}else k.copy(n0).multiplyScalar(I).floor(),_.copy(Y).multiplyScalar(I).floor(),b=X;if(x0.bindFramebuffer(C.FRAMEBUFFER,W)&&i0.drawBuffers&&P&&x0.drawBuffers(S,W),x0.viewport(k),x0.scissor(_),x0.setScissorTest(b),v0){const w0=g0.get(S.texture);C.framebufferTexture2D(C.FRAMEBUFFER,C.COLOR_ATTACHMENT0,C.TEXTURE_CUBE_MAP_POSITIVE_X+N,w0.__webglTexture,H)}else if(M0){const w0=g0.get(S.texture),L0=N||0;C.framebufferTextureLayer(C.FRAMEBUFFER,C.COLOR_ATTACHMENT0,w0.__webglTexture,H||0,L0)}R=-1},this.readRenderTargetPixels=function(S,N,H,P,W,v0,M0){if(!(S&&S.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let y0=g0.get(S).__webglFramebuffer;if(S.isWebGLCubeRenderTarget&&M0!==void 0&&(y0=y0[M0]),y0){x0.bindFramebuffer(C.FRAMEBUFFER,y0);try{const w0=S.texture,L0=w0.format,P0=w0.type;if(L0!==Pe&&F.convert(L0)!==C.getParameter(C.IMPLEMENTATION_COLOR_READ_FORMAT)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const D0=P0===an&&(S0.has("EXT_color_buffer_half_float")||i0.isWebGL2&&S0.has("EXT_color_buffer_float"));if(P0!==vt&&F.convert(P0)!==C.getParameter(C.IMPLEMENTATION_COLOR_READ_TYPE)&&!(P0===pt&&(i0.isWebGL2||S0.has("OES_texture_float")||S0.has("WEBGL_color_buffer_float")))&&!D0){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}N>=0&&N<=S.width-P&&H>=0&&H<=S.height-W&&C.readPixels(N,H,P,W,F.convert(L0),F.convert(P0),v0)}finally{const w0=T!==null?g0.get(T).__webglFramebuffer:null;x0.bindFramebuffer(C.FRAMEBUFFER,w0)}}},this.copyFramebufferToTexture=function(S,N,H=0){const P=Math.pow(2,-H),W=Math.floor(N.image.width*P),v0=Math.floor(N.image.height*P);A0.setTexture2D(N,0),C.copyTexSubImage2D(C.TEXTURE_2D,H,0,0,S.x,S.y,W,v0),x0.unbindTexture()},this.copyTextureToTexture=function(S,N,H,P=0){const W=N.image.width,v0=N.image.height,M0=F.convert(H.format),y0=F.convert(H.type);A0.setTexture2D(H,0),C.pixelStorei(C.UNPACK_FLIP_Y_WEBGL,H.flipY),C.pixelStorei(C.UNPACK_PREMULTIPLY_ALPHA_WEBGL,H.premultiplyAlpha),C.pixelStorei(C.UNPACK_ALIGNMENT,H.unpackAlignment),N.isDataTexture?C.texSubImage2D(C.TEXTURE_2D,P,S.x,S.y,W,v0,M0,y0,N.image.data):N.isCompressedTexture?C.compressedTexSubImage2D(C.TEXTURE_2D,P,S.x,S.y,N.mipmaps[0].width,N.mipmaps[0].height,M0,N.mipmaps[0].data):C.texSubImage2D(C.TEXTURE_2D,P,S.x,S.y,M0,y0,N.image),P===0&&H.generateMipmaps&&C.generateMipmap(C.TEXTURE_2D),x0.unbindTexture()},this.copyTextureToTexture3D=function(S,N,H,P,W=0){if(c.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const v0=S.max.x-S.min.x+1,M0=S.max.y-S.min.y+1,y0=S.max.z-S.min.z+1,w0=F.convert(P.format),L0=F.convert(P.type);let P0;if(P.isData3DTexture)A0.setTexture3D(P,0),P0=C.TEXTURE_3D;else if(P.isDataArrayTexture)A0.setTexture2DArray(P,0),P0=C.TEXTURE_2D_ARRAY;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}C.pixelStorei(C.UNPACK_FLIP_Y_WEBGL,P.flipY),C.pixelStorei(C.UNPACK_PREMULTIPLY_ALPHA_WEBGL,P.premultiplyAlpha),C.pixelStorei(C.UNPACK_ALIGNMENT,P.unpackAlignment);const D0=C.getParameter(C.UNPACK_ROW_LENGTH),B0=C.getParameter(C.UNPACK_IMAGE_HEIGHT),oe=C.getParameter(C.UNPACK_SKIP_PIXELS),ye=C.getParameter(C.UNPACK_SKIP_ROWS),nt=C.getParameter(C.UNPACK_SKIP_IMAGES),K0=H.isCompressedTexture?H.mipmaps[0]:H.image;C.pixelStorei(C.UNPACK_ROW_LENGTH,K0.width),C.pixelStorei(C.UNPACK_IMAGE_HEIGHT,K0.height),C.pixelStorei(C.UNPACK_SKIP_PIXELS,S.min.x),C.pixelStorei(C.UNPACK_SKIP_ROWS,S.min.y),C.pixelStorei(C.UNPACK_SKIP_IMAGES,S.min.z),H.isDataTexture||H.isData3DTexture?C.texSubImage3D(P0,W,N.x,N.y,N.z,v0,M0,y0,w0,L0,K0.data):H.isCompressedArrayTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),C.compressedTexSubImage3D(P0,W,N.x,N.y,N.z,v0,M0,y0,w0,K0.data)):C.texSubImage3D(P0,W,N.x,N.y,N.z,v0,M0,y0,w0,L0,K0),C.pixelStorei(C.UNPACK_ROW_LENGTH,D0),C.pixelStorei(C.UNPACK_IMAGE_HEIGHT,B0),C.pixelStorei(C.UNPACK_SKIP_PIXELS,oe),C.pixelStorei(C.UNPACK_SKIP_ROWS,ye),C.pixelStorei(C.UNPACK_SKIP_IMAGES,nt),W===0&&P.generateMipmaps&&C.generateMipmap(P0),x0.unbindTexture()},this.initTexture=function(S){S.isCubeTexture?A0.setTextureCube(S,0):S.isData3DTexture?A0.setTexture3D(S,0):S.isDataArrayTexture||S.isCompressedArrayTexture?A0.setTexture2DArray(S,0):A0.setTexture2D(S,0),x0.unbindTexture()},this.resetState=function(){M=0,L=0,T=null,x0.reset(),o0.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get physicallyCorrectLights(){return console.warn("THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."),!this.useLegacyLights}set physicallyCorrectLights(e){console.warn("THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."),this.useLegacyLights=!e}get outputEncoding(){return console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."),this.outputColorSpace===b0?_t:y2}set outputEncoding(e){console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."),this.outputColorSpace=e===_t?b0:Oe}}class n3 extends W2{}n3.prototype.isWebGL1Renderer=!0;class i3 extends fe{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),this.backgroundBlurriness=e.backgroundBlurriness,this.backgroundIntensity=e.backgroundIntensity,e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.fog!==null&&(t.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(t.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(t.object.backgroundIntensity=this.backgroundIntensity),t}get autoUpdate(){return console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate}set autoUpdate(e){console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate=e}}class X2 extends cn{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new H0(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.fog=e.fog,this}}const o2=new D,l2=new D,c2=new te,T1=new L2,In=new Bn;class r3 extends fe{constructor(e=new Be,t=new X2){super(),this.isLine=!0,this.type="Line",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,n=[0];for(let r=1,s=t.count;r<s;r++)o2.fromBufferAttribute(t,r-1),l2.fromBufferAttribute(t,r),n[r]=n[r-1],n[r]+=o2.distanceTo(l2);e.setAttribute("lineDistance",new De(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(e,t){const n=this.geometry,r=this.matrixWorld,s=e.params.Line.threshold,o=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),In.copy(n.boundingSphere),In.applyMatrix4(r),In.radius+=s,e.ray.intersectsSphere(In)===!1)return;c2.copy(r).invert(),T1.copy(e.ray).applyMatrix4(c2);const a=s/((this.scale.x+this.scale.y+this.scale.z)/3),u=a*a,l=new D,h=new D,f=new D,d=new D,m=this.isLineSegments?2:1,v=n.index,p=n.attributes.position;if(v!==null){const c=Math.max(0,o.start),y=Math.min(v.count,o.start+o.count);for(let M=c,L=y-1;M<L;M+=m){const T=v.getX(M),R=v.getX(M+1);if(l.fromBufferAttribute(p,T),h.fromBufferAttribute(p,R),T1.distanceSqToSegment(l,h,d,f)>u)continue;d.applyMatrix4(this.matrixWorld);const k=e.ray.origin.distanceTo(d);k<e.near||k>e.far||t.push({distance:k,point:f.clone().applyMatrix4(this.matrixWorld),index:M,face:null,faceIndex:null,object:this})}}else{const c=Math.max(0,o.start),y=Math.min(p.count,o.start+o.count);for(let M=c,L=y-1;M<L;M+=m){if(l.fromBufferAttribute(p,M),h.fromBufferAttribute(p,M+1),T1.distanceSqToSegment(l,h,d,f)>u)continue;d.applyMatrix4(this.matrixWorld);const R=e.ray.origin.distanceTo(d);R<e.near||R>e.far||t.push({distance:R,point:f.clone().applyMatrix4(this.matrixWorld),index:M,face:null,faceIndex:null,object:this})}}}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const r=t[n[0]];if(r!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=r.length;s<o;s++){const a=r[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}}const u2=new D,h2=new D;class s3 extends r3{constructor(e,t){super(e,t),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,n=[];for(let r=0,s=t.count;r<s;r+=2)u2.fromBufferAttribute(t,r),h2.fromBufferAttribute(t,r+1),n[r]=r===0?0:n[r-1],n[r+1]=n[r]+u2.distanceTo(h2);e.setAttribute("lineDistance",new De(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class d2{constructor(e=1,t=0,n=0){return this.radius=e,this.phi=t,this.theta=n,this}set(e,t,n){return this.radius=e,this.phi=t,this.theta=n,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=Math.sqrt(e*e+t*t+n*n),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,n),this.phi=Math.acos(he(t/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class a3 extends s3{constructor(e=1){const t=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e],n=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],r=new Be;r.setAttribute("position",new De(t,3)),r.setAttribute("color",new De(n,3));const s=new X2({vertexColors:!0,toneMapped:!1});super(r,s),this.type="AxesHelper"}setColors(e,t,n){const r=new H0,s=this.geometry.attributes.color.array;return r.set(e),r.toArray(s,0),r.toArray(s,3),r.set(t),r.toArray(s,6),r.toArray(s,9),r.set(n),r.toArray(s,12),r.toArray(s,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:I1}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=I1);const f2={type:"change"},y1={type:"start"},p2={type:"end"};class o3 extends Et{constructor(e,t){super(),this.object=e,this.domElement=t,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new D,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:Tt.ROTATE,MIDDLE:Tt.DOLLY,RIGHT:Tt.PAN},this.touches={ONE:yt.ROTATE,TWO:yt.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return a.phi},this.getAzimuthalAngle=function(){return a.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(A){A.addEventListener("keydown",V0),this._domElementKeyEvents=A},this.stopListenToKeyEvents=function(){this._domElementKeyEvents.removeEventListener("keydown",V0),this._domElementKeyEvents=null},this.saveState=function(){n.target0.copy(n.target),n.position0.copy(n.object.position),n.zoom0=n.object.zoom},this.reset=function(){n.target.copy(n.target0),n.object.position.copy(n.position0),n.object.zoom=n.zoom0,n.object.updateProjectionMatrix(),n.dispatchEvent(f2),n.update(),s=r.NONE},this.update=function(){const A=new D,q=new Mt().setFromUnitVectors(e.up,new D(0,1,0)),F=q.clone().invert(),o0=new D,d0=new Mt,m0=2*Math.PI;return function(){const f0=n.object.position;A.copy(f0).sub(n.target),A.applyQuaternion(q),a.setFromVector3(A),n.autoRotate&&s===r.NONE&&_(U()),n.enableDamping?(a.theta+=u.theta*n.dampingFactor,a.phi+=u.phi*n.dampingFactor):(a.theta+=u.theta,a.phi+=u.phi);let T0=n.minAzimuthAngle,C0=n.maxAzimuthAngle;return isFinite(T0)&&isFinite(C0)&&(T0<-Math.PI?T0+=m0:T0>Math.PI&&(T0-=m0),C0<-Math.PI?C0+=m0:C0>Math.PI&&(C0-=m0),T0<=C0?a.theta=Math.max(T0,Math.min(C0,a.theta)):a.theta=a.theta>(T0+C0)/2?Math.max(T0,a.theta):Math.min(C0,a.theta)),a.phi=Math.max(n.minPolarAngle,Math.min(n.maxPolarAngle,a.phi)),a.makeSafe(),a.radius*=l,a.radius=Math.max(n.minDistance,Math.min(n.maxDistance,a.radius)),n.enableDamping===!0?n.target.addScaledVector(h,n.dampingFactor):n.target.add(h),A.setFromSpherical(a),A.applyQuaternion(F),f0.copy(n.target).add(A),n.object.lookAt(n.target),n.enableDamping===!0?(u.theta*=1-n.dampingFactor,u.phi*=1-n.dampingFactor,h.multiplyScalar(1-n.dampingFactor)):(u.set(0,0,0),h.set(0,0,0)),l=1,f||o0.distanceToSquared(n.object.position)>o||8*(1-d0.dot(n.object.quaternion))>o?(n.dispatchEvent(f2),o0.copy(n.object.position),d0.copy(n.object.quaternion),f=!1,!0):!1}}(),this.dispose=function(){n.domElement.removeEventListener("contextmenu",g),n.domElement.removeEventListener("pointerdown",A0),n.domElement.removeEventListener("pointercancel",k0),n.domElement.removeEventListener("wheel",F0),n.domElement.removeEventListener("pointermove",W0),n.domElement.removeEventListener("pointerup",k0),n._domElementKeyEvents!==null&&(n._domElementKeyEvents.removeEventListener("keydown",V0),n._domElementKeyEvents=null)};const n=this,r={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let s=r.NONE;const o=1e-6,a=new d2,u=new d2;let l=1;const h=new D;let f=!1;const d=new I0,m=new I0,v=new I0,x=new I0,p=new I0,c=new I0,y=new I0,M=new I0,L=new I0,T=[],R={};function U(){return 2*Math.PI/60/60*n.autoRotateSpeed}function k(){return Math.pow(.95,n.zoomSpeed)}function _(A){u.theta-=A}function b(A){u.phi-=A}const j=function(){const A=new D;return function(F,o0){A.setFromMatrixColumn(o0,0),A.multiplyScalar(-F),h.add(A)}}(),$=function(){const A=new D;return function(F,o0){n.screenSpacePanning===!0?A.setFromMatrixColumn(o0,1):(A.setFromMatrixColumn(o0,0),A.crossVectors(n.object.up,A)),A.multiplyScalar(F),h.add(A)}}(),I=function(){const A=new D;return function(F,o0){const d0=n.domElement;if(n.object.isPerspectiveCamera){const m0=n.object.position;A.copy(m0).sub(n.target);let u0=A.length();u0*=Math.tan(n.object.fov/2*Math.PI/180),j(2*F*u0/d0.clientHeight,n.object.matrix),$(2*o0*u0/d0.clientHeight,n.object.matrix)}else n.object.isOrthographicCamera?(j(F*(n.object.right-n.object.left)/n.object.zoom/d0.clientWidth,n.object.matrix),$(o0*(n.object.top-n.object.bottom)/n.object.zoom/d0.clientHeight,n.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),n.enablePan=!1)}}();function B(A){n.object.isPerspectiveCamera?l/=A:n.object.isOrthographicCamera?(n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom*A)),n.object.updateProjectionMatrix(),f=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function V(A){n.object.isPerspectiveCamera?l*=A:n.object.isOrthographicCamera?(n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/A)),n.object.updateProjectionMatrix(),f=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function n0(A){d.set(A.clientX,A.clientY)}function Y(A){y.set(A.clientX,A.clientY)}function X(A){x.set(A.clientX,A.clientY)}function Z(A){m.set(A.clientX,A.clientY),v.subVectors(m,d).multiplyScalar(n.rotateSpeed);const q=n.domElement;_(2*Math.PI*v.x/q.clientHeight),b(2*Math.PI*v.y/q.clientHeight),d.copy(m),n.update()}function e0(A){M.set(A.clientX,A.clientY),L.subVectors(M,y),L.y>0?B(k()):L.y<0&&V(k()),y.copy(M),n.update()}function p0(A){p.set(A.clientX,A.clientY),c.subVectors(p,x).multiplyScalar(n.panSpeed),I(c.x,c.y),x.copy(p),n.update()}function c0(A){A.deltaY<0?V(k()):A.deltaY>0&&B(k()),n.update()}function z(A){let q=!1;switch(A.code){case n.keys.UP:A.ctrlKey||A.metaKey||A.shiftKey?b(2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):I(0,n.keyPanSpeed),q=!0;break;case n.keys.BOTTOM:A.ctrlKey||A.metaKey||A.shiftKey?b(-2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):I(0,-n.keyPanSpeed),q=!0;break;case n.keys.LEFT:A.ctrlKey||A.metaKey||A.shiftKey?_(2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):I(n.keyPanSpeed,0),q=!0;break;case n.keys.RIGHT:A.ctrlKey||A.metaKey||A.shiftKey?_(-2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):I(-n.keyPanSpeed,0),q=!0;break}q&&(A.preventDefault(),n.update())}function K(){if(T.length===1)d.set(T[0].pageX,T[0].pageY);else{const A=.5*(T[0].pageX+T[1].pageX),q=.5*(T[0].pageY+T[1].pageY);d.set(A,q)}}function r0(){if(T.length===1)x.set(T[0].pageX,T[0].pageY);else{const A=.5*(T[0].pageX+T[1].pageX),q=.5*(T[0].pageY+T[1].pageY);x.set(A,q)}}function l0(){const A=T[0].pageX-T[1].pageX,q=T[0].pageY-T[1].pageY,F=Math.sqrt(A*A+q*q);y.set(0,F)}function C(){n.enableZoom&&l0(),n.enablePan&&r0()}function E0(){n.enableZoom&&l0(),n.enableRotate&&K()}function S0(A){if(T.length==1)m.set(A.pageX,A.pageY);else{const F=a0(A),o0=.5*(A.pageX+F.x),d0=.5*(A.pageY+F.y);m.set(o0,d0)}v.subVectors(m,d).multiplyScalar(n.rotateSpeed);const q=n.domElement;_(2*Math.PI*v.x/q.clientHeight),b(2*Math.PI*v.y/q.clientHeight),d.copy(m)}function i0(A){if(T.length===1)p.set(A.pageX,A.pageY);else{const q=a0(A),F=.5*(A.pageX+q.x),o0=.5*(A.pageY+q.y);p.set(F,o0)}c.subVectors(p,x).multiplyScalar(n.panSpeed),I(c.x,c.y),x.copy(p)}function x0(A){const q=a0(A),F=A.pageX-q.x,o0=A.pageY-q.y,d0=Math.sqrt(F*F+o0*o0);M.set(0,d0),L.set(0,Math.pow(M.y/y.y,n.zoomSpeed)),B(L.y),y.copy(M)}function O0(A){n.enableZoom&&x0(A),n.enablePan&&i0(A)}function g0(A){n.enableZoom&&x0(A),n.enableRotate&&S0(A)}function A0(A){n.enabled!==!1&&(T.length===0&&(n.domElement.setPointerCapture(A.pointerId),n.domElement.addEventListener("pointermove",W0),n.domElement.addEventListener("pointerup",k0)),O(A),A.pointerType==="touch"?ie(A):j0(A))}function W0(A){n.enabled!==!1&&(A.pointerType==="touch"?E(A):X0(A))}function k0(A){J(A),T.length===0&&(n.domElement.releasePointerCapture(A.pointerId),n.domElement.removeEventListener("pointermove",W0),n.domElement.removeEventListener("pointerup",k0)),n.dispatchEvent(p2),s=r.NONE}function j0(A){let q;switch(A.button){case 0:q=n.mouseButtons.LEFT;break;case 1:q=n.mouseButtons.MIDDLE;break;case 2:q=n.mouseButtons.RIGHT;break;default:q=-1}switch(q){case Tt.DOLLY:if(n.enableZoom===!1)return;Y(A),s=r.DOLLY;break;case Tt.ROTATE:if(A.ctrlKey||A.metaKey||A.shiftKey){if(n.enablePan===!1)return;X(A),s=r.PAN}else{if(n.enableRotate===!1)return;n0(A),s=r.ROTATE}break;case Tt.PAN:if(A.ctrlKey||A.metaKey||A.shiftKey){if(n.enableRotate===!1)return;n0(A),s=r.ROTATE}else{if(n.enablePan===!1)return;X(A),s=r.PAN}break;default:s=r.NONE}s!==r.NONE&&n.dispatchEvent(y1)}function X0(A){switch(s){case r.ROTATE:if(n.enableRotate===!1)return;Z(A);break;case r.DOLLY:if(n.enableZoom===!1)return;e0(A);break;case r.PAN:if(n.enablePan===!1)return;p0(A);break}}function F0(A){n.enabled===!1||n.enableZoom===!1||s!==r.NONE||(A.preventDefault(),n.dispatchEvent(y1),c0(A),n.dispatchEvent(p2))}function V0(A){n.enabled===!1||n.enablePan===!1||z(A)}function ie(A){switch(t0(A),T.length){case 1:switch(n.touches.ONE){case yt.ROTATE:if(n.enableRotate===!1)return;K(),s=r.TOUCH_ROTATE;break;case yt.PAN:if(n.enablePan===!1)return;r0(),s=r.TOUCH_PAN;break;default:s=r.NONE}break;case 2:switch(n.touches.TWO){case yt.DOLLY_PAN:if(n.enableZoom===!1&&n.enablePan===!1)return;C(),s=r.TOUCH_DOLLY_PAN;break;case yt.DOLLY_ROTATE:if(n.enableZoom===!1&&n.enableRotate===!1)return;E0(),s=r.TOUCH_DOLLY_ROTATE;break;default:s=r.NONE}break;default:s=r.NONE}s!==r.NONE&&n.dispatchEvent(y1)}function E(A){switch(t0(A),s){case r.TOUCH_ROTATE:if(n.enableRotate===!1)return;S0(A),n.update();break;case r.TOUCH_PAN:if(n.enablePan===!1)return;i0(A),n.update();break;case r.TOUCH_DOLLY_PAN:if(n.enableZoom===!1&&n.enablePan===!1)return;O0(A),n.update();break;case r.TOUCH_DOLLY_ROTATE:if(n.enableZoom===!1&&n.enableRotate===!1)return;g0(A),n.update();break;default:s=r.NONE}}function g(A){n.enabled!==!1&&A.preventDefault()}function O(A){T.push(A)}function J(A){delete R[A.pointerId];for(let q=0;q<T.length;q++)if(T[q].pointerId==A.pointerId){T.splice(q,1);return}}function t0(A){let q=R[A.pointerId];q===void 0&&(q=new I0,R[A.pointerId]=q),q.set(A.pageX,A.pageY)}function a0(A){const q=A.pointerId===T[0].pointerId?T[1]:T[0];return R[q.pointerId]}n.domElement.addEventListener("contextmenu",g),n.domElement.addEventListener("pointerdown",A0),n.domElement.addEventListener("pointercancel",k0),n.domElement.addEventListener("wheel",F0,{passive:!1}),this.update()}}const l3={__name:"threejs",setup(i){let e=m2(null),t=()=>{let n=new i3;n.background=new H0(1712172),new a3(100);let r=new Ee(20,window.innerWidth/window.innerHeight,.1,1e3);r.position.set(50,50,180),r.rotation.set(Math.PI/3,0,0);let s=new W2;s.setSize(900,400),e.value.appendChild(s.domElement);let o=new Be,a=new Float32Array(er),u=Q2,l=new Float32Array(J2);o.setAttribute("position",new Te(a,3)),o.setAttribute("color",new Te(l,3)),o.setIndex(u);let h=new N1({side:Fe,vertexColors:2,wireframe:!0}),f=new qe(o,h);f.rotation.set(Math.PI/-2,0,0),f.position.set(0,-13,0),n.add(f),new o3(r,s.domElement);let d=()=>{requestAnimationFrame(d),f.rotation.z+=.005,r.lookAt(new D(0,0,0)),s.render(n,r)};d()};return Z2(()=>{t()}),(n,r)=>(ut(),ht("div",{id:"box",ref_key:"box",ref:e},null,512))}},c3=U1(l3,[["__scopeId","data-v-4c4df7df"]]);const u3=i=>(_2("data-v-1696189d"),i=i(),g2(),i),h3={id:"box"},d3=u3(()=>Qe("h2",null,"News",-1)),f3={id:"title"},p3=["onClick"],m3={__name:"new",setup(i){let e=m2([{title:"Recent",mesage:["1","2","3","4","5"],flag:!1},{title:"Older",mesage:["1","2","3","4","5"],flag:!1}]);return(t,n)=>(ut(),ht("div",h3,[d3,(ut(!0),ht(H1,null,V1($2(e),r=>(ut(),ht("div",f3,[Xn(Qe("span",null,null,512),[[qn,!r.flag]]),Xn(Qe("span",null,null,512),[[qn,r.flag]]),Qe("dl",null,[Qe("span",{class:"button",onClick:s=>r.flag=!r.flag},k1(r.title),9,p3),(ut(!0),ht(H1,null,V1(r.mesage,s=>Xn((ut(),ht("li",{class:"span"},k1(s),513)),[[qn,r.flag]])),256))])]))),256))]))}},_3=U1(m3,[["__scopeId","data-v-1696189d"]]);const g3=i=>(_2("data-v-b482b5d3"),i=i(),g2(),i),v3={id:"box"},x3=g3(()=>Qe("div",{id:"sbox"},[Qe("h1",null,"About"),Qe("span",null,"Our goal is to build the smart and connected water systems of the future ...")],-1)),M3={__name:"About",setup(i){return(e,t)=>(ut(),ht("div",v3,[x3,W1(c3),W1(_3)]))}},E3=U1(M3,[["__scopeId","data-v-b482b5d3"]]);export{E3 as default};
